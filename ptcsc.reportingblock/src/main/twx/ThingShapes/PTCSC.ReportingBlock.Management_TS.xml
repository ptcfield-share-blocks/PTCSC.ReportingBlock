<?xml version="1.0" encoding="UTF-8"?>
<Entities
 majorVersion="9"
 minorVersion="3"
 universal="">
    <ThingShapes>
        <ThingShape
         aspect.isEditableExtensionObject="true"
         aspect.isExtension="true"
         aspect.isSystemObject="false"
         className=""
         description="Scorecard Building Block"
         documentationContent=""
         homeMashup=""
         name="PTCSC.ReportingBlock.Management_TS"
         projectName="PTCSC.ReportingBlock"
         tags="">
            <PropertyDefinitions></PropertyDefinitions>
            <ServiceDefinitions>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="AddToTopHierarchy">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="kpiName"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="modelName"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="modelTypeName"
                         ordinal="3"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="ChangeTresholdValuesForChildren">
                    <ResultType
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="equipmentName"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="metricName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="CreateFiltersJSON">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.Filters_DS"
                     baseType="STRING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="equipmentUid"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="CreateTestData">
                    <ResultType
                     baseType="BOOLEAN"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="EditInheritanceForEquipmentOfMetrics">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="equipmentName"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="metricName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="EditMetricDescription">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="kpiName"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="newMetricDescription"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="EditMetricDisplayName">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="kpiName"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="newMetricDisplayName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="EditTargetForEquipmentsOfMetrics">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="equipmentName"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="metricName"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="rollupBehaviour"
                         ordinal="5"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="target"
                         ordinal="3"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="timePeriod"
                         ordinal="4"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="EditTresholdValues">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="equipmentName"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="NUMBER"
                         description=""
                         name="goodValue"
                         ordinal="5"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="metricName"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="NUMBER"
                         description=""
                         name="okValue"
                         ordinal="4"></FieldDefinition>
                        <FieldDefinition
                         baseType="NUMBER"
                         description=""
                         name="poorValue"
                         ordinal="3"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="rollupBehaviour"
                         ordinal="7"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="timeFrame"
                         ordinal="6"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GenerateEquipmentsForAdmin">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetAllDevicesForFleets">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.StoreAllDevices_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetAllDevicesForOrganization">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.StoreAllDevices_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="organization"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetAllInvisibleMetrics">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.MetricsListForAddOrRemovePopup_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetAllOrganizations">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.OrganizationTree_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetAllVisibleMetrics">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.MetricsListForAddOrRemovePopup_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetBusinessUnit">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.DropdownGeneric_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetCellData">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.CardMashupResult_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="mashupName"
                         ordinal="3"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="propertyName"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="thingName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetCellDataForDevice">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.CardMashupResult_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="mashupName"
                         ordinal="3"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="propertyName"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="thingName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetCollection">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.DisplayCollection_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="collectionType"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="organization"
                         ordinal="3"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="thingName"
                         ordinal="2"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetCollectionCellData">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.GenericCard_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="filtersJSON"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="kpiName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetCollectionConfiguration">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.Configuration_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.defaultValue="Default"
                         aspect.isRequired="false"
                         baseType="STRING"
                         description=""
                         name="dashboardName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetCollectionForDevice">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.DisplayCollection_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="searchTerm"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="thingName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetCollectionForMetrics">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.DisplayCollection_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="organization"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="searchTerm"
                         ordinal="2"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetDashboardBreadcrumb">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.Breadcrumb_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="breadcrumbName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetDashboardList">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.Configuration_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetDataForCard">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.CardMashupResult_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.defaultValue="Device"
                         baseType="STRING"
                         description=""
                         name="collectionType"
                         ordinal="4"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="mashupName"
                         ordinal="3"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="organization"
                         ordinal="5"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="propertyName"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="thingName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetDataForCardForMetrics">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.CardMashupResult_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="mashupName"
                         ordinal="3"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="propertyName"
                         ordinal="2"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetDataForCardForOverview">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.CardMashupResult_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="mashupName"
                         ordinal="3"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="propertyName"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="thingName"
                         ordinal="3"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetDataForDetailsPage">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.DetailsPageResult_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="collectionType"
                         ordinal="5"></FieldDefinition>
                        <FieldDefinition
                         baseType="DATETIME"
                         description=""
                         name="dateEnd"
                         ordinal="4"></FieldDefinition>
                        <FieldDefinition
                         baseType="DATETIME"
                         description=""
                         name="dateStart"
                         ordinal="3"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="propertyName"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="thingName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetDataForDetailsPageDevice">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.DetailsPageResult_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="DATETIME"
                         description=""
                         name="dateEnd"
                         ordinal="4"></FieldDefinition>
                        <FieldDefinition
                         baseType="DATETIME"
                         description=""
                         name="dateStart"
                         ordinal="3"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="propertyName"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="thingName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetDataForDetailsPageMetrics">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.DetailsPageResult_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="DATETIME"
                         description=""
                         name="dateEnd"
                         ordinal="4"></FieldDefinition>
                        <FieldDefinition
                         baseType="DATETIME"
                         description=""
                         name="dateStart"
                         ordinal="3"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="propertyName"
                         ordinal="2"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetDataForTableView">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.MetricViewResult_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="collectionType"
                         ordinal="3"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="thingName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetDataForTableViewDevice">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.DetailsPageResult_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="thingName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetDataForTableViewDeviceAndFleet">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.MetricViewResult_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="searchTerm"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="thingName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetDataForTableViewMetrics">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.MetricViewResult_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="organization"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="searchTerm"
                         ordinal="2"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetDefaultEnterprise">
                    <ResultType
                     baseType="STRING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetDeviceOrOrganization">
                    <ResultType
                     baseType="STRING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="collectionType"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="device"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="organization"
                         ordinal="3"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetDevicesForDeviceOverview">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.StoreAllDevices_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="organization"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Provide data for Total Loss Hours card mashup"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetEffectiveTime">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.GenericCard_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetEquipmentNameForTargetAggregate">
                    <ResultType
                     baseType="STRING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.dataShape="PTCSC.ReportingBlock.AdminTargetAndColorDefinition_DS"
                         baseType="INFOTABLE"
                         description=""
                         name="selectedRows"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetEquipmentNameForTargetAverage">
                    <ResultType
                     baseType="STRING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.dataShape="PTCSC.ReportingBlock.AdminTargetAndColorDefinition_DS"
                         baseType="INFOTABLE"
                         description=""
                         name="selectedRows"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetEquipmentNameForThresholdAggregate">
                    <ResultType
                     baseType="STRING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.dataShape="PTCSC.ReportingBlock.AdminTargetAndColorDefinition_DS"
                         baseType="INFOTABLE"
                         description=""
                         name="selectedRows"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetEquipmentNameForThresholdAverage">
                    <ResultType
                     baseType="STRING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.dataShape="PTCSC.ReportingBlock.AdminTargetAndColorDefinition_DS"
                         baseType="INFOTABLE"
                         description=""
                         name="selectedRows"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetEquipmentsForThresholdAggregate">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.AdminEquipmentsForThresholdAggregate_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="equipmentName"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="metricName"
                         ordinal="2"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetEquipmentsForThresholdAverage">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.AdminEquipmentsForThresholdAverage_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="equipmentName"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="metricName"
                         ordinal="2"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetEquipmentsPropertiesForMetric">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.AdminEquipmentsDisplay_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="equipmentName"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="metricName"
                         ordinal="2"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetEquipmentsTargetForAggregate">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.AdminEquipmentsForTargetAggregate_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="equipmentName"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="metricName"
                         ordinal="2"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetEquipmentsTargetForAverage">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.AdminEquipmentsForTargetAverage_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="equipmentName"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="metricName"
                         ordinal="2"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetEquipmentTypeForTargetAverage">
                    <ResultType
                     baseType="STRING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.dataShape="PTCSC.ReportingBlock.AdminTargetAndColorDefinition_DS"
                         baseType="INFOTABLE"
                         description=""
                         name="selectedRows"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetEquipmentTypeForThresholdAverage">
                    <ResultType
                     baseType="STRING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.dataShape="PTCSC.ReportingBlock.AdminTargetAndColorDefinition_DS"
                         baseType="INFOTABLE"
                         description=""
                         name="selectedRows"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetFullBreadcrumb">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.Breadcrumb_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="initialDashboardName"
                         ordinal="3"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="kpiName"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="mashupTarget"
                         ordinal="2"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetFullDashboardBreadcrumb">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.Breadcrumb_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="breadcrumbName"
                         ordinal="4"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="collectionType"
                         ordinal="5"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="mashupTarget"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="propertyName"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="thingTemplateName"
                         ordinal="4"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetFullMetricsBreadcrumb">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.Breadcrumb_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="kpiName"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="mashupTarget"
                         ordinal="2"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetHierarchyCurrentLevel">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.Configuration_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.defaultValue="8"
                         baseType="STRING"
                         description=""
                         name="equipmentUid"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="kpiName"
                         ordinal="2"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetHierarchyDrillDownTree">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.HierarchyBreakdown_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="kpiName"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="modelName"
                         ordinal="2"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetHierarchyTop">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.HierarchyBreakdown_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetHomeScreenMenu">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.HomeScreenMenuConfig_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetInheritanceStateForTargetAverage">
                    <ResultType
                     baseType="BOOLEAN"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.dataShape="PTCSC.ReportingBlock.AdminTargetAndColorDefinition_DS"
                         baseType="INFOTABLE"
                         description=""
                         name="selectedRows"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetInheritanceStateForThresholdAverage">
                    <ResultType
                     baseType="BOOLEAN"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.dataShape="PTCSC.ReportingBlock.AdminTargetAndColorDefinition_DS"
                         baseType="INFOTABLE"
                         description=""
                         name="selectedRows"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetInitialBreadcrumb">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.Breadcrumb_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="dasboardName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetInitialMetricsBreadcrumb">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.Breadcrumb_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetInitiativesForKpi">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.KpiInitiatives_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="INFOTABLE"
                         description=""
                         name="filters"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="kpiName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetInitiativesList">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.InitiativesListView_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Provide data for Total Loss Hours card mashup"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetInitiativesTable">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.GenericCard_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetKpiFullNameForInitativesTable">
                    <ResultType
                     baseType="STRING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="kpiName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetKpiFullNameForTrendChart">
                    <ResultType
                     baseType="STRING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="kpiName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetMaterial">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.DropdownGeneric_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetMetricDetailsForAdministrator">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.AdministrationMetricDetails_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="metricName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetMetricList">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.MetricsDetails_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="DATETIME"
                         description=""
                         name="endDate"
                         ordinal="3"></FieldDefinition>
                        <FieldDefinition
                         aspect.defaultValue="PTC"
                         baseType="STRING"
                         description=""
                         name="equipmentName"
                         ordinal="3"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="materialFilter"
                         ordinal="4"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="shiftFilter"
                         ordinal="5"></FieldDefinition>
                        <FieldDefinition
                         baseType="DATETIME"
                         description=""
                         name="startDate"
                         ordinal="2"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetMetricListForAdministrator">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.MetricsDetails_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="displayEnabled"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Provide data for Total Loss Hours card mashup"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetOnTimeDelivery">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.GenericCard_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetOrganizationsForFilter">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.OrganizationTree_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Provide data for Total Loss Hours card mashup"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetOvertime">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.GenericCard_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Provide data for Total Loss Hours card mashup"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetPlannedProductionOEE">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.GenericCard_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Provide data for Total Loss Hours card mashup"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetScrapRate">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.GenericCard_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetShiftManager">
                    <ResultType
                     baseType="THINGNAME"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetShiftName">
                    <ResultType
                     baseType="STRING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.dataShape="PTCSC.ReportingBlock.ShiftsStructureForTreeGrid_DS"
                         baseType="INFOTABLE"
                         description=""
                         name="selectedRows"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetShifts">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.DropdownGeneric_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetShiftsByShiftSchedule">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.ShiftPopup_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="NUMBER"
                         description=""
                         name="shiftScheduleUid"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetShiftSchedule">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.ShiftPopup_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetShiftsForTreeView">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.ShiftsStructureForTreeGrid_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="id"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetStatus">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.DropdownGeneric_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetStatusColor">
                    <ResultType
                     baseType="STRING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="actualValue"
                         ordinal="4"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description=""
                         name="equipmentName"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description=""
                         name="metricName"
                         ordinal="2"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Provide data for Total Loss Hours card mashup"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetThroughput">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.GenericCard_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetTimeframe">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.DropdownGeneric_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetToolbarConfigurationForCardDetails">
                    <ResultType
                     aspect.dataShape="ToolbarAction"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetToolbarConfigurationForCardOverviewInitiatives">
                    <ResultType
                     aspect.dataShape="ToolbarAction"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetToolbarConfigurationForDashboard">
                    <ResultType
                     aspect.dataShape="ToolbarAction"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetToolbarConfigurationForInitiativesList">
                    <ResultType
                     aspect.dataShape="ToolbarAction"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetToolbarConfigurationForMetricAdmin">
                    <ResultType
                     aspect.dataShape="ToolbarAction"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetToolbarConfigurationForMetricAdminColorDefinition">
                    <ResultType
                     aspect.dataShape="ToolbarAction"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetToolbarConfigurationForMetricAdminTargetDefinition">
                    <ResultType
                     aspect.dataShape="ToolbarAction"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetToolbarConfigurationForMetricList">
                    <ResultType
                     aspect.dataShape="ToolbarAction"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Provide data for Total Loss Hours card mashup"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetTotalAvailableOEE">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.GenericCard_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Provide data for Total Loss Hours card mashup"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetTotalLossHours">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.GenericCard_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="Provide data for Total Loss Hours card mashup"
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetTotalTime">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.GenericCard_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetTotalTimeForMainScreen">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.TotalTimeMainScreen"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="DATETIME"
                         description=""
                         name="endDate"
                         ordinal="3"></FieldDefinition>
                        <FieldDefinition
                         baseType="DATETIME"
                         description=""
                         name="startDate"
                         ordinal="2"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetTrendDataForKpi">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.GenericChart_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="INFOTABLE"
                         description=""
                         name="filters"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="kpiName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="PopulateMetricsForAdministrator">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="PopulateMetricsInformation">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="RemoveFromTopHierarchy">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="modelName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="RemoveFromTopHierarchyWhenAddingExistingModelType">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="modelTypeName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="RemoveOrAddMetricFromList">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.MetricsListForAddOrRemovePopup_DS"
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="metricName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="SearchCollection">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.StoreAllDevices_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.dataShape="PTCSC.ReportingBlock.StoreAllDevices_DS"
                         baseType="INFOTABLE"
                         description=""
                         name="devices"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="searchTerm"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="SearchMetricsForAdminScreen">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.MetricsDetails_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.dataShape="PTCSC.ReportingBlock.MetricsDetails_DS"
                         baseType="INFOTABLE"
                         description=""
                         name="metrics"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="searchTerm"
                         ordinal="2"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="SearchMetricsForMainScreen">
                    <ResultType
                     aspect.dataShape="PTCSC.ReportingBlock.MetricsDetails_DS"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.dataShape="PTCSC.ReportingBlock.MetricsDetails_DS"
                         baseType="INFOTABLE"
                         description=""
                         name="metrics"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="searchTerm"
                         ordinal="2"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="SetHierarchyTop">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="equipmentUid"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="kpiName"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="materialUid"
                         ordinal="3"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="shiftUid"
                         ordinal="4"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="status"
                         ordinal="5"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="SetInheritanceForTarget">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="equipmentName"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="metricName"
                         ordinal="2"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="SetInheritanceForThreshold">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="equipmentName"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="metricName"
                         ordinal="2"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="SetInheritanceForThresholdValues">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="equipmentName"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="metricName"
                         ordinal="2"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="SetMetricsInformation">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="NUMBER"
                         description=""
                         name="actual"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="metricName"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="NUMBER"
                         description=""
                         name="target"
                         ordinal="3"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="SetTarget">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="equipmentName"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="metricName"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="NUMBER"
                         description=""
                         name="newTarget"
                         ordinal="3"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="rollupType"
                         ordinal="4"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="timePeriod"
                         ordinal="5"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="SetTargetForAverage">
                    <ResultType
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="equipmentName"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="metricName"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="NUMBER"
                         description=""
                         name="newTarget"
                         ordinal="3"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="SetThreshold">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="equipmentName"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="metricName"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="newGoodValue"
                         ordinal="5"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="newOkValue"
                         ordinal="4"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="newPoorValue"
                         ordinal="3"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="rollupType"
                         ordinal="6"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="timePeriod"
                         ordinal="7"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="SetThresholdForAverage">
                    <ResultType
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="equipmentName"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="metricName"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="newGoodValue"
                         ordinal="5"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="newOkValue"
                         ordinal="4"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="newPoorValue"
                         ordinal="3"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
            </ServiceDefinitions>
            <EventDefinitions></EventDefinitions>
            <ServiceMappings></ServiceMappings>
            <ServiceImplementations>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="AddToTopHierarchy">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let mfgModelManager = me.GetConfiguredManagerForIdentifier({
                                    	identifier: "PTC.MfgModel.Manager"
                                    });
                                    let poorOkGoodValues = ["Poor", "OK", "Good"];
                                    
                                    if (isTheModelAlreadyExisting(modelTypeName)) {
                                    	me.RemoveFromTopHierarchyWhenAddingExistingModelType({
                                    		modelTypeName: modelTypeName
                                    	});
                                    }
                                    let businessTreeRoot = Things[mfgModelManager].GetBusinessUnitEntityTreeRoot({
                                    	searchThingName: modelName
                                    });
                                    
                                    var query = {
                                    	"filters": {
                                    		"type": "Matches",
                                    		"fieldName": "modelName",
                                    		"expression": modelName
                                    	}
                                    };
                                    
                                    let params = {
                                    	t: businessTreeRoot,
                                    	query: query
                                    };
                                    
                                    let modelToBeAdded = Resources["InfoTableFunctions"].Query(params);
                                    
                                    let values = Things["PTCSC.ReportingBlock.HierarcyBreakdown_DT"].CreateValues();
                                    values.modelName = modelToBeAdded[0].modelName;
                                    values.kpiName = kpiName;
                                    values.modelTypeName = modelToBeAdded[0].modelTypeName;
                                    values.actual = Math.floor(Math.random() * 50);
                                    values.target = Math.floor(Math.random() * 100);
                                    values.improvement = Math.floor(Math.random() * 25);
                                    values.poorOkGoodValue = poorOkGoodValues[Math.floor(Math.random() * 3)];
                                    values.arrowValue = Math.floor(Math.random() * 4);
                                    let id = Things["PTCSC.ReportingBlock.HierarcyBreakdown_DT"].AddOrUpdateDataTableEntry({
                                    	values: values
                                    });
                                    
                                    function isTheModelAlreadyExisting(modelTypeName) {
                                    	var query = {
                                    		"filters": {
                                    			"type": "Matches",
                                    			"fieldName": "modelTypeName",
                                    			"expression": modelTypeName
                                    		}
                                    	};
                                    	let metricsInformationDataTable = Things["PTCSC.ReportingBlock.HierarcyBreakdown_DT"].SearchDataTableEntries({
                                    		query: query
                                    	});
                                    	try {
                                    		let wasValueFound = metricsInformationDataTable.rows[0].modelTypeName;
                                    		return true;
                                    	} catch (error) {
                                    		return false;
                                    	}
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="ChangeTresholdValuesForChildren">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let valuesToBeChanged = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        infoTableName: "InfoTable",
                                        dataShapeName: "PTCSC.ReportingBlock.AdminTargetAndColorDefinition_DS"
                                    });
                                    
                                    var query =
                                    {
                                        "filters": {
                                            "type": "AND",
                                            "filters": [
                                                {
                                                    "type": "EQ",
                                                    "fieldName": "kpiName",
                                                    "value": metricName
                                                }
                                            ]
                                        }
                                    };
                                    
                                    let queryResult = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].SearchDataTableEntries({
                                        query: query
                                    });
                                    
                                    let result = queryResult;
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":1,"lineNumber":23},"position":{"column":1,"lineNumber":23}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":24,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="CreateFiltersJSON">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(PTCSC.ReportingBlock.Filters_DS)
                                    let table = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        infoTableName: "InfoTable",
                                        dataShapeName: "PTCSC.ReportingBlock.Filters_DS"
                                    });
                                    
                                    // PTCSC.ReportingBlock.Filters_DS entry object
                                    let newEntry = {
                                        equipmentUid: equipmentUid // STRING
                                    };
                                    
                                    table.AddRow(newEntry);
                                    
                                    result = table.ToJSON();
                                    
                                    logger.warn(result)
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="CreateTestData">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let myHeight = 335;
                                    let myWidth = 350;
                                    let myGridWidth = 1070;
                                    
                                    let card_s = ["PTCSC.ReportingBlock.OneValueCard_MU", "PTCSC.ReportingBlock.TwoValuesCard_MU", "PTCSC.ReportingBlock.OneValueAndProgressCard_MU",
                                    	"PTCSC.ReportingBlock.TwoValuesAndProgressCard_MU", "PTCSC.ReportingBlock.OneValueAndLineChartCard_MU", "PTCSC.ReportingBlock.TwoValuesAndLineChartCard_MU",
                                    	"PTCSC.ReportingBlock.OneValueAndBarChartCard_MU", "PTCSC.ReportingBlock.TwoValuesAndBarChartCard_MU"
                                    ];
                                    let cardgrid_s = "PTCSC.ReportingBlock.GridCard_MU";
                                    let kpi_s = ["EffectiveTime", "OnTimeDelivery", "Overtime", "PlannedProductionOEE", "ScrapRate", "Throughput", "TotalAvailableOEE", "TotalLossHours", "TotalTime"];
                                    let thingsForKpi_s = ["PTCSC.ReportingBlock.EffectiveTimeKpi", "PTCSC.ReportingBlock.OnTimeDeliveryKpi", "PTCSC.ReportingBlock.OvertimeKpi", "PTCSC.ReportingBlock.PlannedProductionOEEThingKpi", "PTCSC.ReportingBlock.ScrapRateKpi", "PTCSC.ReportingBlock.ThroughputKpi", "PTCSC.ReportingBlock.TotalAvailableOEEKpi", "PTCSC.ReportingBlock.TotalLossHoursKpi", "PTCSC.ReportingBlock.TotalTimeKpi"];
                                    
                                    let staticCard_s = ["PTCSC.ReportingBlock.OneValueCard_MU", "PTCSC.ReportingBlock.TwoValuesCard_MU", "PTCSC.ReportingBlock.TwoValuesCard_MU", "PTCSC.ReportingBlock.OneValueCard_MU", "PTCSC.ReportingBlock.TwoValuesAndProgressCard_MU", "PTCSC.ReportingBlock.OneValueAndProgressCard_MU", "PTCSC.ReportingBlock.OneValueAndLineChartCard_MU", "PTCSC.ReportingBlock.TwoValuesAndLineChartCard_MU", "PTCSC.ReportingBlock.TwoValuesAndLineChartCard_MU", "PTCSC.ReportingBlock.GridCard_MU"];
                                    let staticKpi_s = ["TotalLossHours", "TotalTime", "Overtime", "EffectiveTime", "PlannedProductionOEE", "TotalAvailableOEE", "Throughput", "OnTimeDelivery", "ScrapRate"];
                                    
                                    let items = 10;
                                    let kpiLength = kpi_s.length;
                                    
                                    //add kpi - thing mapping 
                                    for (var j = 0; j < kpiLength; j++) {
                                    	let values = Things["PTCSC.ReportingBlock.KpiManagerMapping"].CreateValues();
                                    	values.kpiName = kpi_s[j];
                                    	values.thingName = thingsForKpi_s[j];
                                        values.initiativesDrillKpiService = "getInitiativesForKpi";
                                        values.trendChartKpiService = "getTrend";
                                        values.enabled = true;
                                    
                                    	let id = Things["PTCSC.ReportingBlock.KpiManagerMapping"].AddOrUpdateDataTableEntry({
                                    		values: values
                                    	});
                                    }
                                    
                                    //add random cards
                                    for (var i = 0; i < items; i++) {
                                    	let values = Things["PTCSC.ReportingBlock.DashboardConfiguration"].CreateValues();
                                    	let user = Resources["CurrentSessionInfo"].GetCurrentUser();
                                    
                                    	values.cardHeight = myHeight;
                                    	values.cardWidth = myWidth;
                                    	values.cardMashupName = card_s[(Math.floor(Math.random() * 8) + 0).toFixed()];
                                    	values.kpiName = kpi_s[(Math.floor(Math.random() * 9) + 0).toFixed()];
                                    	values.dashboardIdentifier = generateGUID();
                                    	values.username = user;
                                    	values.dashboardName = "Default";
                                    
                                    	let id = Things["PTCSC.ReportingBlock.DashboardConfiguration"].AddOrUpdateDataTableEntry({
                                    		values: values
                                    	});
                                    }
                                    
                                    //add random cards for a second Dashboard
                                    for (var i = 0; i < items; i++) {
                                    	let values = Things["PTCSC.ReportingBlock.DashboardConfiguration"].CreateValues();
                                    	let user = Resources["CurrentSessionInfo"].GetCurrentUser();
                                    
                                    	values.cardHeight = myHeight;
                                    	values.cardWidth = myWidth;
                                    	values.cardMashupName = card_s[(Math.floor(Math.random() * 8) + 0).toFixed()];
                                    	values.kpiName = kpi_s[(Math.floor(Math.random() * 9) + 0).toFixed()];
                                    	values.dashboardIdentifier = generateGUID();
                                    	values.username = user;
                                    	values.dashboardName = "Secondary";
                                    
                                    	let id = Things["PTCSC.ReportingBlock.DashboardConfiguration"].AddOrUpdateDataTableEntry({
                                    		values: values
                                    	});
                                    }
                                    
                                    //add a static Dashboard
                                    for (var k = 0; k < staticCard_s.length; k++) {
                                    	let staticValues = Things["PTCSC.ReportingBlock.DashboardConfiguration"].CreateValues();
                                    	let user = Resources["CurrentSessionInfo"].GetCurrentUser();
                                    	if (staticCard_s[k] == "PTCSC.ReportingBlock.GridCard_MU") {
                                    		staticValues.cardHeight = myHeight;
                                    		staticValues.cardWidth = myGridWidth;
                                    	} else {
                                    		staticValues.cardHeight = myHeight;
                                    		staticValues.cardWidth = myWidth;
                                    	}
                                    	staticValues.cardMashupName = staticCard_s[k];
                                    
                                    	staticValues.kpiName = staticKpi_s[k];
                                    	staticValues.dashboardIdentifier = generateGUID();
                                    	staticValues.username = user;
                                    	staticValues.dashboardName = "Static";
                                    
                                    	let id = Things["PTCSC.ReportingBlock.DashboardConfiguration"].AddOrUpdateDataTableEntry({
                                    		values: staticValues
                                    	});
                                    }
                                    me.PopulateMetricsInformation();
                                    //me.PopulateMetricsForAdministrator();
                                    //me.GenerateEquipmentsForAdmin();
                                    var result = true;
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":-10,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":66}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":3,"lineNumber":93},"position":{"column":3,"lineNumber":93}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":94,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="EditInheritanceForEquipmentOfMetrics">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let acceptsInheritance = true;
                                    
                                    var query = {
                                    	"filters": {
                                    		"type": "AND",
                                    		"filters": [{
                                    			"type": "EQ",
                                    			"fieldName": "kpiName",
                                    			"value": metricName
                                    		},
                                    		{
                                    			"type": "EQ",
                                    			"fieldName": "equipmentName",
                                    			"value": equipmentName
                                    		}
                                    		]
                                    	}
                                    };
                                    
                                    let queryResult = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].SearchDataTableEntries({
                                    	query: query
                                    });
                                    
                                    let queryResultKey = queryResult.rows[0].key;
                                    let queryInheritance = queryResult.rows[0].inheritance;
                                    let queryEquipmentUid = queryResult.rows[0].equipmentUid;
                                    
                                    if (queryInheritance == true) {
                                    
                                    	let values = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].CreateValues();
                                    	values.uniqueId = queryResultKey;
                                    	values.inheritance = !queryInheritance;
                                    	values.poor = 0;
                                    	values.ok = 0;
                                    	values.good = 0;
                                    
                                    	let id = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].AddOrUpdateDataTableEntry({
                                    		values: values
                                    	});
                                    
                                    } else {
                                    	let firstParentWithoutInheritance = findEquipmentParentWithoutInheritance(2);
                                    	logger.error(firstParentWithoutInheritance);
                                    	var queryForParent = {
                                    		"filters": {
                                    			"type": "AND",
                                    			"filters": [{
                                    				"type": "EQ",
                                    				"fieldName": "kpiName",
                                    				"value": metricName
                                    			},
                                    			{
                                    				"type": "EQ",
                                    				"fieldName": "equipmentName",
                                    				"value": firstParentWithoutInheritance
                                    			}
                                    			]
                                    		}
                                    	};
                                    
                                    	var findParentEntry = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].SearchDataTableEntries({
                                    		query: queryForParent
                                    	});
                                    
                                    	let values = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].CreateValues();
                                    	values.uniqueId = queryResultKey;
                                    	values.inheritance = !queryInheritance;
                                    	values.poor = findParentEntry.rows[0].poor;
                                    	values.ok = findParentEntry.rows[0].ok;
                                    	values.good = findParentEntry.rows[0].good;
                                    
                                    	let id = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].AddOrUpdateDataTableEntry({
                                    		values: values
                                    	});
                                    	
                                    }
                                    
                                    function findEquipmentParentWithoutInheritance(equipmentUid) {
                                    	var parent = Things["PTC.MfgModelImpl.Manager"].GetParent({
                                    		childUid: equipmentUid
                                    	});
                                    
                                    	var query = {
                                    		"filters": {
                                    			"type": "AND",
                                    			"filters": [{
                                    					"type": "EQ",
                                    					"fieldName": "kpiName",
                                    					"value": metricName
                                    				},
                                    				{
                                    					"type": "EQ",
                                    					"fieldName": "equipmentName",
                                    					"value": parent.rows[0].name
                                    				}
                                    			]
                                    		}
                                    	};
                                    
                                    	var queryForParent = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].SearchDataTableEntries({
                                    		query: query
                                    	});
                                    	var currentEquipmentUid = parseInt(queryForParent.rows[0].equipmentUid);
                                    
                                    	if (queryForParent.rows[0].inheritance == false) {
                                    		return queryForParent.rows[0].equipmentName;
                                    	} else {
                                    		return findEquipmentParentWithoutInheritance(currentEquipmentUid);
                                    	}
                                    }
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":41,"lineNumber":67},"position":{"column":41,"lineNumber":67}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":110,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="EditMetricDescription">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let values = Things["PTCSC.ReportingBlock.AdministrationMetricDetails_DT"].CreateValues();
                                    values.metricName = kpiName;
                                    values.description = newMetricDescription;
                                    
                                    let id = Things["PTCSC.ReportingBlock.AdministrationMetricDetails_DT"].AddOrUpdateDataTableEntry({
                                    	values: values
                                    });
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":16,"lineNumber":6},"position":{"column":16,"lineNumber":6}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":7,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="EditMetricDisplayName">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let values = Things["PTCSC.ReportingBlock.AdministrationMetricDetails_DT"].CreateValues();
                                    values.metricName = kpiName;
                                    values.metricDisplayName = newMetricDisplayName;
                                    
                                    let id = Things["PTCSC.ReportingBlock.AdministrationMetricDetails_DT"].AddOrUpdateDataTableEntry({
                                    	values: values 
                                    });
                                    
                                    let valuesForMetricInformation = Things["PTCSC.ReportingBlock.MetricsInformation"].CreateValues();
                                    valuesForMetricInformation.kpiName = kpiName;
                                    valuesForMetricInformation.kpiDisplayName = newMetricDisplayName;
                                    
                                    let idForMetricInformation = Things["PTCSC.ReportingBlock.MetricsInformation"].AddOrUpdateDataTableEntry({
                                    	values: valuesForMetricInformation
                                    });
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":36,"lineNumber":14},"position":{"column":36,"lineNumber":14}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":16,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="EditTargetForEquipmentsOfMetrics">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var query =
                                    {
                                    	"filters": {
                                    		"type": "AND",
                                    		"filters": [
                                    			{
                                    				"type": "EQ",
                                    				"fieldName": "kpiName",
                                    				"value": metricName
                                    			},
                                    			{
                                    				"type": "EQ",
                                    				"fieldName": "equipmentName",
                                    				"value": equipmentName
                                    			}
                                    		]
                                    	}
                                    };
                                    
                                    let queryResult = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].SearchDataTableEntries({
                                    	query: query
                                    });
                                    
                                    if(rollupBehaviour == "Aggregate") {
                                    
                                    	let queryResultKey = queryResult.rows[0].key;
                                    
                                    	let values = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].CreateValues();
                                    	values.uniqueId = queryResultKey;
                                    	values.target = target;
                                    
                                    	let id = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].AddOrUpdateDataTableEntry({
                                    		values: values
                                    	});
                                    } else {
                                    	
                                    }
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":2,"lineNumber":36},"position":{"column":2,"lineNumber":36}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":37,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="EditTresholdValues">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var storeMetric = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                      infoTableName: "InfoTable",
                                      dataShapeName: "PTC.ModelManagement.EntityTreeData",
                                    });
                                    
                                    var query = {
                                      filters: {
                                        type: "AND",
                                        filters: [
                                          {
                                            type: "EQ",
                                            fieldName: "kpiName",
                                            value: metricName,
                                          },
                                          {
                                            type: "EQ",
                                            fieldName: "equipmentName",
                                            value: equipmentName,
                                          },
                                        ],
                                      },
                                    };
                                    
                                    let queryResult = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].SearchDataTableEntries({
                                      query: query,
                                    });
                                    
                                    if (rollupBehaviour == "Average") {
                                      let equipmentRow = getEquipmentRow(equipmentName, metricName);
                                    
                                      let setNewThresholdValues = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].CreateValues();
                                      setNewThresholdValues.poor = poorValue;
                                      setNewThresholdValues.ok = okValue;
                                      setNewThresholdValues.good = goodValue;
                                      setNewThresholdValues.uniqueId = equipmentRow.rows[0].uniqueId;
                                      let id = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].AddOrUpdateDataTableEntry({
                                        values: setNewThresholdValues,
                                      });
                                    
                                      let getChildrenOfEquipment = createAListWithAllTheChildren(equipmentName);
                                      for (var i = 0; i < getChildrenOfEquipment.length; i++) {
                                        let equipmentRow = getEquipmentRow(getChildrenOfEquipment.rows[i].thingName, metricName);
                                        let setNewThresholdValues =
                                          Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].CreateValues();
                                        setNewThresholdValues.poor = poorValue;
                                        setNewThresholdValues.ok = okValue;
                                        setNewThresholdValues.good = goodValue;
                                        setNewThresholdValues.uniqueId = equipmentRow.rows[0].uniqueId;
                                        let id = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].AddOrUpdateDataTableEntry({
                                          values: setNewThresholdValues,
                                        });
                                      }
                                    } else {
                                      let queryResultKey = queryResult.rows[0].key;
                                    
                                      let values = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].CreateValues();
                                      values.uniqueId = queryResultKey;
                                      values.poor = poorValue;
                                      values.ok = okValue;
                                      values.good = goodValue;
                                      values.timePeriod = timeFrame;
                                    
                                      let id = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].AddOrUpdateDataTableEntry({
                                        values: values,
                                      });
                                    }
                                    
                                    function getEquipmentRow(equipmentName, metricName) {
                                      var query = {
                                        filters: {
                                          type: "AND",
                                          filters: [
                                            {
                                              type: "EQ",
                                              fieldName: "kpiName",
                                              value: metricName,
                                            },
                                            {
                                              type: "EQ",
                                              fieldName: "equipmentName",
                                              value: equipmentName,
                                            },
                                          ],
                                        },
                                      };
                                    
                                      let queryResult = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].SearchDataTableEntries({
                                        query: query,
                                      });
                                    
                                      return queryResult;
                                    }
                                    
                                    function createAListWithAllTheChildren(equipmentName) {
                                      let childrenList = getAllChildren(equipmentName);
                                    
                                      for (var i = 0; i < childrenList.length; i++) {
                                        var isEquipmentInheriting = getEquipmentRow(childrenList.rows[i].thingName, metricName);
                                        if (isEquipmentInheriting.rows[0].inheritance) {
                                          if (childrenList.rows[i].hasChildren) {
                                            let newEntry = {
                                              thingName: childrenList.rows[i].thingName,
                                              modelTypeName: childrenList.rows[i].modelTypeName,
                                            };
                                            storeMetric.AddRow(newEntry);
                                            createAListWithAllTheChildren(childrenList.rows[i].thingName);
                                          } else {
                                            let newEntry = {
                                              thingName: childrenList.rows[i].thingName,
                                              modelTypeName: childrenList.rows[i].modelTypeName,
                                            };
                                            storeMetric.AddRow(newEntry);
                                          }
                                        }
                                      }
                                    
                                      return storeMetric;
                                    }
                                    
                                    function getAllChildren(parentName) {
                                      let children = Things["PTC.MfgModelImpl.Manager"].GetBusinessUnitEntityTreeChildrenForNode({
                                        thingName: parentName,
                                      });
                                    
                                      return children;
                                    }
                                    
                                    function findEquipmentParentWithoutInheritance(equipmentUid) {
                                      var parent = Things["PTC.MfgModelImpl.Manager"].GetParent({
                                        childUid: equipmentUid,
                                      });
                                    
                                      var query = {
                                        filters: {
                                          type: "AND",
                                          filters: [
                                            {
                                              type: "EQ",
                                              fieldName: "kpiName",
                                              value: metricName,
                                            },
                                            {
                                              type: "EQ",
                                              fieldName: "equipmentName",
                                              value: parent.rows[0].name,
                                            },
                                          ],
                                        },
                                      };
                                    
                                      var queryForParent = Things[
                                        "PTCSC.ReportingBlock.TargetAndColorDefinition_DT"
                                      ].SearchDataTableEntries({
                                        query: query,
                                      });
                                      var currentEquipmentUid = parseInt(queryForParent.rows[0].equipmentUid);
                                    
                                      if (
                                        queryForParent.rows[0].inheritance == false ||
                                        queryForParent.rows[0].equipmentType == "Enterprise"
                                      ) {
                                        return queryForParent.rows[0].equipmentName;
                                      } else {
                                        return findEquipmentParentWithoutInheritance(currentEquipmentUid);
                                      }
                                    }
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":33,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":4,"lineNumber":4},"position":{"column":4,"lineNumber":4}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":167,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GenerateEquipmentsForAdmin">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let kpiMappingTable = Things["PTCSC.ReportingBlock.KpiManagerMapping"].QueryDataTableEntries({});
                                    
                                    for(var i = 0; i < kpiMappingTable.length; i++) {
                                        let thingName = kpiMappingTable.rows[i].thingName;
                                        let kpiName = kpiMappingTable.rows[i].kpiName;
                                        Things[thingName].GenerateEquipmentsForAdmin({
                                            metricName: kpiName
                                        });
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetAllDevicesForFleets">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                      infoTableName: "InfoTable",
                                      dataShapeName: "PTCSC.ReportingBlock.StoreAllDevices_DS",
                                    });
                                    
                                    let deviceEntries = Things["PTCSC.ReportingBlock.FleetPropertiesMashups_DT"].GetDataTableEntries();
                                    
                                    let params = {
                                      t: deviceEntries,
                                      columns: "thingTemplateName",
                                    };
                                    
                                    fleets = Resources["InfoTableFunctions"].Distinct(params);
                                    
                                    for(var i = 0; i < fleets.length; i++) {
                                      let newEntry = {
                                          name: fleets[i].thingTemplateName
                                      };
                                    result.AddRow(newEntry);
                                    }
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":18,"lineNumber":17},"position":{"column":18,"lineNumber":17}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":21,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetAllDevicesForOrganization">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                      infoTableName: "InfoTable",
                                      dataShapeName: "PTCSC.ReportingBlock.StoreAllDevices_DS",
                                    });
                                    
                                    let organizations = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                      infoTableName: "InfoTable",
                                      dataShapeName: "PTCSC.ReportingBlock.StoreAllDevices_DS",
                                    });
                                    
                                    
                                    let deviceEntries = Things["PTCSC.ReportingBlock.DeviceOverviewConfig_DT"].GetDataTableEntries();
                                    
                                    let params = {
                                      t: deviceEntries,
                                      columns: "thingTemplateName",
                                    };
                                    
                                    let thingTemplatesAvailable = Resources["InfoTableFunctions"].Distinct(params);
                                    
                                      for (var k = 0; k < thingTemplatesAvailable.length; k++) {
                                      ThingTemplates[thingTemplatesAvailable.rows[k].thingTemplateName].GetImplementingThings();
                                    
                                      for (var i = 0; i < thingTemplatesAvailable.length; i++) {
                                    
                                        let currThingTemplate = thingTemplatesAvailable.rows[i].thingTemplateName;
                                        let implementedThings = getImplementedThings(currThingTemplate);
                                        let org = getAllOrganizationChildren(organization);
                                    
                                        for (var j = 0; j < implementedThings.length; j++) {
                                    
                                          let deviceName = implementedThings.rows[j].name;
                                          for(var l = 0; l < org.length; l++){
                                            if(Things[deviceName].organization == org.rows[l].name) {
                                              let newEntry = {
                                                name: deviceName ,
                                              };
                                              result.AddRow(newEntry);
                                            }
                                          }
                                        }
                                      }
                                    }
                                    
                                    let paramsForDistinct = {
                                      t: result,
                                      columns: "name",
                                    };
                                    
                                    result = Resources["InfoTableFunctions"].Distinct(paramsForDistinct);
                                    
                                    
                                    function getImplementedThings(thingTemplate) {
                                      return ThingTemplates[thingTemplate].GetImplementingThings();
                                    }
                                    
                                    
                                    function getAllOrganizationChildren(organization) {
                                      let newEntry = {
                                        name: organization,
                                      };
                                    
                                      organizations.AddRow(newEntry);
                                    
                                      var query = {
                                        filters: {
                                          type: "Matches",
                                          fieldName: "parent",
                                          expression: organization,
                                        },
                                      };
                                      let result = Things["PTCSC.ReportingBlock.OrganizationTree_DT"].QueryDataTableEntries({
                                        query: query,
                                      });
                                    
                                      for (var i = 0; i < result.length; i++) {
                                        if (result.rows[i].hasChildren) {
                                          getAllOrganizationChildren(result.rows[i].child);
                                        } else {
                                          let newEntry = {
                                            name: result.rows[i].child,
                                          };
                                          organizations.AddRow(newEntry);
                                        }
                                      }
                                      return organizations;
                                    }
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":-2,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":29}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":1,"lineNumber":52},"position":{"column":1,"lineNumber":52}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":88,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetAllInvisibleMetrics">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let visibleKPIs = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    	infoTableName: "InfoTable",
                                    	dataShapeName: "PTCSC.ReportingBlock.MetricsListForAddOrRemovePopup_DS"
                                    });
                                    
                                    var query = {
                                    	"filters": {
                                    		"type": "Matches",
                                    		"fieldName": "isVisible",
                                    		"expression": false
                                    	}
                                    };
                                    
                                    let queryResult = Things["PTCSC.ReportingBlock.MetricsInformation"].SearchDataTableEntries({
                                    	query: query
                                    });
                                    
                                    
                                    for (var i = 0; i < queryResult.length; i++) {
                                    
                                    	let newEntry = {
                                            metricName: queryResult.rows[i].kpiName,
                                    		metricDisplayName: queryResult.rows[i].kpiDisplayName
                                    	};
                                    
                                    	visibleKPIs.AddRow(newEntry);
                                    
                                    }
                                    
                                    let result = visibleKPIs;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetAllOrganizations">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        infoTableName: "InfoTable",
                                        dataShapeName: "PTCSC.ReportingBlock.OrganizationTree_DS"
                                    });
                                    
                                    let organizationTree = Things["PTCSC.ReportingBlock.OrganizationTree_DT"].GetDataTableEntries();
                                    
                                    for (var i = 0; i < organizationTree.length; i++) {
                                    
                                        let newEntry = {
                                        uid: organizationTree.rows[i].uid,
                                        parent: organizationTree.rows[i].parent,
                                        child: organizationTree.rows[i].child,
                                        };
                                        result.AddRow(newEntry);
                                    }
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":39,"lineNumber":11},"position":{"column":39,"lineNumber":11}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":16,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetAllVisibleMetrics">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let visibleKPIs = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    	infoTableName: "InfoTable",
                                    	dataShapeName: "PTCSC.ReportingBlock.MetricsListForAddOrRemovePopup_DS"
                                    });
                                    
                                    var query = {
                                    	"filters": {
                                    		"type": "Matches",
                                    		"fieldName": "isVisible",
                                    		"expression": true
                                    	}
                                    };
                                    
                                    let queryResult = Things["PTCSC.ReportingBlock.MetricsInformation"].SearchDataTableEntries({
                                    	query: query
                                    });
                                    
                                    
                                    for (var i = 0; i < queryResult.length; i++) {
                                    
                                    	let newEntry = {
                                            metricName: queryResult.rows[i].kpiName,
                                    		metricDisplayName: queryResult.rows[i].kpiDisplayName
                                    	};
                                    
                                    	visibleKPIs.AddRow(newEntry);
                                    
                                    }
                                    
                                    let result = visibleKPIs;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetBusinessUnit">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    const configManager = me.GetConfiguredManagerForIdentifier({
                                    	identifier: "PTC.MfgModel.Manager"
                                    });
                                    
                                    const mfgModelManager = Things[configManager];
                                    
                                    let dropDownValues = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    	infoTableName: "InfoTable",
                                    	dataShapeName: "PTCSC.ReportingBlock.DropdownGeneric_DS"
                                    });
                                    
                                    let businessUnits = mfgModelManager.GetAllBusinessUnits({});
                                    
                                    for (var i = 0; i < businessUnits.length; i++) {
                                    	let newEntry = {
                                    		value: businessUnits.rows[i].name
                                    	};
                                    
                                    	dropDownValues.AddRow(newEntry);
                                    }
                                    
                                    let result = dropDownValues;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetCellData">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        infoTableName: "InfoTable",
                                        dataShapeName: "PTCSC.ReportingBlock.CardMashupResult_DS"
                                    });
                                    
                                    let thingTemplateName = Things[thingName].GetThingTemplate();
                                    
                                    const queryToFindMashup = {
                                      filters: {
                                        type: "AND",
                                        filters: [],
                                      },
                                    };
                                    
                                    const filters = queryToFindMashup.filters.filters;
                                    
                                    filters.push({
                                      fieldName: "propertyName",
                                      type: "EQ",
                                      value: propertyName,
                                    });
                                    
                                    filters.push({
                                      fieldName: "thingTemplateName",
                                      type: "EQ",
                                      value: thingTemplateName.rows[0].name,
                                    });
                                    
                                    filters.push({
                                      fieldName: "cardMashupName",
                                      type: "EQ",
                                      value: mashupName,
                                    });
                                    
                                    let devicesPropertiesTable = Things[
                                      "PTCSC.ReportingBlock.DevicePropertiesMashups_DT"
                                    ].QueryDataTableEntries({
                                      maxItems: 50,
                                      query: queryToFindMashup,
                                    });
                                    
                                    var query = {
                                      filters: {
                                        fieldName: "mashupName",
                                        type: "EQ",
                                        value: mashupName,
                                      }
                                    };
                                    
                                    let serviceToFeedTheMashups = Things["PTCSC.ReportingBlock.MashupsServices_DT"].QueryDataTableEntries({
                                      maxItems: 50,
                                      query: query,
                                    });
                                    
                                    let managerName = serviceToFeedTheMashups.rows[0].thingName;
                                    let serviceName = serviceToFeedTheMashups.rows[0].serviceName;
                                    
                                    result = Things[managerName][serviceName]({
                                      propertyName: propertyName,
                                      thingName: thingName,
                                      mashupName: mashupName
                                    });
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":1,"lineNumber":5},"position":{"column":1,"lineNumber":5}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"collapsedRegions":[],"lineCount":62,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetCellDataForDevice">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                      infoTableName: "InfoTable",
                                      dataShapeName: "PTCSC.ReportingBlock.CardMashupResult_DS",
                                    });
                                    
                                    let thingTemplateName = Things[thingName].GetThingTemplate();
                                    
                                    const userQuery = {
                                      filters: {
                                        type: "AND",
                                        filters: [],
                                      },
                                    };
                                    
                                    const filters = userQuery.filters.filters;
                                    
                                    filters.push({
                                      fieldName: "propertyName",
                                      type: "EQ",
                                      value: propertyName,
                                    });
                                    
                                    filters.push({
                                      fieldName: "thingTemplateName",
                                      type: "EQ",
                                      value: thingTemplateName.rows[0].name,
                                    });
                                    
                                    let devicesPropertiesTable = Things[
                                      "PTCSC.ReportingBlock.DevicePropertiesMashups_DT"
                                    ].QueryDataTableEntries({
                                      maxItems: 50,
                                      query: userQuery,
                                    });
                                    
                                    let currValue = getPropertyCurrentValue(thingName, devicesPropertiesTable);
                                    let lastValue = getPropertyLastValue(thingName, propertyName);
                                    let propDisplayName = getPropertyDisplayName(devicesPropertiesTable);
                                    let cardTitle = getCardTitle(devicesPropertiesTable);
                                    let unitOfMeasure = getUnitOfMeasure(devicesPropertiesTable);
                                    let changeFromLastValue = Math.floor(getChangeFromLastValue(currValue, lastValue));
                                    let targetValue = getTargetValue(devicesPropertiesTable);
                                    
                                    let newEntry = {
                                      thingName: thingName,
                                      propertyName: propertyName,
                                      currentValue: currValue,
                                      targetValue: targetValue,
                                      lastValue: lastValue,
                                      variation: Math.floor(Math.random() * 4),
                                      changeFromLastValue: changeFromLastValue,
                                      propertyDisplayName: propDisplayName,
                                      cardTitle: cardTitle,
                                      unitOfMeasure: unitOfMeasure,
                                    };
                                    
                                    result.AddRow(newEntry);
                                    
                                    function checkIfMashupHasHistory(mashupName) {
                                      var query = {
                                        filters: {
                                          type: "Matches",
                                          fieldName: "mashupName",
                                          expression: mashupName,
                                        },
                                      };
                                    
                                      let mashupTable = Things["PTCSC.ReportingBlock.MashupsServices_DT"].QueryDataTableEntries({
                                        maxItems: 50,
                                        query: query,
                                      });
                                      return mashupTable.rows[0].history;
                                    }
                                    
                                    function getPropertyCurrentValue(thingName, deviceTable) {
                                      let serviceName = deviceTable.rows[0].serviceName;
                                      return Things[thingName][serviceName]();
                                    }
                                    
                                    function getPropertyLastValue(thingName, propertyName) {
                                      let propertyLastValue = Things[thingName].QueryPropertyHistory();
                                      if(propertyLastValue.length > 1){
                                          return propertyLastValue.rows[1][propertyName];
                                      } else {
                                        return propertyLastValue.rows[0][propertyName];
                                      }
                                    }
                                    
                                    function getTargetValue(devicesPropertiesTable) {
                                      return devicesPropertiesTable.rows[0].target;
                                    }
                                    
                                    function getUnitOfMeasure(devicesPropertiesTable) {
                                      return devicesPropertiesTable.rows[0].unitOfMeasure;
                                    }
                                    
                                    function getPropertyDisplayName(devicesPropertiesTable) {
                                      return devicesPropertiesTable.rows[0].propertyDisplayName;
                                    }
                                    
                                    function getCardTitle(devicesPropertiesTable) {
                                      return devicesPropertiesTable.rows[0].cardTitle;
                                    }
                                    
                                    function getChangeFromLastValue(currentValue, previousValue) {
                                      return (1 - currentValue / previousValue) * 100;
                                    }
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":-8,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":38}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":1,"lineNumber":55},"position":{"column":1,"lineNumber":55}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":108,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetCollection">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                      infoTableName: "InfoTable",
                                      dataShapeName: "PTCSC.ReportingBlock.DisplayCollection_DS",
                                    });
                                    
                                    if(!organization) {
                                      let organizations = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        infoTableName: "InfoTable",
                                        dataShapeName: "PTCSC.ReportingBlock.OrganizationTree_DS",
                                      });
                                    
                                      organizations = me.GetAllOrganizations();
                                    
                                      organization = organizations.rows[0].child;
                                    }
                                    
                                    if (!thingName) {
                                      let devices = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        infoTableName: "InfoTable",
                                        dataShapeName: "PTCSC.ReportingBlock.StoreAllDevices_DS",
                                      });
                                    
                                      devices = me.GetDevicesForDeviceOverview({
                                        organization: organization,
                                      });
                                    
                                      thingName = devices.rows[0].name;
                                    }
                                    
                                    if (collectionType == "Device") {
                                      result = me.GetCollectionForDevice({ thingName: thingName });
                                    }
                                    
                                    if (collectionType == "Metrics") {
                                      result = me.GetCollectionForMetrics({ organization: organization });
                                    }
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":-8,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":13}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":34,"lineNumber":30},"position":{"column":34,"lineNumber":30}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":37,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetCollectionCellData">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    //function selectFunction(kpiName) {
                                    //    var answer = DataShapes["PTCSC.ReportingBlock.GenericCard_DS"].CreateValues();
                                    //	switch (kpiName) {
                                    //		case "EffectiveTime":
                                    //            answer = me.GetEffectiveTime();
                                    //			break;
                                    //		case "InitiativesTable":
                                    //            answer = me.GetInitiativesTable();
                                    //			break;
                                    //		case "OnTimeDelivery":
                                    //			answer = me.GetOnTimeDelivery();
                                    //			break;
                                    //		case "Overtime":
                                    //            answer = me.GetOvertime();
                                    //			break;
                                    //		case "PlannedProductionOEE":
                                    //            answer = me.GetPlannedProductionOEE();
                                    //			break;
                                    //		case "ScrapRate":
                                    //			answer = me.GetScrapRate();
                                    //			break;
                                    //		case "Throughput":
                                    //            answer = me.GetThroughput();
                                    //			break;
                                    //		case "TotalAvailableOEE":
                                    //            answer = me.GetTotalAvailableOEE();
                                    //			break;
                                    //		case "TotalLossHours":
                                    //			answer = me.GetTotalLossHours();
                                    //			break;
                                    //        case "TotalTime":
                                    //			answer = me.GetTotalTime();
                                    //			break;
                                    //		default:
                                    //			answer = DataShapes["PTCSC.ReportingBlock.GenericCard_DS"].CreateValues();
                                    //	}
                                    //	return answer;
                                    //}
                                    //
                                    //var result = selectFunction(kpiName);
                                    var query = {
                                        "filters": {
                                            "type": "Matches",
                                            "fieldName": "key",
                                            "expression": kpiName
                                        }
                                    };
                                    
                                    let dtEntry = Things["PTCSC.ReportingBlock.KpiManagerMapping"].QueryDataTableEntries({
                                    	query: query
                                    });
                                    
                                    
                                    let json = filtersJSON ? JSON.parse(filtersJSON) : "";
                                    
                                    let result = Things[dtEntry.thingName].getKpi({
                                    	filters: json
                                    });
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":1,"lineNumber":1},"position":{"column":1,"lineNumber":1}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":58,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetCollectionConfiguration">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let currentUser = Resources["CurrentSessionInfo"].GetCurrentUser();
                                    
                                    const userQuery = {
                                    	filters: {
                                    		type: 'AND',
                                    		filters: []
                                    	}
                                    };
                                    
                                    const filters = userQuery.filters.filters;
                                    
                                    filters.push({
                                    	fieldName: 'username',
                                    	type: 'LIKE',
                                    	value: currentUser
                                    });
                                    
                                    filters.push({
                                    	fieldName: 'dashboardName',
                                    	type: 'LIKE',
                                    	value: dashboardName
                                    });
                                    
                                    //Query the KPI Mapping Table. If a KPI has the "enabeled" parameter set to false, exclude it from the result infotable using the filter
                                    let kpiMappingTable = Things["PTCSC.ReportingBlock.KpiManagerMapping"].QueryDataTableEntries({});
                                    let kpiMappingTableLength = kpiMappingTable.rows.length;
                                    
                                    for (let i = 0; i < kpiMappingTableLength; i++) {
                                    	let isEnabled = kpiMappingTable[i].enabled;
                                        if(!isEnabled){
                                        	filters.push({
                                                fieldName: 'kpiName',
                                                type: 'NE',
                                                value: kpiMappingTable[i].kpiName
                                            });
                                        }
                                    }
                                    
                                    let result = Things["PTCSC.ReportingBlock.DashboardConfiguration"].QueryDataTableEntries({ maxItems: 50,  query: userQuery });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetCollectionForDevice">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let thingTemplateOfDevice = Things[thingName].GetThingTemplate();
                                    let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                      infoTableName: "InfoTable",
                                      dataShapeName: "PTCSC.ReportingBlock.DisplayCollection_DS",
                                    });
                                    
                                    const userQuery = {
                                      filters: {
                                        type: "AND",
                                        filters: [],
                                      },
                                    };
                                    
                                    const filters = userQuery.filters.filters;
                                    
                                    filters.push({
                                      fieldName: "enabled",
                                      type: "EQ",
                                      value: true,
                                    });
                                    
                                    filters.push({
                                      fieldName: "thingTemplateName",
                                      type: "EQ",
                                      value: thingTemplateOfDevice.rows[0].name,
                                    });
                                    
                                    let devices = Things["PTCSC.ReportingBlock.DeviceOverviewConfig_DT"].QueryDataTableEntries({
                                      maxItems: 50,
                                      query: userQuery,
                                    });
                                    
                                    for (var i = 0; i < devices.length; i++) {
                                    
                                    let newEntry = {
                                      uid: devices.rows[i].uid,
                                      thingTemplateName: devices.rows[i].thingTemplateName,
                                      propertyName: devices.rows[i].propertyName,
                                      cardMashupName: devices.rows[i].cardMashupName,
                                      cardWidth: devices.rows[i].cardWidth,
                                      cardHeight: devices.rows[i].cardHeight,
                                      cardOrder: devices.rows[i].order,
                                      cardManager: devices.rows[i].cardManager,
                                      cardService: devices.rows[i].cardService,	
                                      enabled: devices.rows[i].enabled,
                                      cardTitle: devices.rows[i].cardTitle
                                    };
                                    
                                    result.AddRow(newEntry);
                                    
                                    }
                                    
                                    try {
                                      const userSearch = {
                                        filters: {
                                          type: "OR",
                                          filters: [],
                                        },
                                      };
                                      const filtersForSearch = userSearch.filters.filters;
                                      if (searchTerm) {
                                        filtersForSearch.push({
                                          fieldName: "cardTitle",
                                          type: "LIKE",
                                          value: "%" + searchTerm + "%",
                                        });
                                        devices = Resources["InfoTableFunctions"].Query({
                                          t: devices,
                                          query: userSearch,
                                        });
                                        result = devices;
                                      }
                                    } catch (err) {
                                      logger.error(
                                        "Thing [{}] Service [{}] error at line [{}] : {}",
                                        me.name,
                                        err.fileName,
                                        err.lineNumber,
                                        err
                                      );
                                    }
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":-6,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":59}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":22,"lineNumber":71},"position":{"column":22,"lineNumber":71}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":82,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetCollectionForMetrics">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        infoTableName: "InfoTable",
                                        dataShapeName: "PTCSC.ReportingBlock.DisplayCollection_DS"
                                    });
                                    
                                    let organizations = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                      infoTableName: "InfoTable",
                                      dataShapeName: "PTCSC.ReportingBlock.StoreAllDevices_DS",
                                    });
                                    
                                    const userQuery = {
                                      filters: {
                                        type: "AND",
                                        filters: [],
                                      },
                                    };
                                    
                                    const filters = userQuery.filters.filters;
                                    
                                    filters.push({
                                      fieldName: "enabled",
                                      type: "EQ",
                                      value: true,
                                    });
                                    
                                    let metricOverviewConfigTable = Things["PTCSC.ReportingBlock.MetricOverviewConfig_DT"].QueryDataTableEntries({
                                      query: userQuery
                                    });
                                    
                                    for (var i = 0; i < metricOverviewConfigTable.length; i++) {
                                    
                                    let newEntry = {
                                      uid: metricOverviewConfigTable.rows[i].uid, 
                                      propertyName: metricOverviewConfigTable.rows[i].metricName, 
                                      cardMashupName: metricOverviewConfigTable.rows[i].cardMashupName,
                                      cardWidth: metricOverviewConfigTable.rows[i].cardWidth,
                                      cardHeight: metricOverviewConfigTable.rows[i].cardHeight,
                                      cardOrder: metricOverviewConfigTable.rows[i].order,
                                      cardManager: metricOverviewConfigTable.rows[i].metricManager,
                                      cardService: metricOverviewConfigTable.rows[i].metricService,
                                      enabled: metricOverviewConfigTable.rows[i].enabled,
                                      cardTitle: metricOverviewConfigTable.rows[i].cardTitle,
                                    };
                                    
                                    result.AddRow(newEntry);
                                    }
                                    
                                    try {
                                      const userSearch = {
                                        filters: {
                                          type: "OR",
                                          filters: [],
                                        },
                                      };
                                      const filtersForSearch = userSearch.filters.filters;
                                      if (searchTerm) {
                                        filtersForSearch.push({
                                          fieldName: "cardTitle",
                                          type: "LIKE",
                                          value: "%" + searchTerm + "%",
                                        });
                                        devices = Resources["InfoTableFunctions"].Query({
                                          t: result,
                                          query: userSearch,
                                        });
                                        result = devices;
                                      }
                                    } catch (err) {
                                      logger.error(
                                        "Thing [{}] Service [{}] error at line [{}] : {}",
                                        me.name,
                                        err.fileName,
                                        err.lineNumber,
                                        err
                                      );
                                    }
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":51}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":22,"lineNumber":66},"position":{"column":22,"lineNumber":66}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":80,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetDashboardBreadcrumb">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let breadrcumbTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        infoTableName: "InfoTable",
                                        dataShapeName: "PTCSC.ReportingBlock.Breadcrumb_DS"
                                    });
                                    
                                    
                                    // PTCSC.ReportingBlock.Breadcrumb_DS entry object
                                    let newEntry = {
                                        TypeField: "Target Mashup", // STRING
                                        DisplayField: breadcrumbName, // STRING
                                        MashupName: "PTCSC.ReportingBlock.DashboardFrame_MU"
                                    };
                                    
                                    breadrcumbTable.AddRow(newEntry);
                                    
                                    result = breadrcumbTable;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetDashboardList">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let currentUser = Resources["CurrentSessionInfo"].GetCurrentUser();
                                    
                                    const userQuery = {
                                    	filters: {
                                    		type: 'AND',
                                    		filters: []
                                    	}
                                    };
                                    
                                    const filters = userQuery.filters.filters;
                                    
                                    filters.push({
                                    	fieldName: 'username',
                                    	type: 'LIKE',
                                    	value: currentUser
                                    });
                                    
                                    let dashboardList = Things["PTCSC.ReportingBlock.DashboardConfiguration"].QueryDataTableEntries({ maxItems: 50,  query: userQuery });
                                    var params = {t: dashboardList, columns: "dashboardName"};
                                    
                                    var params = {
                                    	t: dashboardList,
                                    	columns: "dashboardName,username"
                                    };
                                    
                                    var result = Resources["InfoTableFunctions"].Distinct(params);
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetDataForCard">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                      infoTableName: "InfoTable",
                                      dataShapeName: "PTCSC.ReportingBlock.CardMashupResult_DS",
                                    });
                                    
                                    if(collectionType == "Device") {
                                      result =  me.GetDataForCardForOverview({
                                        thingName: thingName,
                                        propertyName: propertyName,
                                        mashupName: mashupName,
                                      });
                                    }
                                    
                                    if (collectionType == "Metrics") {
                                      result = me.GetDataForCardForMetrics({
                                        propertyName: propertyName,
                                        mashupName: mashupName,
                                      });
                                    }
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":32,"lineNumber":16},"position":{"column":32,"lineNumber":16}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":19,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetDataForCardForMetrics">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                      infoTableName: "InfoTable",
                                      dataShapeName: "PTCSC.ReportingBlock.CardMashupResult_DS",
                                    });
                                    
                                    const queryToFindService = {
                                      filters: {
                                        type: "AND",
                                        filters: [],
                                      },
                                    };
                                    
                                    const filters = queryToFindService.filters.filters;
                                    
                                    filters.push({
                                      fieldName: "metricName",
                                      type: "EQ",
                                      value: propertyName,
                                    });
                                    
                                    filters.push({
                                      fieldName: "cardMashupName",
                                      type: "EQ",
                                      value: mashupName,
                                    });
                                    
                                    
                                    let devicesPropertiesTable = Things[
                                      "PTCSC.ReportingBlock.MetricOverviewConfig_DT"
                                    ].QueryDataTableEntries({
                                      maxItems: 50,
                                      query: queryToFindService,
                                    });
                                    
                                    let managerName = devicesPropertiesTable.rows[0].metricManager;
                                    let serviceName = devicesPropertiesTable.rows[0].metricService;
                                    
                                    logger.error("managerName " + serviceName);
                                    logger.error("managerName " + managerName);
                                    
                                    result = Things[managerName][serviceName]({
                                      metricName: propertyName,
                                    });
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":-6,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":10}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":29,"lineNumber":22},"position":{"column":29,"lineNumber":22}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":44,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetDataForCardForOverview">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                      infoTableName: "InfoTable",
                                      dataShapeName: "PTCSC.ReportingBlock.CardMashupResult_DS",
                                    });
                                    
                                    let thingTemplateName = Things[thingName].GetThingTemplate();
                                    
                                    const queryToFindMashup = {
                                      filters: {
                                        type: "AND",
                                        filters: [],
                                      },
                                    };
                                    
                                    const filters = queryToFindMashup.filters.filters;
                                    
                                    filters.push({
                                      fieldName: "propertyName",
                                      type: "EQ",
                                      value: propertyName,
                                    });
                                    
                                    filters.push({
                                      fieldName: "thingTemplateName",
                                      type: "EQ",
                                      value: thingTemplateName.rows[0].name,
                                    });
                                    
                                    filters.push({
                                      fieldName: "cardMashupName",
                                      type: "EQ",
                                      value: mashupName,
                                    });
                                    
                                    let devicesPropertiesTable = Things[
                                      "PTCSC.ReportingBlock.DeviceOverviewConfig_DT"
                                    ].QueryDataTableEntries({
                                      maxItems: 50,
                                      query: queryToFindMashup,
                                    });
                                    
                                    let managerName = devicesPropertiesTable.rows[0].cardManager;
                                    let serviceName = devicesPropertiesTable.rows[0].cardService;
                                    logger.error(serviceName);
                                    result = Things[managerName][serviceName]({
                                      propertyName: propertyName,
                                      thingName: thingName,
                                      mashupName: mashupName,
                                    });
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":-9,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":5}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":4,"lineNumber":21},"position":{"column":4,"lineNumber":21}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":50,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetDataForDetailsPage">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                      infoTableName: "InfoTable",
                                      dataShapeName: "PTCSC.ReportingBlock.DetailsPageResult_DS",
                                    });
                                    
                                    if (collectionType == "Device") {
                                      result = me.GetDataForDetailsPageDevice({
                                        thingName: thingName,
                                        propertyName: propertyName,
                                        dateStart: dateStart,
                                        dateEnd: dateEnd
                                      });
                                    } else {
                                      result = me.GetDataForDetailsPageMetrics({
                                        propertyName: propertyName,
                                        dateStart: dateStart,
                                        dateEnd: dateEnd,
                                      });
                                    }
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":32,"lineNumber":15},"position":{"column":32,"lineNumber":15}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":19,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetDataForDetailsPageDevice">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                      infoTableName: "InfoTable",
                                      dataShapeName: "PTCSC.ReportingBlock.DetailsPageResult_DS",
                                    });
                                    
                                    let thingTemplateName = Things[thingName].GetThingTemplate();
                                    
                                    const queryToFindMashup = {
                                      filters: {
                                        type: "AND",
                                        filters: [],
                                      },
                                    };
                                    
                                    const filters = queryToFindMashup.filters.filters;
                                    
                                    filters.push({
                                      fieldName: "propertyName",
                                      type: "EQ",
                                      value: propertyName,
                                    });
                                    
                                    filters.push({
                                      fieldName: "thingTemplateName",
                                      type: "EQ",
                                      value: thingTemplateName.rows[0].name,
                                    });
                                    
                                    let detailsServicesConfig = Things[
                                      "PTCSC.ReportingBlock.DeviceDetailsConfig_DT"
                                    ].QueryDataTableEntries({
                                      maxItems: 50,
                                      query: queryToFindMashup,
                                    });
                                    
                                    let managerName = detailsServicesConfig.rows[0].detailsManager;
                                    let serviceName = detailsServicesConfig.rows[0].detailsServiceName;
                                    
                                    result = Things[managerName][serviceName]({
                                      propertyName: propertyName,
                                      thingName: thingName,
                                      startDate: dateStart,
                                      endDate: dateEnd,
                                    });
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":47,"lineNumber":30},"position":{"column":47,"lineNumber":30}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":45,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetDataForDetailsPageMetrics">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                      infoTableName: "InfoTable",
                                      dataShapeName: "PTCSC.ReportingBlock.DetailsPageResult_DS",
                                    });
                                    
                                    const queryToFindMashup = {
                                      filters: {
                                        type: "AND",
                                        filters: [],
                                      },
                                    };
                                    
                                    const filters = queryToFindMashup.filters.filters;
                                    
                                    filters.push({
                                      fieldName: "metricName",
                                      type: "EQ",
                                      value: propertyName,
                                    });
                                    
                                    let detailsServicesConfig = Things[
                                      "PTCSC.ReportingBlock.MetricDetailsConfig_DT"
                                    ].QueryDataTableEntries({
                                      maxItems: 50,
                                      query: queryToFindMashup,
                                    });
                                    
                                    let managerName = detailsServicesConfig.rows[0].metricDetailsManager;
                                    let serviceName = detailsServicesConfig.rows[0].metricDetailsServiceName;
                                    
                                    result = Things[managerName][serviceName]({
                                      propertyName: propertyName,
                                      startDate: dateStart,
                                      endDate: dateEnd,
                                    });
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":-2,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":4}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":25,"lineNumber":16},"position":{"column":25,"lineNumber":16}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":36,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetDataForTableView">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        infoTableName: "InfoTable",
                                        dataShapeName: "PTCSC.ReportingBlock.MetricViewResult_DS"
                                    });
                                    
                                    if(collectionType == "Device") {
                                      result = me.GetDataForTableViewDeviceAndFleet({
                                        thingName: thingName
                                      });
                                    } else {
                                      result = me.GetDataForTableViewMetrics();
                                    }
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":48,"lineNumber":7},"position":{"column":48,"lineNumber":7}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":10,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetDataForTableViewDevice">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                      infoTableName: "InfoTable",
                                      dataShapeName: "PTCSC.ReportingBlock.MetricViewResult_DS",
                                    });
                                    
                                    let propertyTable = Things["PTCSC.ReportingBlock.PropertyConfig_DT"].QueryDataTableEntries();
                                    
                                    let params = {
                                      t: propertyTable,
                                      columns: "propertyName",
                                    };
                                    
                                    propertyTable = Resources["InfoTableFunctions"].Distinct(params);
                                    let thingTemplateName = Things[thingName].GetThingTemplate();
                                    
                                    for (var i = 0; i < propertyTable.length; i++) {
                                      let propertyName = propertyTable.rows[i].propertyName;
                                      let newEntry = {
                                        propertyDisplayName: getPropertyDisplayName(propertyName, thingName),
                                        propertyName: propertyName,
                                        currentValue: Things[thingName][propertyName],
                                        targetValue: propertyTable.rows[i].target,
                                        variation: Math.floor(Math.random() * 4),
                                        averageValue: getPropertyAverage(thingName, propertyName),
                                        isAlerted: 0,
                                        detailsMashupName: getDetailsMashupName(thingTemplateName.rows[0].name, propertyName),
                                        changeFromLastValue: Math.floor(Math.random() * 100) + "%",
                                      };
                                      result.AddRow(newEntry);
                                    }
                                    
                                    function getPropertyDisplayName(propertyName, thingName){
                                        const queryToFindDisplayName = {
                                          filters: {
                                            type: "AND",
                                            filters: [],
                                          },
                                        };
                                    
                                        const filters = queryToFindDisplayName.filters.filters;
                                    
                                        filters.push({
                                          fieldName: "propertyName",
                                          type: "EQ",
                                          value: propertyName,
                                        });
                                        
                                        let deviceOverviewConfigTable = Things[
                                          "PTCSC.ReportingBlock.DeviceOverviewConfig_DT"
                                        ].QueryDataTableEntries({
                                          query: queryToFindDisplayName,
                                        });
                                    
                                        return deviceOverviewConfigTable.rows[0].cardTitle;
                                    }
                                    
                                    function getDetailsMashupName(thingName, propertyName) {
                                      const queryToFindMashup = {
                                        filters: {
                                          type: "AND",
                                          filters: [],
                                        },
                                      };
                                    
                                      const filters = queryToFindMashup.filters.filters;
                                    
                                      filters.push({
                                        fieldName: "propertyName",
                                        type: "EQ",
                                        value: propertyName,
                                      });
                                    
                                      filters.push({
                                        fieldName: "thingTemplateName",
                                        type: "EQ",
                                        value: thingName,
                                      });
                                    
                                      let mashupsServicesConfigTable = Things[
                                        "PTCSC.ReportingBlock.DetailsServicesConfig_DT"
                                      ].QueryDataTableEntries({
                                        query: queryToFindMashup,
                                      });
                                    
                                      return mashupsServicesConfigTable.rows[0].detailsMashupName;
                                    }
                                    
                                    function getPropertyAverage(thingName, propertyName) {
                                      let averageConcat = "SUM_" + propertyName;
                                    
                                      let queryPropTable = Things[thingName].QueryPropertyHistory();
                                    
                                      let params = {
                                        t: queryPropTable,
                                        columns: propertyName,
                                        aggregates: "SUM",
                                      };
                                    
                                      let propertyAverage = Resources["InfoTableFunctions"].Aggregate(params);
                                    
                                      let average = propertyAverage.rows[0][averageConcat] / queryPropTable.length;
                                    
                                      return average.toFixed(1);
                                    }
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":-14,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":22}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":5,"lineNumber":47},"position":{"column":5,"lineNumber":47}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":105,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetDataForTableViewDeviceAndFleet">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                      infoTableName: "InfoTable",
                                      dataShapeName: "PTCSC.ReportingBlock.MetricViewResult_DS",
                                    });
                                    
                                    let propertyTable = Things["PTCSC.ReportingBlock.PropertyConfig_DT"].QueryDataTableEntries();
                                    
                                    let params = {
                                      t: propertyTable,
                                      columns: "propertyName",
                                    };
                                    
                                    propertyTable = Resources["InfoTableFunctions"].Distinct(params);
                                    let thingTemplateName = Things[thingName].GetThingTemplate();
                                    
                                    for (var i = 0; i < propertyTable.length; i++) {
                                      let propertyName = propertyTable.rows[i].propertyName;
                                      let newEntry = {
                                        propertyDisplayName: getPropertyDisplayName(propertyName, thingName),
                                        propertyName: propertyName,
                                        currentValue: Things[thingName][propertyName],
                                        targetValue: propertyTable.rows[i].target,
                                        variation: Math.floor(Math.random() * 4),
                                        averageValue: getPropertyAverage(thingName, propertyName),
                                        isAlerted: Math.floor(Math.random() * 2),
                                        detailsMashupName: getDetailsMashupName(thingTemplateName.rows[0].name, propertyName),
                                        changeFromLastValue: Math.floor(Math.random() * 100) + "%",
                                      };
                                      result.AddRow(newEntry);
                                    }
                                    
                                    try {
                                      const userSearch = {
                                        filters: {
                                          type: "OR",
                                          filters: [],
                                        },
                                      };
                                      const filtersForSearch = userSearch.filters.filters;
                                      if (searchTerm) {
                                        filtersForSearch.push({
                                          fieldName: "propertyDisplayName",
                                          type: "LIKE",
                                          value: "%" + searchTerm + "%",
                                        });
                                        devices = Resources["InfoTableFunctions"].Query({
                                          t: result,
                                          query: userSearch,
                                        });
                                        result = devices;
                                      }
                                    } catch (err) {
                                      logger.error(
                                        "Thing [{}] Service [{}] error at line [{}] : {}",
                                        me.name,
                                        err.fileName,
                                        err.lineNumber,
                                        err
                                      );
                                    }
                                    
                                    function getPropertyDisplayName(propertyName, thingName){
                                        const queryToFindDisplayName = {
                                          filters: {
                                            type: "AND",
                                            filters: [],
                                          },
                                        };
                                    
                                        const filters = queryToFindDisplayName.filters.filters;
                                    
                                        filters.push({
                                          fieldName: "propertyName",
                                          type: "EQ",
                                          value: propertyName,
                                        });
                                        
                                        let deviceOverviewConfigTable = Things[
                                          "PTCSC.ReportingBlock.DeviceOverviewConfig_DT"
                                        ].QueryDataTableEntries({
                                          query: queryToFindDisplayName,
                                        });
                                    
                                        return deviceOverviewConfigTable.rows[0].cardTitle;
                                    }
                                    
                                    function getDetailsMashupName(thingName, propertyName) {
                                      const queryToFindMashup = {
                                        filters: {
                                          type: "AND",
                                          filters: [],
                                        },
                                      };
                                    
                                      const filters = queryToFindMashup.filters.filters;
                                    
                                      filters.push({
                                        fieldName: "propertyName",
                                        type: "EQ",
                                        value: propertyName,
                                      });
                                    
                                      filters.push({
                                        fieldName: "thingTemplateName",
                                        type: "EQ",
                                        value: thingName,
                                      });
                                    
                                      let mashupsServicesConfigTable = Things[
                                        "PTCSC.ReportingBlock.DeviceDetailsConfig_DT"
                                      ].QueryDataTableEntries({
                                        query: queryToFindMashup,
                                      });
                                    
                                      return mashupsServicesConfigTable.rows[0].detailsMashupName;
                                    }
                                    
                                    function getPropertyAverage(thingName, propertyName) {
                                      let averageConcat = "SUM_" + propertyName;
                                    
                                      let queryPropTable = Things[thingName].QueryPropertyHistory();
                                    
                                      let params = {
                                        t: queryPropTable,
                                        columns: propertyName,
                                        aggregates: "SUM",
                                      };
                                    
                                      let propertyAverage = Resources["InfoTableFunctions"].Aggregate(params);
                                    
                                      let average = propertyAverage.rows[0][averageConcat] / queryPropTable.length;
                                    
                                      return average.toFixed(1);
                                    }
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":-4,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":32}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":22,"lineNumber":50},"position":{"column":22,"lineNumber":50}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":137,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetDataForTableViewMetrics">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                      infoTableName: "InfoTable",
                                      dataShapeName: "PTCSC.ReportingBlock.MetricViewResult_DS",
                                    });
                                    
                                    let metricDetailsConfigTable = Things["PTCSC.ReportingBlock.MetricDetailsConfig_DT"].QueryDataTableEntries({
                                    });
                                    
                                    for (var i = 0; i < metricDetailsConfigTable.length; i++) {
                                    
                                     let metricManager = metricDetailsConfigTable.rows[i].metricDetailsManager;
                                     let metricService = metricDetailsConfigTable.rows[i].tableViewServiceName;
                                     let metricName = metricDetailsConfigTable.rows[i].metricName;
                                    
                                    let query = {
                                     "filters": {
                                       "type": "EQ",
                                       "fieldName": "metricName",
                                       "value": metricName
                                     }
                                    };
                                    
                                    
                                    let metricOverviewConfigTable = Things["PTCSC.ReportingBlock.MetricOverviewConfig_DT"].QueryDataTableEntries({
                                    	query: query,
                                    });
                                    
                                     let metricServiceResult = Things[metricManager][metricService]({
                                       metricName: metricName,
                                       organization: organization
                                     });
                                      
                                    let newEntry = {
                                      propertyName: metricServiceResult.rows[0].propertyName,
                                      currentValue: metricServiceResult.rows[0].currentValue,
                                      targetValue: metricServiceResult.rows[0].targetValue,
                                      variation: metricServiceResult.rows[0].variation,
                                      averageValue: metricServiceResult.rows[0].averageValue,
                                      isAlerted: metricServiceResult.rows[0].isAlerted,
                                      detailsMashupName: metricDetailsConfigTable.rows[0].metricDetailsMashupName,
                                      changeFromLastValue: metricServiceResult.rows[0].changeFromLastValue,
                                      propertyDisplayName: metricOverviewConfigTable.rows[0].cardTitle,
                                    };
                                      result.AddRow(newEntry);
                                    }
                                    
                                    try {
                                      const userSearch = {
                                        filters: {
                                          type: "OR",
                                          filters: [],
                                        },
                                      };
                                      const filtersForSearch = userSearch.filters.filters;
                                      if (searchTerm) {
                                        filtersForSearch.push({
                                          fieldName: "propertyDisplayName",
                                          type: "LIKE",
                                          value: "%" + searchTerm + "%",
                                        });
                                        devices = Resources["InfoTableFunctions"].Query({
                                          t: result,
                                          query: userSearch,
                                        });
                                        result = devices;
                                      }
                                    } catch (err) {
                                      logger.error(
                                        "Thing [{}] Service [{}] error at line [{}] : {}",
                                        me.name,
                                        err.fileName,
                                        err.lineNumber,
                                        err
                                      );
                                    }
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":-14,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":32}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":2,"lineNumber":75},"position":{"column":2,"lineNumber":75}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":75,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetDefaultEnterprise">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let enterprise = Things["PTC.MfgModelImpl.Manager"].GetBusinessUnitEntityTreeRoot({
                                    	searchModelType: "Enterprise",
                                    });
                                    
                                    let result = enterprise.rows[0].modelName;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetDeviceOrOrganization">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result;
                                    
                                    if(collectionType == "Device") {
                                        result = device;
                                    } else {
                                        result = organization;
                                    }
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":2,"lineNumber":7},"position":{"column":2,"lineNumber":7}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":7,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetDevicesForDeviceOverview">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                      infoTableName: "InfoTable",
                                      dataShapeName: "PTCSC.ReportingBlock.StoreAllDevices_DS",
                                    });
                                    
                                    let table = me.GetConfigurationTable({
                                      tableName: "DeviceFiltersConfig",
                                    });
                                    
                                    deviceFiltersManager = table.rows[0].deviceFiltersManager;
                                    deviceFiltersService = table.rows[0].deviceService;
                                    
                                    result = Things[deviceFiltersManager][deviceFiltersService]({
                                      organization: organization
                                    });
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":1,"lineNumber":16},"position":{"column":1,"lineNumber":16}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":16,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetEffectiveTime">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let dateValue = new Date();
                                    dateValue = dateAddDays(dateValue, -100);
                                    
                                    let sampleRows = 1;
                                    var data01 = { dataShape: { fieldDefinitions: {} }, rows: [] };
                                    
                                    data01.dataShape.fieldDefinitions['actualValue'] = { name: 'actualValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['targetValue'] = { name: 'targetValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['gainPercentageValue'] = { name: 'gainPercentageValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['infotableValues'] = { name: 'infotableValues', baseType: 'INFOTABLE' };
                                    data01.dataShape.fieldDefinitions['timeframe'] = { name: 'timeframe', baseType: 'STRING' };
                                    data01.dataShape.fieldDefinitions['cardTitle'] = { name: 'cardTitle', baseType: 'STRING' };
                                    data01.dataShape.fieldDefinitions['progressValue'] = { name: 'progressValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['isAlerted'] = { name: 'isAlerted', baseType: 'BOOLEAN' };
                                    
                                    var params01 = {
                                        json: data01 /* JSON */
                                    };
                                    
                                    var sampleChart = Resources["InfoTableFunctions"].FromJSON(params01);
                                    
                                    let lineRows = 100;
                                    
                                    var data02 = { dataShape: { fieldDefinitions: {} }, rows: [] };
                                    
                                    data02.dataShape.fieldDefinitions['values1'] = { name: 'values1', baseType: 'NUMBER' };
                                    data02.dataShape.fieldDefinitions['values2'] = { name: 'values2', baseType: 'NUMBER' };
                                    data02.dataShape.fieldDefinitions['timestamp'] = { name: 'timestamp', baseType: 'DATETIME' };
                                    
                                    var params02 = {
                                        json: data02 /* JSON */
                                    }; 
                                    
                                    var lineChart = Resources["InfoTableFunctions"].FromJSON(params02);
                                    
                                    for (let i = 0; i < lineRows; i++) {
                                    
                                        var calculatedDateValue = dateAddDays(dateValue, i);
                                        var newEntry = new Object();
                                        newEntry.values1 = Math.floor(Math.random() * 23) + 1; // NUMBER
                                        newEntry.values2 = Math.floor(Math.random() * 50) + 1; // NUMBER
                                        newEntry.timestamp = calculatedDateValue; // DATETIME
                                    
                                        lineChart.AddRow(newEntry);
                                    }
                                    
                                    for (let i = 0; i < sampleRows; i++) {
                                    
                                        var newEntry = new Object();
                                        newEntry.actualValue = Math.floor(Math.random() * 23) + 1; // NUMBER
                                        newEntry.gainPercentageValue = Math.floor(Math.random() * 50) + 1; // NUMBER
                                        newEntry.timeframe = "Since last month"; // DATETIME
                                        newEntry.targetValue = Math.floor(Math.random() * 83) + 1; // NUMBER
                                        newEntry.gainPercentageValue = Math.floor(Math.random() * 50) + 1; // NUMBER
                                        newEntry.infotableValues = lineChart; //INFOTABLE
                                        newEntry.cardTitle = "Effective Time (hr)";
                                        newEntry.progressValue = Math.floor(Math.random() * 100) + 1; // NUMBER
                                        newEntry.isAlerted = Math.random() < 0.5; // NUMBER
                                    
                                        sampleChart.AddRow(newEntry);
                                    }
                                    
                                    var result = sampleChart;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetEquipmentNameForTargetAggregate">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = selectedRows.rows[0].equipmentName;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetEquipmentNameForTargetAverage">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = selectedRows.rows[0].equipmentName;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetEquipmentNameForThresholdAggregate">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = selectedRows.rows[0].equipmentName;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetEquipmentNameForThresholdAverage">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = selectedRows.rows[0].equipmentName;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetEquipmentsForThresholdAggregate">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let equipmentForAdmin = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    	infoTableName: "InfoTable",
                                    	dataShapeName: "PTCSC.ReportingBlock.AdminEquipmentsForThresholdAggregate_DS"
                                    });
                                    let modelData;
                                    let model;
                                    
                                    if (equipmentName) {
                                    	let modelChild = Things["PTC.MfgModelImpl.Manager"].GetBusinessUnitEntityTreeChildrenForNode({
                                    		thingName: equipmentName
                                    	});
                                    	modelData = modelChild;
                                    } else {
                                    	modelRoot = Things["PTC.MfgModelImpl.Manager"].GetBusinessUnitEntityTreeRoot({
                                    		searchModelType: "Site"
                                    	});
                                    	modelData = modelRoot;
                                    	equipmentName = modelRoot.rows[0].modelName;
                                    }
                                    
                                    for (var i = 0; i < modelData.length; i++) {
                                    
                                    	var query = {
                                    		"filters": {
                                    			"type": "AND",
                                    			"filters": [{
                                    					"type": "EQ",
                                    					"fieldName": "kpiName",
                                    					"value": metricName
                                    				},
                                    				{
                                    					"type": "EQ",
                                    					"fieldName": "equipmentName",
                                    					"value": modelData.rows[i].modelName
                                    				}
                                    			]
                                    		}
                                    	};
                                    
                                    	let queryResult = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].SearchDataTableEntries({
                                    		query: query
                                    	});
                                    
                                    	let newEntry = {
                                    		equipmentName: modelData.rows[i].modelName,
                                    		equipmentType: queryResult.rows[0].equipmentType,
                                    		timeframe: queryResult.rows[0].timePeriod,
                                    		poor: queryResult.rows[0].poor,
                                    		ok: queryResult.rows[0].ok,
                                    		good: queryResult.rows[0].good,
                                    		hasChildren: modelData.rows[i].hasChildren,
                                    		parentName: modelData.rows[i].parentThingName
                                    	};
                                    	equipmentForAdmin.AddRow(newEntry);
                                    }
                                    
                                    let result = equipmentForAdmin;
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":-6,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":35}},"cursorState":[{"inSelectionMode":true,"selectionStart":{"column":45,"lineNumber":47},"position":{"column":1,"lineNumber":47}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":58,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetEquipmentsForThresholdAverage">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let equipmentForAdmin = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    	infoTableName: "InfoTable",
                                    	dataShapeName: "PTCSC.ReportingBlock.AdminEquipmentsForThresholdAverage_DS"
                                    });
                                    let modelData;
                                    let model;
                                    
                                    if (equipmentName) {
                                    	let modelChild = Things["PTC.MfgModelImpl.Manager"].GetBusinessUnitEntityTreeChildrenForNode({
                                    		thingName: equipmentName
                                    	});
                                    	modelData = modelChild;
                                    } else {
                                    	modelRoot = Things["PTC.MfgModelImpl.Manager"].GetBusinessUnitEntityTreeRoot({
                                    		searchModelType: "Site"
                                    	});
                                    	modelData = modelRoot;
                                    	equipmentName = modelRoot.rows[0].modelName;
                                    }
                                    
                                    for (var i = 0; i < modelData.length; i++) {
                                    
                                    	var query = {
                                    		"filters": {
                                    			"type": "AND",
                                    			"filters": [{
                                    					"type": "EQ",
                                    					"fieldName": "kpiName",
                                    					"value": metricName
                                    				},
                                    				{
                                    					"type": "EQ",
                                    					"fieldName": "equipmentName",
                                    					"value": modelData.rows[i].modelName
                                    				}
                                    			]
                                    		}
                                    	};
                                    
                                    	let queryResult = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].SearchDataTableEntries({
                                    		query: query
                                    	});
                                    
                                    	let newEntry = {
                                    		equipmentName: modelData.rows[i].modelName,
                                    		equipmentType: queryResult.rows[0].equipmentType,
                                    		inheritance: queryResult.rows[0].inheritanceForThreshold,
                                    		poor: queryResult.rows[0].poor,
                                    		ok: queryResult.rows[0].ok,
                                    		good: queryResult.rows[0].good,
                                    		hasChildren: modelData.rows[i].hasChildren,
                                    		parentName: modelData.rows[i].parentThingName
                                    	};
                                    	equipmentForAdmin.AddRow(newEntry);
                                    }
                                    
                                    let result = equipmentForAdmin;
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":-6,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":35}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":32,"lineNumber":57},"position":{"column":32,"lineNumber":57}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":58,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetEquipmentsPropertiesForMetric">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let equipmentForAdmin = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    	infoTableName: "InfoTable",
                                    	dataShapeName: "PTCSC.ReportingBlock.AdminEquipmentsDisplay_DS"
                                    });
                                    let modelData;
                                    let model;
                                    
                                    if (equipmentName) {
                                    	let modelChild = Things["PTC.MfgModelImpl.Manager"].GetBusinessUnitEntityTreeChildrenForNode({
                                    		thingName: equipmentName
                                    	});
                                    	modelData = modelChild;
                                    } else {
                                    	modelRoot = Things["PTC.MfgModelImpl.Manager"].GetBusinessUnitEntityTreeRoot({
                                    		searchModelType: "Enterprise"
                                    	});
                                    	modelData = modelRoot;
                                    	equipmentName = modelRoot.rows[0].modelName;
                                    }
                                    
                                    for (var i = 0; i < modelData.length; i++) {
                                    
                                    	var query = {
                                    		"filters": {
                                    			"type": "AND",
                                    			"filters": [{
                                    					"type": "EQ",
                                    					"fieldName": "kpiName",
                                    					"value": metricName
                                    				},
                                    				{
                                    					"type": "EQ",
                                    					"fieldName": "equipmentName",
                                    					"value": modelData.rows[i].modelName
                                    				}
                                    			]
                                    		}
                                    	};
                                    
                                    	let queryResult = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].SearchDataTableEntries({
                                    		query: query
                                    	});
                                    
                                    	let newEntry = {
                                    		equipmentName: modelData.rows[i].modelName,
                                    		equipmentType: queryResult.rows[0].equipmentType,
                                    		target: queryResult.rows[0].target,
                                    		inheritance: queryResult.rows[0].inheritance,
                                    		poor: parseInt(queryResult.rows[0].poor),
                                    		ok: parseInt(queryResult.rows[0].ok),
                                    		good: parseInt(queryResult.rows[0].good),
                                    		hasChildren: modelData.rows[i].hasChildren,
                                    		parentName: modelData.rows[i].parentThingName
                                    	};
                                    	equipmentForAdmin.AddRow(newEntry);
                                    }
                                    
                                    let result = equipmentForAdmin;
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":-6,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":35}},"cursorState":[{"inSelectionMode":true,"selectionStart":{"column":30,"lineNumber":46},"position":{"column":32,"lineNumber":46}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":58,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetEquipmentsTargetForAggregate">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let equipmentForAdmin = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    	infoTableName: "InfoTable",
                                    	dataShapeName: "PTCSC.ReportingBlock.AdminEquipmentsForTargetAggregate_DS"
                                    });
                                    let modelData;
                                    let model;
                                    
                                    if (equipmentName) {
                                    	let modelChild = Things["PTC.MfgModelImpl.Manager"].GetBusinessUnitEntityTreeChildrenForNode({
                                    		thingName: equipmentName
                                    	});
                                    	modelData = modelChild;
                                    } else {
                                    	modelRoot = Things["PTC.MfgModelImpl.Manager"].GetBusinessUnitEntityTreeRoot({
                                    		searchModelType: "Site"
                                    	});
                                    	modelData = modelRoot;
                                    	equipmentName = modelRoot.rows[0].modelName;
                                    }
                                    
                                    for (var i = 0; i < modelData.length; i++) {
                                    
                                    	var query = {
                                    		"filters": {
                                    			"type": "AND",
                                    			"filters": [{
                                    					"type": "EQ",
                                    					"fieldName": "kpiName",
                                    					"value": metricName
                                    				},
                                    				{
                                    					"type": "EQ",
                                    					"fieldName": "equipmentName",
                                    					"value": modelData.rows[i].modelName
                                    				}
                                    			]
                                    		}
                                    	};
                                    
                                    	let queryResult = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].SearchDataTableEntries({
                                    		query: query
                                    	});
                                    
                                    	let newEntry = {
                                    		equipmentName: modelData.rows[i].modelName,
                                    		equipmentType: queryResult.rows[0].equipmentType,
                                    		target: queryResult.rows[0].target,
                                    		timeframe: queryResult.rows[0].timePeriod,
                                    		hasChildren: modelData.rows[i].hasChildren,
                                    		parentName: modelData.rows[i].parentThingName
                                    	};
                                    	equipmentForAdmin.AddRow(newEntry);
                                    }
                                    
                                    let result = equipmentForAdmin;
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":-8,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":38}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":71,"lineNumber":3},"position":{"column":71,"lineNumber":3}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":55,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetEquipmentsTargetForAverage">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let equipmentForAdmin = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    	infoTableName: "InfoTable",
                                    	dataShapeName: "PTCSC.ReportingBlock.AdminEquipmentsForTargetAverage_DS"
                                    });
                                    let modelData;
                                    let model;
                                    
                                    if (equipmentName) {
                                    	let modelChild = Things["PTC.MfgModelImpl.Manager"].GetBusinessUnitEntityTreeChildrenForNode({
                                    		thingName: equipmentName
                                    	});
                                    	modelData = modelChild;
                                    } else {
                                    	modelRoot = Things["PTC.MfgModelImpl.Manager"].GetBusinessUnitEntityTreeRoot({
                                    		searchModelType: "Site"
                                    	});
                                    	modelData = modelRoot;
                                    	equipmentName = modelRoot.rows[0].modelName;
                                    }
                                    
                                    for (var i = 0; i < modelData.length; i++) {
                                    
                                    	var query = {
                                    		"filters": {
                                    			"type": "AND",
                                    			"filters": [{
                                    					"type": "EQ",
                                    					"fieldName": "kpiName",
                                    					"value": metricName
                                    				},
                                    				{
                                    					"type": "EQ",
                                    					"fieldName": "equipmentName",
                                    					"value": modelData.rows[i].modelName
                                    				}
                                    			]
                                    		}
                                    	};
                                    
                                    	let queryResult = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].SearchDataTableEntries({
                                    		query: query
                                    	});
                                    
                                    	let newEntry = {
                                    		equipmentName: modelData.rows[i].modelName,
                                    		equipmentType: queryResult.rows[0].equipmentType,
                                    		target: queryResult.rows[0].target,
                                    		inheritance: queryResult.rows[0].inheritance,
                                    		hasChildren: modelData.rows[i].hasChildren,
                                    		parentName: modelData.rows[i].parentThingName
                                    	};
                                    	equipmentForAdmin.AddRow(newEntry);
                                    }
                                    
                                    let result = equipmentForAdmin;
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":-2,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":29}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":48,"lineNumber":48},"position":{"column":48,"lineNumber":48}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":55,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetEquipmentTypeForTargetAverage">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = selectedRows.rows[0].equipmentType;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetEquipmentTypeForThresholdAverage">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = selectedRows.rows[0].equipmentType;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetFullBreadcrumb">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let defaultBreadcrumb = me.GetInitialBreadcrumb({
                                    	dasboardName: initialDashboardName
                                    });
                                    
                                    if (kpiName && kpiName!= "empty") {
                                    	let extraBreadcrumbRow = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    		infoTableName: "InfoTable",
                                    		dataShapeName: "PTCSC.ReportingBlock.Breadcrumb_DS"
                                    	});
                                    
                                    	let value = me.GetConfigurationTable({
                                    		tableName: "kpiNametoKpiFullName"
                                    	});
                                    
                                    	var query = {
                                    		"filters": {
                                    			"type": "Matches",
                                    			"fieldName": "kpiName",
                                    			"expression": kpiName
                                    		}
                                    	};
                                    
                                    	let params = {
                                    		t: value,
                                    		query: query
                                    	};
                                    
                                    	let queryRow = Resources["InfoTableFunctions"].Query(params);
                                    
                                    
                                    	let kpiFullName = queryRow.rows[0].kpiDisplayName;
                                    
                                    	let newEntry = {
                                    		TypeField: "Target Mashup",
                                    		DisplayField: kpiFullName,
                                    		MashupName: mashupTarget
                                    	};
                                    
                                    	defaultBreadcrumb.AddRow(newEntry);
                                        result = defaultBreadcrumb;
                                    } else {
                                    	result = defaultBreadcrumb;
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetFullDashboardBreadcrumb">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let defaultBreadcrumb = me.GetDashboardBreadcrumb({
                                    	breadcrumbName: breadcrumbName
                                    });
                                    if (collectionType == "Device") {
                                    	if (propertyName && propertyName != "empty") {
                                    		let extraBreadcrumbRow = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    			infoTableName: "InfoTable",
                                    			dataShapeName: "PTCSC.ReportingBlock.Breadcrumb_DS"
                                    		});
                                    
                                    		const userQuery = {
                                    			filters: {
                                    				type: "AND",
                                    				filters: [],
                                    			},
                                    		};
                                    		const filters = userQuery.filters.filters;
                                    		filters.push({
                                    			fieldName: "propertyName",
                                    			type: "EQ",
                                    			value: propertyName,
                                    		});
                                    		filters.push({
                                    			fieldName: "thingTemplateName",
                                    			type: "EQ",
                                    			value: thingTemplateName,
                                    		});
                                    		let deviceOverviewConfig = Things[
                                    			"PTCSC.ReportingBlock.DeviceOverviewConfig_DT"
                                    		].QueryDataTableEntries({
                                    			query: userQuery,
                                    		});
                                    
                                    		let newEntry = {
                                    			TypeField: "Target Mashup",
                                    			DisplayField: deviceOverviewConfig.rows[0].cardTitle,
                                    			MashupName: mashupTarget,
                                    		};
                                    
                                    		defaultBreadcrumb.AddRow(newEntry);
                                    		result = defaultBreadcrumb;
                                    	} else {
                                    		result = defaultBreadcrumb;
                                    	}
                                    } else {
                                    	if (propertyName && propertyName != "empty") {
                                    		var query = {
                                    			filters: {
                                    				fieldName: "metricName",
                                    				type: "EQ",
                                    				value: propertyName,
                                    			},
                                    		};
                                    		let deviceOverviewConfig = Things[
                                    			"PTCSC.ReportingBlock.MetricOverviewConfig_DT"
                                    		].QueryDataTableEntries({
                                    			query: query,
                                    		});
                                            
                                    		let newEntry = {
                                    			TypeField: "Target Mashup",
                                    			DisplayField: deviceOverviewConfig.rows[0].cardTitle,
                                    			MashupName: mashupTarget,
                                    		};
                                    
                                    		defaultBreadcrumb.AddRow(newEntry);
                                    		result = defaultBreadcrumb;
                                    	} else {
                                    		result = defaultBreadcrumb;
                                    	}
                                    }
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":-10,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":41}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":16,"lineNumber":57},"position":{"column":16,"lineNumber":57}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":71,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetFullMetricsBreadcrumb">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let defaultBreadcrumb = me.GetInitialMetricsBreadcrumb();
                                    
                                    if (kpiName && kpiName!= "empty") {
                                    	let extraBreadcrumbRow = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    		infoTableName: "InfoTable",
                                    		dataShapeName: "PTCSC.ReportingBlock.Breadcrumb_DS"
                                    	});
                                    
                                    	let value = me.GetConfigurationTable({
                                    		tableName: "kpiNametoKpiFullName"
                                    	});
                                    
                                    	var query = {
                                    		"filters": {
                                    			"type": "Matches",
                                    			"fieldName": "kpiName",
                                    			"expression": kpiName
                                    		}
                                    	};
                                    
                                    	let params = {
                                    		t: value,
                                    		query: query
                                    	};
                                    
                                    	let queryRow = Resources["InfoTableFunctions"].Query(params);
                                    
                                    
                                    	let kpiFullName = queryRow.rows[0].kpiDisplayName;
                                    
                                    	let newEntry = {
                                    		TypeField: "Target Mashup",
                                    		DisplayField: kpiFullName,
                                    		MashupName: mashupTarget
                                    	};
                                    
                                    	defaultBreadcrumb.AddRow(newEntry);
                                        result = defaultBreadcrumb;
                                    } else {
                                    	result = defaultBreadcrumb;
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetHierarchyCurrentLevel">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let configTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    	infoTableName: "InfoTable",
                                    	dataShapeName: "PTCSC.ReportingBlock.Configuration_DS"
                                    });
                                    
                                    let isDone = false;
                                    let modelLinks = addModelData([], equipmentUid);
                                    var j = 0;
                                    let currentModelUid = equipmentUid;
                                    while (!isDone) {
                                    	let parentModelLink = Things["PTC.ModelManagementImpl.Manager"].GetParentLink({
                                    		childUid: currentModelUid
                                    	});
                                    	if (parentModelLink && parentModelLink.rows.length > 0) {
                                    		parentModelLink.rows.toArray().forEach(row => {
                                    			addModelData(modelLinks, row.parentUid);
                                    			currentModelUid = row.parentUid;
                                    		});
                                    	} else {
                                    		isDone = true;
                                    	}
                                    }
                                    
                                    let reverseModel = modelLinks.reverse();
                                    
                                    
                                    for (var i = 0; i < reverseModel.length; i++) {
                                    
                                    	let newEntry = {
                                    		cardMashupName: "PTCSC.ReportingBlock.HierarchyCollectionCard_MU",
                                    		kpiName: kpiName,
                                    		dashboardIdentifier: generateGUID(),
                                    		equipmentName: reverseModel[i].name
                                    	};
                                    
                                    	configTable.AddRow(newEntry);
                                    }
                                    
                                    
                                    let result = configTable;
                                    
                                    function addModelData(modelLinks, modelUid) {
                                    	let modelData = Things["PTC.ModelManagementImpl.Manager"].GetModel({
                                    		uid: modelUid /* STRING */
                                    	});
                                    
                                    	if (modelData && modelData.rows.length > 0) {
                                    		modelLinks.push({
                                    			uid: modelUid,
                                    			name: modelData.rows[0].name
                                    		});
                                    	}
                                    	return modelLinks;
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetHierarchyDrillDownTree">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result;
                                    let poorOkGoodValues = ["Poor","OK","Good"];
                                    
                                    let hierarchyTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    	infoTableName: "InfoTable",
                                    	dataShapeName: "PTCSC.ReportingBlock.HierarchyBreakdown_DS"
                                    });
                                    if (modelName) {
                                    	let modelManagementManager = me.GetConfiguredManagerForIdentifier({
                                    		identifier: "PTC.MfgModel.Manager"
                                    	});
                                    
                                    	let allNetwork = Things[modelManagementManager].GetBusinessUnitEntityTreeRoot({
                                    		searchThingName: "workunit"
                                    	});
                                    
                                    	var query = {
                                    		"filters": {
                                    			"type": "Matches",
                                    			"fieldName": "parentThingName",
                                    			"expression": modelName
                                    		}
                                    	};
                                    
                                    	let params = {
                                    		t: allNetwork,
                                    		query: query
                                    	};
                                    
                                    	let allNetworkQueried = Resources["InfoTableFunctions"].Query(params);
                                    
                                    	for (var i = 0; i < allNetworkQueried.rows.length; i++) {
                                    		let targetValue = getTarget(kpiName, allNetworkQueried.rows[i].modelName);
                                    		let actualValue = Math.floor(Math.random() * targetValue);
                                    
                                    		let colorValue = me.GetStatusColor({
                                    			metricName: kpiName,
                                    			equipmentName: modelName,
                                    			actualValue: actualValue
                                    		});
                                    
                                    		let newEntry = {
                                    			modelName: allNetworkQueried.rows[i].modelName,
                                    			kpiName: kpiName,
                                    			modelTypeName: allNetworkQueried.rows[i].modelTypeName,
                                    			actual: actualValue,
                                    			target: targetValue,
                                    			improvement: Math.floor(Math.random() * 25),
                                    			poorOkGoodValue: poorOkGoodValues[Math.floor(Math.random() * 3)],
                                                arrowValue: Math.floor(Math.random() * 4)
                                    		};
                                    
                                    		hierarchyTable.AddRow(newEntry);
                                    	}
                                    
                                    	result = hierarchyTable;
                                    } else {
                                    	result = hierarchyTable;
                                    }
                                    
                                    function getTarget(metricName, equipmentName) {
                                    	var qForEquipment =
                                    	{
                                    		"filters": {
                                    			"type": "AND",
                                    			"filters": [
                                    				{
                                    					"type": "EQ",
                                    					"fieldName": "kpiName",
                                    					"value": metricName
                                    				},
                                    				{
                                    					"type": "EQ",
                                    					"fieldName": "equipmentName",
                                    					"value": equipmentName
                                    				}
                                    			]
                                    		}
                                    	};
                                    
                                    
                                    	let queryForEquipment = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].SearchDataTableEntries({
                                    		query: qForEquipment
                                    	});
                                    	logger.error(queryForEquipment.rows[0].target);
                                    	return queryForEquipment.rows[0].target;
                                    }
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":-4,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":7}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":75,"lineNumber":33},"position":{"column":75,"lineNumber":33}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":88,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetHierarchyTop">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let hierarchyDataShape = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    	infoTableName: "InfoTable",
                                    	dataShapeName: "PTCSC.ReportingBlock.HierarchyBreakdown_DS"
                                    });
                                    
                                    let dtEntries = Things["PTCSC.ReportingBlock.HierarcyBreakdown_DT"].GetDataTableEntries({});
                                    
                                    for (var i = 0; i < dtEntries.length; i++) {
                                    	let newEntry = {
                                    		modelName: dtEntries.rows[i].modelName,
                                    		kpiName: dtEntries.rows[i].kpiName,
                                    		modelTypeName: dtEntries.rows[i].modelTypeName,
                                    		actual: dtEntries.rows[i].actual,
                                    		target: dtEntries.rows[i].target,
                                    		improvement: dtEntries.rows[i].improvement,
                                    		poorOkGoodValue: dtEntries.rows[i].poorOkGoodValue,
                                            arrowValue: dtEntries.rows[i].arrowValue
                                    	};
                                    	hierarchyDataShape.AddRow(newEntry);
                                    }
                                    
                                    let result = hierarchyDataShape;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetHomeScreenMenu">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    // result: INFOTABLE dataShape: ""
                                    let result = Things["PTCSC.ReportingBlock.HomeScreenMenuConfig_DT"].GetDataTableEntries({
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetInheritanceStateForTargetAverage">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = selectedRows.rows[0].inheritance;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetInheritanceStateForThresholdAverage">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = selectedRows.rows[0].inheritance;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetInitialBreadcrumb">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let breadrcumbTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        infoTableName: "InfoTable",
                                        dataShapeName: "PTCSC.ReportingBlock.Breadcrumb_DS"
                                    });
                                    
                                    
                                    // PTCSC.ReportingBlock.Breadcrumb_DS entry object
                                    let newEntry = {
                                        TypeField: "Target Mashup", // STRING
                                        DisplayField: dasboardName + " Dashboard", // STRING
                                        MashupName: "PTCSC.ReportingBlock.Dashboard_MU"
                                    };
                                    
                                    breadrcumbTable.AddRow(newEntry);
                                    
                                    result = breadrcumbTable;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetInitialMetricsBreadcrumb">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let breadrcumbTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        infoTableName: "InfoTable",
                                        dataShapeName: "PTCSC.ReportingBlock.Breadcrumb_DS"
                                    });
                                    
                                    let newEntry = {
                                        TypeField: "Target Mashup", // STRING
                                        DisplayField: "All Metrics", // STRING
                                        MashupName: "PTCSC.ReportingBlock.MetricList_MU"
                                    };
                                    
                                    breadrcumbTable.AddRow(newEntry);
                                    
                                    result = breadrcumbTable;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetInitiativesForKpi">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var query = 
                                    {
                                        "filters": {
                                            "type": "Matches",
                                            "fieldName": "key",
                                            "expression": kpiName
                                        }
                                    };
                                    
                                    let dtEntry = Things["PTCSC.ReportingBlock.KpiManagerMapping"].QueryDataTableEntries({
                                    	query: query
                                    });
                                    
                                    let result = Things[dtEntry.thingName].getInitiativesForKpi();
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetInitiativesList">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let dateValue = new Date();
                                    var calculatedDateValue = dateAddDays(dateValue, 10);
                                    
                                    var statusName = ["In Progress", "At Risk", "Completed"];
                                    var eqName = ["AC-CellFab", "BOS-CellFab", "Center01"];
                                    var initNames = ["Repair Engine", "Repair Drill", "Change battery"];
                                    
                                    let initTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    	infoTableName: "InfoTable",
                                    	dataShapeName: "PTCSC.ReportingBlock.InitiativesListView_DS"
                                    });
                                    
                                    for (var i = 0; i < 3; i++) {
                                    
                                    	let newEntry = {
                                    		status: statusName[Math.floor(Math.random() * 3)],
                                    		initiativeName: initNames[Math.floor(Math.random() * 3)],
                                    		target: 50,
                                    		achieved: 25,
                                    		change: 25,
                                            metric: "Metric Name",
                                    		equipment: eqName[Math.floor(Math.random() * 3)],
                                    		startDate: dateValue,
                                    		endDate: calculatedDateValue
                                    	};
                                    
                                    	initTable.AddRow(newEntry);
                                    
                                    }
                                    let result = initTable;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetInitiativesTable">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    // initiatives table
                                    let dateValue = new Date();
                                    dateValue = dateAddDays(dateValue, -100);
                                    var statuses = ["In Progress", "At Risk", "Overdue", "Complete"];
                                    
                                    let sampleRows = 25;
                                    var data01 = { dataShape: { fieldDefinitions: {} }, rows: [] };
                                    
                                    data01.dataShape.fieldDefinitions['status'] = { name: 'status', baseType: 'STRING' };
                                    data01.dataShape.fieldDefinitions['initiativeName'] = { name: 'initiativeName', baseType: 'STRING' };
                                    data01.dataShape.fieldDefinitions['targetValue'] = { name: 'targetValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['achievedValue'] = { name: 'achievedValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['startDate'] = { name: 'startDate', baseType: 'DATETIME' };
                                    data01.dataShape.fieldDefinitions['endDate'] = { name: 'endDate', baseType: 'DATETIME' };
                                    
                                    var params01 = {
                                        json: data01 /* JSON */
                                    };
                                    
                                    var sampleChart = Resources["InfoTableFunctions"].FromJSON(params01);
                                    
                                    for (let i = 0; i < sampleRows; i++) {
                                    
                                        var newEntry = new Object();
                                        newEntry.status =statuses[(Math.floor(Math.random() * 4) + 0).toFixed()]; // STRING
                                        newEntry.initiativeName = "Name of Initiative" + Math.floor(Math.random() * 50) + 1; // NUMBER
                                        newEntry.targetValue = Math.floor(Math.random() * 83) + 1; // NUMBER
                                        newEntry.achievedValue = Math.floor(Math.random() * 50) + 1; // NUMBER
                                        newEntry.startDate = dateAddDays(dateValue, -(Math.floor(Math.random() * 100) + 1)); //DATETIME
                                        newEntry.endDate = dateAddDays(dateValue, -(Math.floor(Math.random() * 5) + 1)); //DATETIME
                                    
                                        sampleChart.AddRow(newEntry);
                                    }
                                    
                                    var initiativesTable = sampleChart;
                                    
                                    //normal card
                                    
                                    let cardSampleRows = 1;
                                    var data02 = { dataShape: { fieldDefinitions: {} }, rows: [] };
                                    
                                    data02.dataShape.fieldDefinitions['actualValue'] = { name: 'actualValue', baseType: 'NUMBER' };
                                    data02.dataShape.fieldDefinitions['targetValue'] = { name: 'targetValue', baseType: 'NUMBER' };
                                    data02.dataShape.fieldDefinitions['gainPercentageValue'] = { name: 'gainPercentageValue', baseType: 'NUMBER' };
                                    data02.dataShape.fieldDefinitions['infotableValues'] = { name: 'infotableValues', baseType: 'INFOTABLE' };
                                    data02.dataShape.fieldDefinitions['gridValues'] = { name: 'gridValues', baseType: 'INFOTABLE' };
                                    data02.dataShape.fieldDefinitions['timeframe'] = { name: 'timeframe', baseType: 'STRING' };
                                    data02.dataShape.fieldDefinitions['cardTitle'] = { name: 'cardTitle', baseType: 'STRING' };
                                    
                                    var params02 = {
                                        json: data02 
                                    };
                                    
                                    var cardSampleChart = Resources["InfoTableFunctions"].FromJSON(params02);
                                    
                                    let lineRows = 100;
                                    
                                    var data03 = { dataShape: { fieldDefinitions: {} }, rows: [] };
                                    
                                    data03.dataShape.fieldDefinitions['values1'] = { name: 'values1', baseType: 'NUMBER' };
                                    data03.dataShape.fieldDefinitions['values2'] = { name: 'values2', baseType: 'NUMBER' };
                                    data03.dataShape.fieldDefinitions['timestamp'] = { name: 'timestamp', baseType: 'DATETIME' };
                                    
                                    var params03 = {
                                        json: data03 
                                    }; 
                                    
                                    var lineChart = Resources["InfoTableFunctions"].FromJSON(params03);
                                    
                                    for (let i = 0; i < lineRows; i++) {
                                    
                                        var calculatedDateValue = dateAddDays(dateValue, i);
                                        var newEntry = new Object();
                                        newEntry.values1 = Math.floor(Math.random() * 23) + 1; // NUMBER
                                        newEntry.values2 = Math.floor(Math.random() * 50) + 1; // NUMBER
                                        newEntry.timestamp = calculatedDateValue; // DATETIME
                                    
                                        lineChart.AddRow(newEntry);
                                    }
                                    
                                    for (let i = 0; i < cardSampleRows; i++) {
                                    
                                        var newEntry = new Object();
                                        newEntry.actualValue = Math.floor(Math.random() * 23) + 1; // NUMBER
                                        newEntry.gainPercentageValue = Math.floor(Math.random() * 50) + 1; // NUMBER
                                        newEntry.timeframe = "Since last month"; // DATETIME
                                        newEntry.targetValue = Math.floor(Math.random() * 83) + 1; // NUMBER
                                        newEntry.gainPercentageValue = Math.floor(Math.random() * 50) + 1; // NUMBER
                                        newEntry.infotableValues = lineChart; //INFOTABLE
                                        newEntry.gridValues = initiativesTable; //INFOTABLE
                                        newEntry.cardTitle = "Initiatives";
                                    
                                        cardSampleChart.AddRow(newEntry);
                                    }
                                    
                                    var result = cardSampleChart;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetKpiFullNameForInitativesTable">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let value = me.GetConfigurationTable({
                                    	tableName: "kpiNametoKpiFullName"
                                    });
                                    
                                    var query = 
                                    {
                                        "filters": {
                                            "type": "Matches",
                                            "fieldName": "kpiName",
                                            "expression": kpiName
                                        }
                                    };
                                    
                                    
                                    let params = {
                                    	t: value,
                                    	query: query
                                    };
                                    
                                    let queryRow = Resources["InfoTableFunctions"].Query(params);
                                    
                                    
                                    let result = queryRow.rows[0].kpiDisplayName + " Initiatives";
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetKpiFullNameForTrendChart">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let value = me.GetConfigurationTable({
                                    	tableName: "kpiNametoKpiFullName"
                                    });
                                    
                                    var query = 
                                    {
                                        "filters": {
                                            "type": "Matches",
                                            "fieldName": "kpiName",
                                            "expression": kpiName
                                        }
                                    };
                                    
                                    
                                    let params = {
                                    	t: value,
                                    	query: query
                                    };
                                    
                                    let queryRow = Resources["InfoTableFunctions"].Query(params);
                                    
                                    
                                    let result = queryRow.rows[0].kpiDisplayName + " Trend";
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetMaterial">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    const configManager = me.GetConfiguredManagerForIdentifier({
                                    	identifier: "PTC.MaterialMaster.Manager"
                                    });
                                    
                                    const materialMasterManager = Things[configManager];
                                    
                                    let dropDownValues = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    	infoTableName: "InfoTable",
                                    	dataShapeName: "PTCSC.ReportingBlock.DropdownGeneric_DS"
                                    });
                                    
                                    let materials = materialMasterManager.GetMaterialMasters({});
                                    
                                    for (var i = 0; i < materials.length; i++) {
                                    	let newEntry = {
                                    		value: materials.rows[i].id
                                    	};
                                    
                                    	dropDownValues.AddRow(newEntry);
                                    }
                                    
                                    let result = dropDownValues;
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":1,"lineNumber":1},"position":{"column":1,"lineNumber":1}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":22,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetMetricDetailsForAdministrator">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        infoTableName: "InfoTable",
                                        dataShapeName: "PTCSC.ReportingBlock.AdministrationMetricDetails_DS"
                                    });
                                    
                                    let values = Things["PTCSC.ReportingBlock.AdministrationMetricDetails_DT"].CreateValues();
                                    values.metricName = metricName;
                                    
                                    let metricDetails = Things["PTCSC.ReportingBlock.AdministrationMetricDetails_DT"].GetDataTableEntry({
                                    	values: values
                                    });
                                    
                                    
                                    let newEntry = {
                                        metricName: metricDetails.rows[0].metricName, 
                                        metricDisplayName: metricDetails.rows[0].metricDisplayName,
                                        unitOfMeasure: metricDetails.rows[0].unitOfMeasure,
                                        rollUpBehavior: metricDetails.rows[0].rollUpBehavior,
                                        correlation: metricDetails.rows[0].correlation,
                                        description: metricDetails.rows[0].description,
                                        calculationFormula: metricDetails.rows[0].calculationFormula
                                    };
                                    
                                    result.AddRow(newEntry);
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":4}},"cursorState":[{"inSelectionMode":true,"selectionStart":{"column":46,"lineNumber":9},"position":{"column":76,"lineNumber":9}}],"contributionsState":{"editor.contrib.wordHighlighter":true,"editor.contrib.folding":{"provider":"indent","lineCount":24,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetMetricList">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let metricDetailsTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    	infoTableName: "InfoTable",
                                    	dataShapeName: "PTCSC.ReportingBlock.MetricsDetails_DS"
                                    });
                                    
                                    let numberOfDays;
                                    
                                    if (startDate && endDate) {
                                    	let diffTime = Math.abs(endDate - startDate);
                                    	let diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
                                    	numberOfDays = diffDays;
                                    } else {
                                    	numberOfDays = 1;
                                    }
                                    
                                    var query = {
                                    	"filters": {
                                    		"type": "Matches",
                                    		"fieldName": "isVisible",
                                    		"expression": true
                                    	}
                                    };
                                    
                                    let metricsInformationDataTable = Things["PTCSC.ReportingBlock.MetricsInformation"].SearchDataTableEntries({
                                    	query: query
                                    });
                                    
                                    for (var i = 0; i < metricsInformationDataTable.length; i++) {
                                      var metricName = metricsInformationDataTable.rows[i].kpiName;
                                      var actualValue = metricsInformationDataTable.rows[i].actual;
                                      //var realTarget = getTarget(metricName, equipmentName);
                                      //var rollupType = getRollupType(metricName, equipmentName);
                                      //let calculatedTarget = getCalculatedTarget(realTarget, numberOfDays, rollupType, metricName);
                                      //let fixedTarget = parseInt(calculatedTarget).toFixed();
                                    
                                      let newEntry = {
                                        kpiName: metricsInformationDataTable.rows[i].kpiName,
                                        kpiDisplayName: metricsInformationDataTable.rows[i].kpiDisplayName,
                                        kpiDescription: metricsInformationDataTable.rows[i].kpiDescription,
                                        status: "Good",
                                        actual: Math.floor(Math.random() * 50),
                                        target: Math.floor(Math.random() * 100),
                                        percentChange: metricsInformationDataTable.rows[i].percentChange,
                                        isAlerted: metricsInformationDataTable.rows[i].isAlerted,
                                        isVisible: metricsInformationDataTable.rows[i].isVisible,
                                        indexPosition: metricsInformationDataTable.rows[i].indexPosition,
                                        category: metricsInformationDataTable.rows[i].category,
                                        percentArrow: metricsInformationDataTable.rows[i].percentArrow,
                                      };
                                      metricDetailsTable.AddRow(newEntry);
                                      // me.SetMetricsInformation({
                                      //   metricName: metricName,
                                      //   actual: newEntry.actual,
                                      //   target: newEntry.target
                                      // });
                                    }
                                    
                                    let result = metricDetailsTable;
                                    
                                    function getTarget(metricName, equipmentName) {
                                      var qForEquipment = {
                                        filters: {
                                          type: "AND",
                                          filters: [
                                            {
                                              type: "EQ",
                                              fieldName: "kpiName",
                                              value: metricName,
                                            },
                                            {
                                              type: "EQ",
                                              fieldName: "equipmentName",
                                              value: equipmentName,
                                            },
                                          ],
                                        },
                                      };
                                    
                                      let queryForEquipment = Things[
                                        "PTCSC.ReportingBlock.TargetAndColorDefinition_DT"
                                      ].SearchDataTableEntries({
                                        query: qForEquipment,
                                      });
                                      return queryForEquipment.rows[0].target;
                                    }
                                    
                                    function getCalculatedTarget(target, numberOfDays, rollupType, metricName) {
                                      if (rollupType == "Average") {
                                        return target * numberOfDays;
                                      } else {
                                        let timePeriod = getTimePeriod(metricName, equipmentName);
                                        if (timePeriod == "Daily") {
                                          return target * numberOfDays;
                                        } else if (timePeriod == "Weekly") {
                                          return (target / 7) * numberOfDays;
                                        } else if (timePeriod == "Monthly") {
                                          return (target / 31) * numberOfDays;
                                        } else if (timePeriod == "Yearly") {
                                          return (target / 356) * numberOfDays;
                                        }
                                      }
                                    }
                                    
                                    function getTimePeriod(metricName, equipmentName) {
                                      var qForEquipment = {
                                        filters: {
                                          type: "AND",
                                          filters: [
                                            {
                                              type: "EQ",
                                              fieldName: "kpiName",
                                              value: metricName,
                                            },
                                            {
                                              type: "EQ",
                                              fieldName: "equipmentName",
                                              value: equipmentName,
                                            },
                                          ],
                                        },
                                      };
                                    
                                      let queryForEquipment = Things[
                                        "PTCSC.ReportingBlock.TargetAndColorDefinition_DT"
                                      ].SearchDataTableEntries({
                                        query: qForEquipment,
                                      });
                                      return queryForEquipment.rows[0].timePeriod;
                                    }
                                    
                                    function getRollupType(metricName) {
                                      var query = {
                                        filters: {
                                          type: "Matches",
                                          fieldName: "metricName",
                                          expression: metricName,
                                        },
                                      };
                                    
                                      let metricDetailsTable = Things[
                                        "PTCSC.ReportingBlock.AdministrationMetricDetails_DT"
                                      ].SearchDataTableEntries({
                                        query: query,
                                      });
                                    
                                      return metricDetailsTable.rows[0].rollUpBehavior;
                                    }
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":-12,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":19}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":18,"lineNumber":40},"position":{"column":18,"lineNumber":40}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":147,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetMetricListForAdministrator">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let metricDetailsTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    	infoTableName: "InfoTable",
                                    	dataShapeName: "PTCSC.ReportingBlock.MetricsDetails_DS"
                                    });
                                    var query;
                                    
                                    if(displayEnabled == "1") {
                                    	query = {
                                    		"filters": {
                                    			"type": "Matches",
                                    			"fieldName": "isVisible",
                                    			"expression": true
                                    		}
                                    	}; 
                                    } else {
                                    	query = {
                                    		"filters": {
                                    			"type": "Matches",
                                    			"fieldName": "isVisible",
                                    			"expression": false
                                    		}
                                    	}; 
                                    }
                                    
                                    let metricsInformationDataTable = Things["PTCSC.ReportingBlock.MetricsInformation"].SearchDataTableEntries({
                                    	query: query
                                    });
                                    
                                    for (var i = 0; i < metricsInformationDataTable.length; i++) {
                                    
                                    	var metricName = metricsInformationDataTable.rows[i].kpiName;
                                    	var actualValue = metricsInformationDataTable.rows[i].actual;
                                    
                                    	let newEntry = {
                                    		kpiName: metricsInformationDataTable.rows[i].kpiName,
                                    		kpiDisplayName: metricsInformationDataTable.rows[i].kpiDisplayName,
                                    		kpiDescription: metricsInformationDataTable.rows[i].kpiDescription,
                                    		isVisible: metricsInformationDataTable.rows[i].isVisible,
                                    		unitOfMeasure: getMetricUnitOfMeasure(metricName)
                                    	};
                                    
                                    	metricDetailsTable.AddRow(newEntry);
                                    
                                    }
                                    
                                    function getMetricUnitOfMeasure(metricName) {
                                    	var query = {
                                    		"filters": {
                                    			"type": "Matches",
                                    			"fieldName": "metricName",
                                    			"expression": metricName
                                    		}
                                    	};
                                    
                                    	let metricDetails = Things["PTCSC.ReportingBlock.AdministrationMetricDetails_DT"].SearchDataTableEntries({
                                    		query: query
                                    	});
                                    
                                    	return metricDetails.rows[0].unitOfMeasure;
                                    }
                                    
                                    
                                    let result = metricDetailsTable;
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":9,"lineNumber":15},"position":{"column":9,"lineNumber":15}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":63,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetOnTimeDelivery">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let dateValue = new Date();
                                    dateValue = dateAddDays(dateValue, -100);
                                    
                                    let sampleRows = 1;
                                    var data01 = { dataShape: { fieldDefinitions: {} }, rows: [] };
                                    
                                    data01.dataShape.fieldDefinitions['actualValue'] = { name: 'actualValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['targetValue'] = { name: 'targetValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['gainPercentageValue'] = { name: 'gainPercentageValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['infotableValues'] = { name: 'infotableValues', baseType: 'INFOTABLE' };
                                    data01.dataShape.fieldDefinitions['timeframe'] = { name: 'timeframe', baseType: 'STRING' };
                                    data01.dataShape.fieldDefinitions['cardTitle'] = { name: 'cardTitle', baseType: 'STRING' };
                                    data01.dataShape.fieldDefinitions['progressValue'] = { name: 'progressValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['isAlerted'] = { name: 'isAlerted', baseType: 'BOOLEAN' };
                                    
                                    var params01 = {
                                        json: data01 /* JSON */
                                    };
                                    
                                    var sampleChart = Resources["InfoTableFunctions"].FromJSON(params01);
                                    
                                    let lineRows = 100;
                                    
                                    var data02 = { dataShape: { fieldDefinitions: {} }, rows: [] };
                                    
                                    data02.dataShape.fieldDefinitions['values1'] = { name: 'values1', baseType: 'NUMBER' };
                                    data02.dataShape.fieldDefinitions['values2'] = { name: 'values2', baseType: 'NUMBER' };
                                    data02.dataShape.fieldDefinitions['timestamp'] = { name: 'timestamp', baseType: 'DATETIME' };
                                    
                                    var params02 = {
                                        json: data02 /* JSON */
                                    }; 
                                    
                                    var lineChart = Resources["InfoTableFunctions"].FromJSON(params02);
                                    
                                    for (let i = 0; i < lineRows; i++) {
                                    
                                        var calculatedDateValue = dateAddDays(dateValue, i);
                                        var newEntry = new Object();
                                        newEntry.values1 = Math.floor(Math.random() * 23) + 1; // NUMBER
                                        newEntry.values2 = Math.floor(Math.random() * 50) + 1; // NUMBER
                                        newEntry.timestamp = calculatedDateValue; // DATETIME
                                    
                                        lineChart.AddRow(newEntry);
                                    }
                                    
                                    for (let i = 0; i < sampleRows; i++) {
                                    
                                        var newEntry = new Object();
                                        newEntry.actualValue = Math.floor(Math.random() * 23) + 1; // NUMBER
                                        newEntry.gainPercentageValue = Math.floor(Math.random() * 50) + 1; // NUMBER
                                        newEntry.timeframe = "Since last month"; // DATETIME
                                        newEntry.targetValue = Math.floor(Math.random() * 83) + 1; // NUMBER
                                        newEntry.gainPercentageValue = Math.floor(Math.random() * 50) + 1; // NUMBER
                                        newEntry.infotableValues = lineChart; //INFOTABLE
                                        newEntry.cardTitle = "On Time Delivery (%)";
                                        newEntry.progressValue = Math.floor(Math.random() * 100) + 1; // NUMBER
                                    	newEntry.isAlerted = Math.random() < 0.5; // NUMBER
                                    
                                        sampleChart.AddRow(newEntry);
                                    }
                                    
                                    var result = sampleChart;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetOrganizationsForFilter">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                      infoTableName: "InfoTable",
                                      dataShapeName: "PTCSC.ReportingBlock.OrganizationTree_DS",
                                    });
                                    
                                    let table = me.GetConfigurationTable({
                                      tableName: "DeviceFiltersConfig",
                                    });
                                    
                                    deviceFiltersManager = table.rows[0].deviceFiltersManager;
                                    organizationServiceDevice = table.rows[0].organizationService;
                                    
                                    result = Things[deviceFiltersManager][organizationServiceDevice]();
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":59,"lineNumber":3},"position":{"column":59,"lineNumber":3}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":14,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetOvertime">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let dateValue = new Date();
                                    dateValue = dateAddDays(dateValue, -100);
                                    
                                    let sampleRows = 1;
                                    var data01 = { dataShape: { fieldDefinitions: {} }, rows: [] };
                                    
                                    data01.dataShape.fieldDefinitions['actualValue'] = { name: 'actualValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['targetValue'] = { name: 'targetValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['gainPercentageValue'] = { name: 'gainPercentageValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['infotableValues'] = { name: 'infotableValues', baseType: 'INFOTABLE' };
                                    data01.dataShape.fieldDefinitions['timeframe'] = { name: 'timeframe', baseType: 'STRING' };
                                    data01.dataShape.fieldDefinitions['cardTitle'] = { name: 'cardTitle', baseType: 'STRING' };
                                    data01.dataShape.fieldDefinitions['progressValue'] = { name: 'progressValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['isAlerted'] = { name: 'isAlerted', baseType: 'BOOLEAN' };
                                    
                                    var params01 = {
                                        json: data01 /* JSON */
                                    };
                                    
                                    var sampleChart = Resources["InfoTableFunctions"].FromJSON(params01);
                                    
                                    let lineRows = 100;
                                    
                                    var data02 = { dataShape: { fieldDefinitions: {} }, rows: [] };
                                    
                                    data02.dataShape.fieldDefinitions['values1'] = { name: 'values1', baseType: 'NUMBER' };
                                    data02.dataShape.fieldDefinitions['values2'] = { name: 'values2', baseType: 'NUMBER' };
                                    data02.dataShape.fieldDefinitions['timestamp'] = { name: 'timestamp', baseType: 'DATETIME' };
                                    
                                    var params02 = {
                                        json: data02 /* JSON */
                                    }; 
                                    
                                    var lineChart = Resources["InfoTableFunctions"].FromJSON(params02);
                                    
                                    for (let i = 0; i < lineRows; i++) {
                                    
                                        var calculatedDateValue = dateAddDays(dateValue, i);
                                        var newEntry = new Object();
                                        newEntry.values1 = Math.floor(Math.random() * 23) + 1; // NUMBER
                                        newEntry.values2 = Math.floor(Math.random() * 50) + 1; // NUMBER
                                        newEntry.timestamp = calculatedDateValue; // DATETIME
                                    
                                        lineChart.AddRow(newEntry);
                                    }
                                    
                                    for (let i = 0; i < sampleRows; i++) {
                                    
                                        var newEntry = new Object();
                                        newEntry.actualValue = Math.floor(Math.random() * 23) + 1; // NUMBER
                                        newEntry.gainPercentageValue = Math.floor(Math.random() * 50) + 1; // NUMBER
                                        newEntry.timeframe = "Since last month"; // DATETIME
                                        newEntry.targetValue = Math.floor(Math.random() * 83) + 1; // NUMBER
                                        newEntry.gainPercentageValue = Math.floor(Math.random() * 50) + 1; // NUMBER
                                        newEntry.infotableValues = lineChart; //INFOTABLE
                                        newEntry.cardTitle = "Overtime (hr)";
                                        newEntry.progressValue = Math.floor(Math.random() * 100) + 1; // NUMBER
                                    	newEntry.isAlerted = Math.random() < 0.5; // NUMBER
                                    
                                        sampleChart.AddRow(newEntry);
                                    }
                                    
                                    var result = sampleChart;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetPlannedProductionOEE">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let dateValue = new Date();
                                    dateValue = dateAddDays(dateValue, -100);
                                    
                                    let sampleRows = 1;
                                    var data01 = { dataShape: { fieldDefinitions: {} }, rows: [] };
                                    
                                    data01.dataShape.fieldDefinitions['actualValue'] = { name: 'actualValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['targetValue'] = { name: 'targetValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['gainPercentageValue'] = { name: 'gainPercentageValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['infotableValues'] = { name: 'infotableValues', baseType: 'INFOTABLE' };
                                    data01.dataShape.fieldDefinitions['timeframe'] = { name: 'timeframe', baseType: 'STRING' };
                                    data01.dataShape.fieldDefinitions['cardTitle'] = { name: 'cardTitle', baseType: 'STRING' };
                                    data01.dataShape.fieldDefinitions['progressValue'] = { name: 'progressValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['isAlerted'] = { name: 'isAlerted', baseType: 'BOOLEAN' };
                                    
                                    var params01 = {
                                        json: data01 /* JSON */
                                    };
                                    
                                    var sampleChart = Resources["InfoTableFunctions"].FromJSON(params01);
                                    
                                    let lineRows = 100;
                                    
                                    var data02 = { dataShape: { fieldDefinitions: {} }, rows: [] };
                                    
                                    data02.dataShape.fieldDefinitions['values1'] = { name: 'values1', baseType: 'NUMBER' };
                                    data02.dataShape.fieldDefinitions['values2'] = { name: 'values2', baseType: 'NUMBER' };
                                    data02.dataShape.fieldDefinitions['timestamp'] = { name: 'timestamp', baseType: 'DATETIME' };
                                    
                                    var params02 = {
                                        json: data02 /* JSON */
                                    }; 
                                    
                                    var lineChart = Resources["InfoTableFunctions"].FromJSON(params02);
                                    
                                    for (let i = 0; i < lineRows; i++) {
                                    
                                        var calculatedDateValue = dateAddDays(dateValue, i);
                                        var newEntry = new Object();
                                        newEntry.values1 = Math.floor(Math.random() * 23) + 1; // NUMBER
                                        newEntry.values2 = Math.floor(Math.random() * 50) + 1; // NUMBER
                                        newEntry.timestamp = calculatedDateValue; // DATETIME
                                    
                                        lineChart.AddRow(newEntry);
                                    }
                                    
                                    for (let i = 0; i < sampleRows; i++) {
                                    
                                        var newEntry = new Object();
                                        newEntry.actualValue = Math.floor(Math.random() * 23) + 1; // NUMBER
                                        newEntry.gainPercentageValue = Math.floor(Math.random() * 50) + 1; // NUMBER
                                        newEntry.timeframe = "Since last month"; // DATETIME
                                        newEntry.targetValue = Math.floor(Math.random() * 83) + 1; // NUMBER
                                        newEntry.gainPercentageValue = Math.floor(Math.random() * 50) + 1; // NUMBER
                                        newEntry.infotableValues = lineChart; //INFOTABLE
                                        newEntry.cardTitle = "Planned Production OEE (%)";
                                        newEntry.progressValue = Math.floor(Math.random() * 100) + 1; // NUMBER
                                    	newEntry.isAlerted = Math.random() < 0.5; // NUMBER
                                    
                                        sampleChart.AddRow(newEntry);
                                    }
                                    
                                    var result = sampleChart;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetScrapRate">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let dateValue = new Date();
                                    dateValue = dateAddDays(dateValue, -100);
                                    
                                    let sampleRows = 1;
                                    var data01 = { dataShape: { fieldDefinitions: {} }, rows: [] };
                                    
                                    data01.dataShape.fieldDefinitions['actualValue'] = { name: 'actualValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['targetValue'] = { name: 'targetValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['gainPercentageValue'] = { name: 'gainPercentageValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['infotableValues'] = { name: 'infotableValues', baseType: 'INFOTABLE' };
                                    data01.dataShape.fieldDefinitions['timeframe'] = { name: 'timeframe', baseType: 'STRING' };
                                    data01.dataShape.fieldDefinitions['cardTitle'] = { name: 'cardTitle', baseType: 'STRING' };
                                    data01.dataShape.fieldDefinitions['progressValue'] = { name: 'progressValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['isAlerted'] = { name: 'isAlerted', baseType: 'BOOLEAN' };
                                    
                                    var params01 = {
                                        json: data01 /* JSON */
                                    };
                                    
                                    var sampleChart = Resources["InfoTableFunctions"].FromJSON(params01);
                                    
                                    let lineRows = 100;
                                    
                                    var data02 = { dataShape: { fieldDefinitions: {} }, rows: [] };
                                    
                                    data02.dataShape.fieldDefinitions['values1'] = { name: 'values1', baseType: 'NUMBER' };
                                    data02.dataShape.fieldDefinitions['values2'] = { name: 'values2', baseType: 'NUMBER' };
                                    data02.dataShape.fieldDefinitions['timestamp'] = { name: 'timestamp', baseType: 'DATETIME' };
                                    
                                    var params02 = {
                                        json: data02 /* JSON */
                                    }; 
                                    
                                    var lineChart = Resources["InfoTableFunctions"].FromJSON(params02);
                                    
                                    for (let i = 0; i < lineRows; i++) {
                                    
                                        var calculatedDateValue = dateAddDays(dateValue, i);
                                        var newEntry = new Object();
                                        newEntry.values1 = Math.floor(Math.random() * 23) + 1; // NUMBER
                                        newEntry.values2 = Math.floor(Math.random() * 50) + 1; // NUMBER
                                        newEntry.timestamp = calculatedDateValue; // DATETIME
                                    
                                        lineChart.AddRow(newEntry);
                                    }
                                    
                                    for (let i = 0; i < sampleRows; i++) {
                                    
                                        var newEntry = new Object();
                                        newEntry.actualValue = Math.floor(Math.random() * 23) + 1; // NUMBER
                                        newEntry.gainPercentageValue = Math.floor(Math.random() * 50) + 1; // NUMBER
                                        newEntry.timeframe = "Since last month"; // DATETIME
                                        newEntry.targetValue = Math.floor(Math.random() * 83) + 1; // NUMBER
                                        newEntry.gainPercentageValue = Math.floor(Math.random() * 50) + 1; // NUMBER
                                        newEntry.infotableValues = lineChart; //INFOTABLE
                                        newEntry.cardTitle = "Scrap Rate (%)";
                                        newEntry.progressValue = Math.floor(Math.random() * 100) + 1; // NUMBER
                                    	newEntry.isAlerted = Math.random() < 0.5; // NUMBER
                                    
                                        sampleChart.AddRow(newEntry);
                                    }
                                    
                                    var result = sampleChart;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetShiftManager">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    // result: THINGNAME
                                    let result = me.GetConfiguredManagerForIdentifier({
                                    	identifier: "PTC.Shift.Manager" /* STRING */
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetShiftName">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = selectedRows.rows[0].name;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetShifts">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    const configManager = me.GetConfiguredManagerForIdentifier({
                                    	identifier: "PTC.Shift.Manager"
                                    });
                                    
                                    const shiftManager = Things[configManager];
                                    
                                    
                                    let dropDownValues = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    	infoTableName: "InfoTable",
                                    	dataShapeName: "PTCSC.ReportingBlock.DropdownGeneric_DS"
                                    });
                                    
                                    let shifts = shiftManager.GetShifts({});
                                    
                                    for (var i = 0; i < shifts.length; i++) {
                                    	let newEntry = {
                                    		value: shifts.rows[i].name
                                    	};
                                    
                                    	dropDownValues.AddRow(newEntry);
                                    }
                                    
                                    let result = dropDownValues;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetShiftsByShiftSchedule">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    const configManager = me.GetConfiguredManagerForIdentifier({
                                    	identifier: "PTC.Shift.Manager"
                                    });
                                    
                                    let shiftsByShiftSchedule = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    	infoTableName: "InfoTable",
                                    	dataShapeName: "PTCSC.ReportingBlock.ShiftPopup_DS"
                                    });
                                    
                                    
                                    let shiftScheduled = Things[configManager].GetShiftsByShiftSchedule({
                                    	shiftScheduleUid: shiftScheduleUid
                                    });
                                    
                                    for (var i = 0; i < shiftScheduled.length; i++) {
                                    	parentName = Things[configManager].GetShiftSchedule({
                                    		uid: shiftScheduleUid
                                    	});
                                    
                                    	let newEntry = {
                                    		shiftUid: shiftScheduled.rows[i].uid,
                                    		shiftName: shiftScheduled.rows[i].name,
                                    		hasChildren: false,
                                    		parentName: parentName.name
                                    	};
                                    	shiftsByShiftSchedule.AddRow(newEntry);
                                    }
                                    
                                    let result = shiftsByShiftSchedule;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetShiftSchedule">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let shiftSchedules;
                                    try {
                                    	shiftSchedules = GetShiftSchedulesWithNumberOfShifts();
                                    } catch (err) {
                                    	logger.error("Thing [{}] Service [{}] error is:- {} at line:- {} ", me.name, err.fileName, err, err.lineNumber);
                                    	throw localize("PTC.Base.ErrorMessage");
                                    }
                                    
                                    let shiftSchedule = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    	infoTableName: "InfoTable",
                                    	dataShapeName: "PTCSC.ReportingBlock.ShiftPopup_DS"
                                    });
                                    
                                    for (var i = 0; i < shiftSchedules.length; i++) {
                                    
                                    	let newEntry = {
                                    		shiftUid: shiftSchedules.rows[i].uid,
                                    		shiftName: shiftSchedules.rows[i].name,
                                    		hasChildren: true
                                    	};
                                    	shiftSchedule.AddRow(newEntry);
                                    }
                                    
                                    let result = shiftSchedule;
                                    
                                    
                                    function GetShiftSchedulesWithNumberOfShifts() {
                                    	let shiftsManager = me.GetShiftManager();
                                    	result = DataShapes["PTC.AdminConfiguration.ShiftSchedulesWithNumberOfShifts"].CreateValues();
                                    	let datashape = "PTC.AdminConfiguration.ShiftSchedulesWithNumberOfShifts";
                                    	let isAscending = true;
                                    	let sortFieldName = "name";
                                    	let filter = {
                                    		"select": [{
                                    				"dataShapeName": "PTC.Shift.Shift",
                                    				"fieldName": "shiftScheduleUid",
                                    				"as": "nos",
                                    				"function": "COUNT"
                                    			},
                                    			{
                                    				"dataShapeName": "PTC.Shift.ShiftSchedule",
                                    				"fieldName": "name",
                                    				"as": "Name"
                                    			},
                                    			{
                                    				"dataShapeName": "PTC.Shift.ShiftSchedule",
                                    				"fieldName": "uid",
                                    				"as": "ID"
                                    			},
                                    			{
                                    				"dataShapeName": "PTC.MfgModel.Site",
                                    				"fieldName": "id",
                                    				"as": "sName"
                                    			},
                                    			{
                                    				"dataShapeName": "PTC.Shift.Shift",
                                    				"fieldName": "startTime",
                                    				"as": "stime",
                                    				"function": "MIN"
                                    			},
                                    			{
                                    				"dataShapeName": "PTC.Shift.ShiftSchedule",
                                    				"fieldName": "description",
                                    				"as": "des"
                                    			},
                                    		],
                                    		"joins": [{
                                    				"type": "FULL",
                                    				"sourceDataShapeName": "PTC.Shift.Shift",
                                    				"sourceFieldName": "shiftScheduleUid",
                                    				"targetDataShapeName": "PTC.Shift.ShiftSchedule",
                                    				"targetFieldName": "uid"
                                    			},
                                    			{
                                    				"type": "FULL",
                                    				"sourceDataShapeName": "PTC.Shift.ShiftSchedule",
                                    				"sourceFieldName": "siteUid",
                                    				"targetDataShapeName": "PTC.MfgModel.Site",
                                    				"targetFieldName": "uid"
                                    			}
                                    		],
                                    		"groupBy": [{
                                    				"dataShapeName": "PTC.Shift.ShiftSchedule",
                                    				"fieldName": "uid"
                                    			},
                                    			{
                                    				"dataShapeName": "PTC.Shift.ShiftSchedule",
                                    				"fieldName": "name"
                                    			},
                                    			{
                                    				"dataShapeName": "PTC.MfgModel.Site",
                                    				"fieldName": "id"
                                    			},
                                    			{
                                    				"dataShapeName": "PTC.Shift.ShiftSchedule",
                                    				"fieldName": "description"
                                    			}
                                    		],
                                    		"sorts": [{
                                    			"dataShapeName": "PTC.Shift.ShiftSchedule",
                                    			"fieldName": "name",
                                    			"isAscending": isAscending
                                    		}]
                                    	};
                                    
                                    	var summaryResult = Things[shiftsManager].GetShifts({
                                    		filter: filter
                                    	});
                                    
                                    	summaryResult.rows.toArray().forEach(row => {
                                    		result.AddRow({
                                    			uid: row.ID,
                                    			name: row.Name,
                                    			noOfShifts: row.nos,
                                    			starttime: row.stime,
                                    			sites: row.sName,
                                    			description: row.des
                                    		});
                                    	});
                                    	return result;
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetShiftsForTreeView">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let dsForResult = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        infoTableName: "InfoTable",
                                        dataShapeName: "PTCSC.ReportingBlock.ShiftsStructureForTreeGrid_DS"
                                    });
                                    
                                    let parents = me.GetShiftSchedule();
                                    
                                    for (var i = 0; i < parents.length; i++) {
                                    	if (id) {
                                    		let shiftsFromSchedule = me.GetShiftsByShiftSchedule({
                                    			shiftScheduleUid: id
                                    		});
                                    		let newEntry = {
                                    			parentId: id,
                                    			shiftUid: shiftsFromSchedule.rows[i].shiftUid,
                                    			name: shiftsFromSchedule.rows[i].shiftName,
                                    			hasChildren: 0
                                    		};
                                    		dsForResult.AddRow(newEntry);
                                    	} else {
                                    		let newEntry = {
                                    			parentId: "/",
                                    			shiftUid: parents.rows[i].shiftUid,
                                    			name: parents.rows[i].shiftName,
                                    			hasChildren: 1
                                    		};
                                    		dsForResult.AddRow(newEntry);
                                    	}
                                    }
                                    
                                    let result = dsForResult;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetStatus">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var statuses = ["Good", "Ok", "Poor"];
                                    
                                    let dropDownValues = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    	infoTableName: "InfoTable",
                                    	dataShapeName: "PTCSC.ReportingBlock.DropdownGeneric_DS"
                                    });
                                    
                                    for (var i = 0; i < statuses.length; i++) {
                                    	let newEntry = {
                                    		value: statuses[i]
                                    	};
                                    	dropDownValues.AddRow(newEntry);
                                    }
                                    
                                    let result = dropDownValues;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetStatusColor">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result;
                                    var correlationValue;
                                    
                                    var poorValue;
                                    var okValue;
                                    var goodValue;
                                    
                                    var isValueSmaller;
                                    
                                    var receivedValue = parseInt(actualValue);
                                    
                                    var qForEquipment =
                                    {
                                        "filters": {
                                            "type": "AND",
                                            "filters": [
                                                {
                                                    "type": "EQ",
                                                    "fieldName": "kpiName",
                                                    "value": metricName
                                                },
                                                {
                                                    "type": "EQ",
                                                    "fieldName": "equipmentName",
                                                    "value": equipmentName
                                                }
                                            ]
                                        }
                                    };
                                    
                                    let queryForEquipment = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].SearchDataTableEntries({
                                        query: qForEquipment
                                    });
                                    
                                    poorValue = parseInt(queryForEquipment.rows[0].poor);
                                    okValue = parseInt(queryForEquipment.rows[0].ok);
                                    goodValue = parseInt(queryForEquipment.rows[0].good);
                                    
                                    var query =
                                    {
                                        "filters": {
                                            "type": "Matches",
                                            "fieldName": "metricName",
                                            "expression": metricName
                                        }
                                    };
                                    
                                    let queryForAdminMetricDetails = Things["PTCSC.ReportingBlock.AdministrationMetricDetails_DT"].SearchDataTableEntries({
                                        query: query
                                    });
                                    
                                    correlationValue = queryForAdminMetricDetails.rows[0].correlation;
                                    
                                    if(correlationValue == "Positive") {
                                        if (receivedValue < okValue) {
                                            result =  "Poor";
                                        } else if (receivedValue > goodValue) {
                                            result = "Good";
                                        } else {
                                            result = "OK";
                                        }
                                    } else {
                                        if (receivedValue < goodValue) {
                                            result = "Good";
                                        } else if (receivedValue < okValue ) {
                                            result = "OK";
                                        } else {
                                            result = "Poor";
                                        }
                                    }
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":1,"lineNumber":53},"position":{"column":1,"lineNumber":53}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":70,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetThroughput">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let dateValue = new Date();
                                    dateValue = dateAddDays(dateValue, -100);
                                    
                                    let sampleRows = 1;
                                    var data01 = { dataShape: { fieldDefinitions: {} }, rows: [] };
                                    
                                    data01.dataShape.fieldDefinitions['actualValue'] = { name: 'actualValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['targetValue'] = { name: 'targetValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['gainPercentageValue'] = { name: 'gainPercentageValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['infotableValues'] = { name: 'infotableValues', baseType: 'INFOTABLE' };
                                    data01.dataShape.fieldDefinitions['timeframe'] = { name: 'timeframe', baseType: 'STRING' };
                                    data01.dataShape.fieldDefinitions['cardTitle'] = { name: 'cardTitle', baseType: 'STRING' };
                                    data01.dataShape.fieldDefinitions['progressValue'] = { name: 'progressValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['isAlerted'] = { name: 'isAlerted', baseType: 'BOOLEAN' };
                                    
                                    var params01 = {
                                        json: data01 /* JSON */
                                    };
                                    
                                    var sampleChart = Resources["InfoTableFunctions"].FromJSON(params01);
                                    
                                    let lineRows = 100;
                                    
                                    var data02 = { dataShape: { fieldDefinitions: {} }, rows: [] };
                                    
                                    data02.dataShape.fieldDefinitions['values1'] = { name: 'values1', baseType: 'NUMBER' };
                                    data02.dataShape.fieldDefinitions['values2'] = { name: 'values2', baseType: 'NUMBER' };
                                    data02.dataShape.fieldDefinitions['timestamp'] = { name: 'timestamp', baseType: 'DATETIME' };
                                    
                                    var params02 = {
                                        json: data02 /* JSON */
                                    }; 
                                    
                                    var lineChart = Resources["InfoTableFunctions"].FromJSON(params02);
                                    
                                    for (let i = 0; i < lineRows; i++) {
                                    
                                        var calculatedDateValue = dateAddDays(dateValue, i);
                                        var newEntry = new Object();
                                        newEntry.values1 = Math.floor(Math.random() * 23) + 1; // NUMBER
                                        newEntry.values2 = Math.floor(Math.random() * 50) + 1; // NUMBER
                                        newEntry.timestamp = calculatedDateValue; // DATETIME
                                    
                                        lineChart.AddRow(newEntry);
                                    }
                                    
                                    for (let i = 0; i < sampleRows; i++) {
                                    
                                        var newEntry = new Object();
                                        newEntry.actualValue = Math.floor(Math.random() * 23) + 1; // NUMBER
                                        newEntry.gainPercentageValue = Math.floor(Math.random() * 50) + 1; // NUMBER
                                        newEntry.timeframe = "Since last month"; // DATETIME
                                        newEntry.targetValue = Math.floor(Math.random() * 83) + 1; // NUMBER
                                        newEntry.gainPercentageValue = Math.floor(Math.random() * 50) + 1; // NUMBER
                                        newEntry.infotableValues = lineChart; //INFOTABLE
                                        newEntry.cardTitle = "Throughput (pph)";
                                        newEntry.progressValue = Math.floor(Math.random() * 100) + 1; // NUMBER
                                    	newEntry.isAlerted = Math.random() < 0.5; // NUMBER
                                    
                                        sampleChart.AddRow(newEntry);
                                    }
                                    
                                    var result = sampleChart;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetTimeframe">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let timeframe = ["Daily", "Weekly", "Monthly", "Yearly"];
                                    
                                    let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        infoTableName: "InfoTable",
                                        dataShapeName: "PTCSC.ReportingBlock.DropdownGeneric_DS"
                                    });
                                    
                                    
                                    for(var i = 0; i<timeframe.length; i++) {
                                        let newEntry = {
                                            value: timeframe[i]
                                        };
                                        result.AddRow(newEntry);
                                    }
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":1,"lineNumber":15},"position":{"column":1,"lineNumber":15}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":15,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetToolbarConfigurationForCardDetails">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var toolbarData = {
                                    
                                        infoTableName: "InfoTable",
                                        dataShapeName : "ToolbarAction"
                                    
                                    };
                                    
                                    var toolbarData = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(toolbarData);
                                    
                                    // Toggle Button Action
                                    toolbarData.AddRow({
                                        actionId: "T1",
                                        actionType: "toggle",
                                        actionLabel: "Overview",
                                        actionTooltip: "Overview",
                                        actionDisabled: false,
                                        actionVisible: true,
                                        toggleChipIcon: true,
                                        toggleState: true,
                                        toggleLabelPosition: 'right',
                                        actionMaxWidth: 160
                                    });
                                    
                                    // Toggle Button Action
                                    toolbarData.AddRow({
                                        actionId: "T2",
                                        actionType: "toggle",
                                        actionLabel: "Hierarchy Breakdown",
                                        actionTooltip: "Hierarchy Breakdown",
                                        actionDisabled: false,
                                        actionVisible: true,
                                        toggleChipIcon: true,
                                        toggleState: false,
                                        toggleLabelPosition: 'right',
                                        actionMaxWidth: 210
                                    });
                                    
                                    // Button Action
                                    toolbarData.AddRow({
                                        actionId: "B1",
                                        actionType: "button",
                                        actionLabel: "Export",
                                        actionTooltip: "Export",
                                        actionDisabled: false,
                                        actionVisible: true,
                                        buttonType: "transparent",
                                        buttonIcon: "PTCSC.ReportingBlock.Export_MD",
                                        actionMaxWidth: 140,
                                        alignRight: false
                                    });
                                    
                                    // Dropdown Action
                                    toolbarData.AddRow({
                                        actionId: "DD2",
                                        actionType: "dropdown",
                                        actionLabel: "",
                                        actionTooltip: "Sort Status by:",
                                        actionDisabled: false,
                                        actionVisible: true,
                                        dropdownLabelPosition: "left",
                                        dropdownData: [{label:"Default", value: "1"}, {label:"Poor first", value: "2"}, {label:"Good first", value: "3"}],
                                        dropdownSelectedText: "1",
                                        actionMaxWidth: 300,
                                        alignRight: true
                                    });
                                    
                                    // Button Action
                                    toolbarData.AddRow({
                                        actionId: "B2",
                                        actionType: "button",
                                        actionLabel: "Expand View",
                                        actionTooltip: "Expand View",
                                        actionDisabled: false,
                                        actionVisible: true,
                                        buttonType: "primary",
                                        buttonIcon: "",
                                        actionMaxWidth: 140,
                                        alignRight: true
                                    });
                                    
                                    result=toolbarData;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetToolbarConfigurationForCardOverviewInitiatives">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var toolbarData = {
                                    
                                        infoTableName: "InfoTable",
                                        dataShapeName : "ToolbarAction"
                                    
                                    };
                                    
                                    var toolbarData = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(toolbarData);
                                    
                                    // Button Action
                                    toolbarData.AddRow({
                                        actionId: "B1",
                                        actionType: "button",
                                        actionLabel: "Go to Action Tracker",
                                        actionTooltip: "Go to Action Tracker",
                                        actionDisabled: false,
                                        actionVisible: true,
                                        buttonType: "transparent",
                                        buttonIcon: "PTCSC.ReportingBlock.Trending_MD",
                                        actionMaxWidth: 250,
                                        alignRight: false
                                    });
                                    
                                    // Button Action
                                    toolbarData.AddRow({
                                        actionId: "B2",
                                        actionType: "button",
                                        actionLabel: "Go to Initiatives Details",
                                        actionTooltip: "Go to Initiatives Details",
                                        actionDisabled: false,
                                        actionVisible: true,
                                        buttonType: "transparent",
                                        buttonIcon: "PTCSC.ReportingBlock.Trending_MD",
                                        actionMaxWidth: 250,
                                        alignRight: false
                                    });
                                    
                                    result=toolbarData;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetToolbarConfigurationForDashboard">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var toolbarData = {
                                    
                                        infoTableName: "InfoTable",
                                        dataShapeName : "ToolbarAction"
                                    
                                    };
                                    
                                    var toolbarData = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(toolbarData);
                                    
                                    //// Button Action
                                    //toolbarData.AddRow({
                                    //
                                    //    actionId: "B1",
                                    //    actionType: "button",
                                    //    actionLabel: "Save View",
                                    //    actionTooltip: "Save View",
                                    //    buttonIcon: "PTCSC.ReportingBlock.Favorite_MD",
                                    //    actionDisabled: false,
                                    //    actionVisible: true,
                                    //    buttonType: "transparent",
                                    //    actionMaxWidth: 140,
                                    //    alignRight: false,
                                    //
                                    //});
                                    //
                                    //// Button Action
                                    //toolbarData.AddRow({
                                    //    actionId: "B2",
                                    //    actionType: "button",
                                    //    actionLabel: "Export",
                                    //    actionTooltip: "Export",
                                    //    actionDisabled: false,
                                    //    actionVisible: true,
                                    //    buttonType: "transparent",
                                    //    buttonIcon: "PTCSC.ReportingBlock.Export_MD",
                                    //    actionMaxWidth: 140,
                                    //    alignRight: false
                                    //});
                                    //
                                    //// Button Action
                                    //toolbarData.AddRow({
                                    //    actionId: "B3",
                                    //    actionType: "button",
                                    //    actionLabel: "Delete",
                                    //    actionTooltip: "Delete",
                                    //    actionDisabled: false,
                                    //    actionVisible: true,
                                    //    buttonType: "transparent",
                                    //    buttonIcon: "PTCSC.ReportingBlock.Delete_MD",
                                    //    actionMaxWidth: 140,
                                    //    alignRight: false
                                    //});
                                    
                                    // Button Action
                                    toolbarData.AddRow({
                                    
                                        actionId: "ViewDetails",
                                        actionType: "button",
                                        actionLabel: "View Details",
                                        actionTooltip: "View Details",
                                        buttonIcon: "PTCSC.ReportingBlock.View_MD",
                                        actionDisabled: false,
                                        actionVisible: true,
                                        buttonType: "transparent",
                                        actionMaxWidth: 200,
                                        alignRight: false,
                                    
                                    });
                                    
                                    // Toggle Button Action
                                    toolbarData.AddRow({
                                        actionId: "T1",
                                        actionType: "toggle",
                                        actionLabel: "Dashboard View",
                                        actionTooltip: "Metrics View",
                                        actionDisabled: false,
                                        actionVisible: true,
                                        toggleChipIcon: true,
                                        toggleState: true,
                                        toggleLabelPosition: 'right',
                                        actionMaxWidth: 160
                                    });
                                    
                                    // Toggle Button Action
                                    toolbarData.AddRow({
                                        actionId: "T2",
                                        actionType: "toggle",
                                        actionLabel: "Table View",
                                        actionTooltip: "Table View",
                                        actionDisabled: false,
                                        actionVisible: true,
                                        toggleChipIcon: true,
                                        toggleState: false,
                                        toggleLabelPosition: 'right',
                                        actionMaxWidth: 160
                                    });
                                    
                                    // Dropdown Action
                                    toolbarData.AddRow({
                                        actionId: "DD1",
                                        actionType: "dropdown",
                                        actionLabel: "",
                                        actionTooltip: "Select View",
                                        actionDisabled: false,
                                        actionVisible: true,
                                        dropdownLabelPosition: "left",
                                        dropdownData: [{label:"Device View", value: "Device"}, {label:"Metrics View", value: "Metrics"}],
                                        dropdownSelectedText: "",
                                        actionMaxWidth: 220,
                                        alignRight: true
                                    });
                                    
                                    result=toolbarData;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetToolbarConfigurationForInitiativesList">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var toolbarData = {
                                    
                                        infoTableName: "InfoTable",
                                        dataShapeName : "ToolbarAction"
                                    
                                    };
                                    
                                    var toolbarData = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(toolbarData);
                                    
                                    // Button Action
                                    toolbarData.AddRow({
                                    
                                        actionId: "ViewDetails",
                                        actionType: "button",
                                        actionLabel: "View Details",
                                        actionTooltip: "View Details",
                                        buttonIcon: "PTCSC.ReportingBlock.View_MD",
                                        actionDisabled: false,
                                        actionVisible: true,
                                        buttonType: "transparent",
                                        actionMaxWidth: 200,
                                        alignRight: false,
                                    
                                    });
                                    
                                    // Button Action
                                    toolbarData.AddRow({
                                        actionId: "Export",
                                        actionType: "button",
                                        actionLabel: "Export",
                                        actionTooltip: "Export",
                                        actionDisabled: false,
                                        actionVisible: true,
                                        buttonType: "transparent",
                                        buttonIcon: "PTCSC.ReportingBlock.Export_MD",
                                        actionMaxWidth: 200,
                                        alignRight: false
                                    });
                                    
                                    // Button Action
                                    toolbarData.AddRow({
                                        actionId: "GoToActionTracker",
                                        actionType: "button",
                                        actionLabel: "Go to Action Tracker",
                                        actionTooltip: "Go to Action Tracker",
                                        actionDisabled: false,
                                        actionVisible: true,
                                        buttonType: "transparent",
                                        buttonIcon: "PTCSC.ReportingBlock.Trending_MD",
                                        actionMaxWidth: 230,
                                        alignRight: false
                                    });
                                    
                                    
                                    result=toolbarData;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetToolbarConfigurationForMetricAdmin">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var toolbarData = {
                                    
                                        infoTableName: "InfoTable",
                                        dataShapeName : "ToolbarAction"
                                    
                                    };
                                    
                                    var toolbarData = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(toolbarData);
                                    
                                    // Button Action
                                    toolbarData.AddRow({
                                    
                                        actionId: "ViewDetails",
                                        actionType: "button",
                                        actionLabel: "View",
                                        actionTooltip: "View",
                                        buttonIcon: "PTCSC.ReportingBlock.View_MD",
                                        actionDisabled: false,
                                        actionVisible: true,
                                        buttonType: "transparent",
                                        actionMaxWidth: 200,
                                        alignRight: false,
                                    
                                    });
                                    
                                    // Button Action
                                    toolbarData.AddRow({
                                    
                                        actionId: "Enable",
                                        actionType: "button",
                                        actionLabel: "Enable",
                                        actionTooltip: "Enable",
                                        buttonIcon: "",
                                        actionDisabled: false,
                                        actionVisible: true,
                                        buttonType: "transparent",
                                        actionMaxWidth: 200,
                                        alignRight: false,
                                    
                                    });
                                    
                                    // Button Action
                                    toolbarData.AddRow({
                                    
                                        actionId: "Disable",
                                        actionType: "button",
                                        actionLabel: "Disable",
                                        actionTooltip: "Disable",
                                        buttonIcon: "",
                                        actionDisabled: false,
                                        actionVisible: true,
                                        buttonType: "transparent",
                                        actionMaxWidth: 200,
                                        alignRight: false,
                                    
                                    });
                                    
                                    // Dropdown Action
                                    toolbarData.AddRow({
                                        actionId: "DD1",
                                        actionType: "dropdown",
                                        actionLabel: "",
                                        actionTooltip: "Show Enabled/Disabled",
                                        actionDisabled: false,
                                        actionVisible: true,
                                        dropdownLabelPosition: "left",
                                        dropdownData: [{label:"Enabled", value: "1"}, {label:"Disabled", value: "2"}],
                                        dropdownSelectedText: "1",
                                        actionMaxWidth: 320,
                                        alignRight: true
                                    });
                                    
                                    // Button Action
                                    //toolbarData.AddRow({
                                    //
                                    //    actionId: "EditList",
                                    //    actionType: "button",
                                    //    actionLabel: "Edit List",
                                    //    actionTooltip: "Edit List",
                                    //    buttonIcon: "PTCSC.ReportingBlock.EditIcon_MD",
                                    //    actionDisabled: false,
                                    //    actionVisible: true,
                                    //    buttonType: "transparent",
                                    //    actionMaxWidth: 200,
                                    //    alignRight: false,
                                    //
                                    //});
                                    
                                    result=toolbarData;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetToolbarConfigurationForMetricAdminColorDefinition">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var toolbarData = {
                                    
                                        infoTableName: "InfoTable",
                                        dataShapeName : "ToolbarAction"
                                    
                                    };
                                    
                                    var toolbarData = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(toolbarData);
                                    
                                    // Button Action
                                    toolbarData.AddRow({
                                    
                                        actionId: "SetThreshold",
                                        actionType: "button",
                                        actionLabel: "Set Threshold",
                                        actionTooltip: "Set Threshold",
                                        buttonIcon: "",
                                        actionDisabled: true,
                                        actionVisible: true,
                                        buttonType: "transparent",
                                        actionMaxWidth: 200,
                                        alignRight: false,
                                    
                                    });
                                    
                                    // Button Action
                                    toolbarData.AddRow({
                                    
                                        actionId: "EnableInheritance",
                                        actionType: "button",
                                        actionLabel: "Enable Inheritance",
                                        actionTooltip: "Enable Inheritance",
                                        buttonIcon: "",
                                        actionDisabled: true,
                                        actionVisible: true,
                                        buttonType: "transparent",
                                        actionMaxWidth: 200,
                                        alignRight: false,
                                    
                                    });
                                    
                                    // Button Action
                                    toolbarData.AddRow({
                                    
                                        actionId: "DisableInheritance",
                                        actionType: "button",
                                        actionLabel: "Disable Inheritance",
                                        actionTooltip: "Disable Inheritance",
                                        buttonIcon: "",
                                        actionDisabled: true,
                                        actionVisible: true,
                                        buttonType: "transparent",
                                        actionMaxWidth: 200,
                                        alignRight: false,
                                    
                                    });
                                    
                                    result=toolbarData;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetToolbarConfigurationForMetricAdminTargetDefinition">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var toolbarData = {
                                    
                                        infoTableName: "InfoTable",
                                        dataShapeName : "ToolbarAction"
                                    
                                    };
                                    
                                    var toolbarData = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(toolbarData);
                                    
                                    // Button Action
                                    toolbarData.AddRow({
                                    
                                        actionId: "SetTarget",
                                        actionType: "button",
                                        actionLabel: "Set Target",
                                        actionTooltip: "Set Target",
                                        buttonIcon: "",
                                        actionDisabled: true,
                                        actionVisible: true,
                                        buttonType: "transparent",
                                        actionMaxWidth: 200,
                                        alignRight: false,
                                    
                                    });
                                    
                                    // Button Action
                                    toolbarData.AddRow({
                                    
                                        actionId: "EnableInheritance",
                                        actionType: "button",
                                        actionLabel: "Enable Inheritance",
                                        actionTooltip: "Enable Inheritance",
                                        buttonIcon: "",
                                        actionDisabled: true,
                                        actionVisible: true,
                                        buttonType: "transparent",
                                        actionMaxWidth: 200,
                                        alignRight: false,
                                    
                                    });
                                    
                                    // Button Action
                                    toolbarData.AddRow({
                                    
                                        actionId: "DisableInheritance",
                                        actionType: "button",
                                        actionLabel: "Disable Inheritance",
                                        actionTooltip: "Disable Inheritance",
                                        buttonIcon: "",
                                        actionDisabled: true,
                                        actionVisible: true,
                                        buttonType: "transparent",
                                        actionMaxWidth: 200,
                                        alignRight: false,
                                    
                                    });
                                    
                                    result=toolbarData;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetToolbarConfigurationForMetricList">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var toolbarData = {
                                    
                                        infoTableName: "InfoTable",
                                        dataShapeName : "ToolbarAction"
                                    
                                    };
                                    
                                    var toolbarData = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(toolbarData);
                                    
                                    // Toggle Button Action
                                    toolbarData.AddRow({
                                        actionId: "T1",
                                        actionType: "toggle",
                                        actionLabel: "Show Average Week",
                                        actionTooltip: "Show Average Week",
                                        actionDisabled: false,
                                        actionVisible: true,
                                        toggleChipIcon: true,
                                        toggleState: false,
                                        toggleLabelPosition: 'right',
                                        actionMaxWidth: 200
                                    });
                                    
                                    // Button Action
                                    toolbarData.AddRow({
                                    
                                        actionId: "ViewDetails",
                                        actionType: "button",
                                        actionLabel: "View Metric",
                                        actionTooltip: "View Metric",
                                        buttonIcon: "PTCSC.ReportingBlock.View_MD",
                                        actionDisabled: false,
                                        actionVisible: true,
                                        buttonType: "transparent",
                                        actionMaxWidth: 200,
                                        alignRight: false,
                                    
                                    });
                                    
                                    // Button Action
                                    //toolbarData.AddRow({
                                    //    actionId: "Export",
                                    //    actionType: "button",
                                    //    actionLabel: "Export",
                                    //    actionTooltip: "Export",
                                    //    actionDisabled: false,
                                    //    actionVisible: true,
                                    //    buttonType: "transparent",
                                    //    buttonIcon: "PTCSC.ReportingBlock.Export_MD",
                                    //    actionMaxWidth: 200,
                                    //    alignRight: false
                                    //});
                                    
                                    // Button Action
                                    toolbarData.AddRow({
                                        actionId: "GoToAnalysis",
                                        actionType: "button",
                                        actionLabel: "Go to Analysis",
                                        actionTooltip: "Go to Analysis",
                                        actionDisabled: false,
                                        actionVisible: true,
                                        buttonType: "transparent",
                                        buttonIcon: "PTCSC.ReportingBlock.Analysis_MD",
                                        actionMaxWidth: 230,
                                        alignRight: false
                                    });
                                    
                                    result=toolbarData;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetTotalAvailableOEE">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let dateValue = new Date();
                                    dateValue = dateAddDays(dateValue, -100);
                                    
                                    let sampleRows = 1;
                                    var data01 = { dataShape: { fieldDefinitions: {} }, rows: [] };
                                    
                                    data01.dataShape.fieldDefinitions['actualValue'] = { name: 'actualValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['targetValue'] = { name: 'targetValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['gainPercentageValue'] = { name: 'gainPercentageValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['infotableValues'] = { name: 'infotableValues', baseType: 'INFOTABLE' };
                                    data01.dataShape.fieldDefinitions['timeframe'] = { name: 'timeframe', baseType: 'STRING' };
                                    data01.dataShape.fieldDefinitions['cardTitle'] = { name: 'cardTitle', baseType: 'STRING' };
                                    data01.dataShape.fieldDefinitions['progressValue'] = { name: 'progressValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['isAlerted'] = { name: 'isAlerted', baseType: 'BOOLEAN' };
                                    
                                    var params01 = {
                                        json: data01 /* JSON */
                                    };
                                    
                                    var sampleChart = Resources["InfoTableFunctions"].FromJSON(params01);
                                    
                                    let lineRows = 100;
                                    
                                    var data02 = { dataShape: { fieldDefinitions: {} }, rows: [] };
                                    
                                    data02.dataShape.fieldDefinitions['values1'] = { name: 'values1', baseType: 'NUMBER' };
                                    data02.dataShape.fieldDefinitions['values2'] = { name: 'values2', baseType: 'NUMBER' };
                                    data02.dataShape.fieldDefinitions['timestamp'] = { name: 'timestamp', baseType: 'DATETIME' };
                                    
                                    var params02 = {
                                        json: data02 /* JSON */
                                    }; 
                                    
                                    var lineChart = Resources["InfoTableFunctions"].FromJSON(params02);
                                    
                                    for (let i = 0; i < lineRows; i++) {
                                    
                                        var calculatedDateValue = dateAddDays(dateValue, i);
                                        var newEntry = new Object();
                                        newEntry.values1 = Math.floor(Math.random() * 23) + 1; // NUMBER
                                        newEntry.values2 = Math.floor(Math.random() * 50) + 1; // NUMBER
                                        newEntry.timestamp = calculatedDateValue; // DATETIME
                                    
                                        lineChart.AddRow(newEntry);
                                    }
                                    
                                    for (let i = 0; i < sampleRows; i++) {
                                    
                                        var newEntry = new Object();
                                        newEntry.actualValue = Math.floor(Math.random() * 23) + 1; // NUMBER
                                        newEntry.gainPercentageValue = Math.floor(Math.random() * 50) + 1; // NUMBER
                                        newEntry.timeframe = "Since last month"; // DATETIME
                                        newEntry.targetValue = Math.floor(Math.random() * 83) + 1; // NUMBER
                                        newEntry.gainPercentageValue = Math.floor(Math.random() * 50) + 1; // NUMBER
                                        newEntry.infotableValues = lineChart; //INFOTABLE
                                        newEntry.cardTitle = "Total Available OEE (%)";
                                        newEntry.progressValue = Math.floor(Math.random() * 100) + 1; // NUMBER
                                    	newEntry.isAlerted = Math.random() < 0.5; // NUMBER
                                    
                                        sampleChart.AddRow(newEntry);
                                    }
                                    
                                    var result = sampleChart;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetTotalLossHours">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let dateValue = new Date();
                                    dateValue = dateAddDays(dateValue, -100);
                                    
                                    let sampleRows = 1;
                                    var data01 = { dataShape: { fieldDefinitions: {} }, rows: [] };
                                    
                                    data01.dataShape.fieldDefinitions['actualValue'] = { name: 'actualValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['targetValue'] = { name: 'targetValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['gainPercentageValue'] = { name: 'gainPercentageValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['infotableValues'] = { name: 'infotableValues', baseType: 'INFOTABLE' };
                                    data01.dataShape.fieldDefinitions['timeframe'] = { name: 'timeframe', baseType: 'STRING' };
                                    data01.dataShape.fieldDefinitions['cardTitle'] = { name: 'cardTitle', baseType: 'STRING' };
                                    data01.dataShape.fieldDefinitions['progressValue'] = { name: 'progressValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['isAlerted'] = { name: 'isAlerted', baseType: 'BOOLEAN' };
                                    
                                    var params01 = {
                                        json: data01 /* JSON */
                                    };
                                    
                                    var sampleChart = Resources["InfoTableFunctions"].FromJSON(params01);
                                    
                                    let lineRows = 100;
                                    
                                    var data02 = { dataShape: { fieldDefinitions: {} }, rows: [] };
                                    
                                    data02.dataShape.fieldDefinitions['values1'] = { name: 'values1', baseType: 'NUMBER' };
                                    data02.dataShape.fieldDefinitions['values2'] = { name: 'values2', baseType: 'NUMBER' };
                                    data02.dataShape.fieldDefinitions['timestamp'] = { name: 'timestamp', baseType: 'DATETIME' };
                                    
                                    var params02 = {
                                        json: data02 /* JSON */
                                    }; 
                                    
                                    var lineChart = Resources["InfoTableFunctions"].FromJSON(params02);
                                    
                                    for (let i = 0; i < lineRows; i++) {
                                    
                                        var calculatedDateValue = dateAddDays(dateValue, i);
                                        var newEntry = new Object();
                                        newEntry.values1 = Math.floor(Math.random() * 23) + 1; // NUMBER
                                        newEntry.values2 = Math.floor(Math.random() * 50) + 1; // NUMBER
                                        newEntry.timestamp = calculatedDateValue; // DATETIME
                                    
                                        lineChart.AddRow(newEntry);
                                    }
                                    
                                    for (let i = 0; i < sampleRows; i++) {
                                    
                                        var newEntry = new Object();
                                        newEntry.actualValue = Math.floor(Math.random() * 23) + 1; // NUMBER
                                        newEntry.gainPercentageValue = Math.floor(Math.random() * 50) + 1; // NUMBER
                                        newEntry.timeframe = "Since last month"; // DATETIME
                                        newEntry.targetValue = Math.floor(Math.random() * 83) + 1; // NUMBER
                                        newEntry.gainPercentageValue = Math.floor(Math.random() * 50) + 1; // NUMBER
                                        newEntry.infotableValues = lineChart; //INFOTABLE
                                        newEntry.cardTitle = "Total Loss Hours (hr)";
                                        newEntry.progressValue = Math.floor(Math.random() * 100) + 1; // NUMBER
                                    	newEntry.isAlerted = Math.random() < 0.5; // NUMBER
                                    
                                        sampleChart.AddRow(newEntry);
                                    }
                                    
                                    var result = sampleChart;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetTotalTime">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let dateValue = new Date();
                                    dateValue = dateAddDays(dateValue, -100);
                                    
                                    let sampleRows = 1;
                                    var data01 = { dataShape: { fieldDefinitions: {} }, rows: [] };
                                    
                                    data01.dataShape.fieldDefinitions['actualValue'] = { name: 'actualValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['targetValue'] = { name: 'targetValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['gainPercentageValue'] = { name: 'gainPercentageValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['infotableValues'] = { name: 'infotableValues', baseType: 'INFOTABLE' };
                                    data01.dataShape.fieldDefinitions['timeframe'] = { name: 'timeframe', baseType: 'STRING' };
                                    data01.dataShape.fieldDefinitions['cardTitle'] = { name: 'cardTitle', baseType: 'STRING' };
                                    data01.dataShape.fieldDefinitions['progressValue'] = { name: 'progressValue', baseType: 'NUMBER' };
                                    data01.dataShape.fieldDefinitions['isAlerted'] = { name: 'isAlerted', baseType: 'BOOLEAN' };
                                    
                                    var params01 = {
                                        json: data01 /* JSON */
                                    };
                                    
                                    var sampleChart = Resources["InfoTableFunctions"].FromJSON(params01);
                                    
                                    let lineRows = 100;
                                    
                                    var data02 = { dataShape: { fieldDefinitions: {} }, rows: [] };
                                    
                                    data02.dataShape.fieldDefinitions['values1'] = { name: 'values1', baseType: 'NUMBER' };
                                    data02.dataShape.fieldDefinitions['values2'] = { name: 'values2', baseType: 'NUMBER' };
                                    data02.dataShape.fieldDefinitions['timestamp'] = { name: 'timestamp', baseType: 'DATETIME' };
                                    
                                    var params02 = {
                                        json: data02 /* JSON */
                                    }; 
                                    
                                    var lineChart = Resources["InfoTableFunctions"].FromJSON(params02);
                                    
                                    for (let i = 0; i < lineRows; i++) {
                                    
                                        var calculatedDateValue = dateAddDays(dateValue, i);
                                        var newEntry = new Object();
                                        newEntry.values1 = Math.floor(Math.random() * 23) + 1; // NUMBER
                                        newEntry.values2 = Math.floor(Math.random() * 50) + 1; // NUMBER
                                        newEntry.timestamp = calculatedDateValue; // DATETIME
                                    
                                        lineChart.AddRow(newEntry);
                                    }
                                    
                                    for (let i = 0; i < sampleRows; i++) {
                                    
                                        var newEntry = new Object();
                                        newEntry.actualValue = Math.floor(Math.random() * 23) + 1; // NUMBER
                                        newEntry.gainPercentageValue = Math.floor(Math.random() * 50) + 1; // NUMBER
                                        newEntry.timeframe = "Since last month"; // DATETIME
                                        newEntry.targetValue = Math.floor(Math.random() * 83) + 1; // NUMBER
                                        newEntry.gainPercentageValue = Math.floor(Math.random() * 50) + 1; // NUMBER
                                        newEntry.infotableValues = lineChart; //INFOTABLE
                                        newEntry.cardTitle = "Total Time (hr)";
                                        newEntry.progressValue = Math.floor(Math.random() * 100) + 1; // NUMBER
                                    	newEntry.isAlerted = Math.random() < 0.5; // NUMBER
                                    
                                        sampleChart.AddRow(newEntry);
                                    }
                                    
                                    var result = sampleChart;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetTotalTimeForMainScreen">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    	infoTableName: "InfoTable",
                                    	dataShapeName: "PTCSC.ReportingBlock.TotalTimeMainScreen"
                                    });
                                    let metrics = Things["PTCSC.ReportingBlock.MetricsInformation"].GetDataTableEntries();
                                    let totalActual = 0;
                                    var numberOfDays;
                                    if (startDate && endDate) {
                                    	let diffTime = Math.abs(endDate - startDate);
                                    	let diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
                                    	numberOfDays = diffDays;
                                    } else {
                                    	numberOfDays = 30;
                                    }
                                    for (var i = 0; i < metrics.length; i++) {
                                    	totalActual += metrics.rows[i].actual;
                                    }
                                    let newEntry = {
                                    	totalTimeValue: totalActual * numberOfDays,
                                    	numberOfDays: numberOfDays,
                                    };
                                    result.AddRow(newEntry);
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":40,"lineNumber":17},"position":{"column":40,"lineNumber":17}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":18,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetTrendDataForKpi">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var query = 
                                    {
                                        "filters": {
                                            "type": "Matches",
                                            "fieldName": "key",
                                            "expression": kpiName
                                        }
                                    };
                                    
                                    let dtEntry = Things["PTCSC.ReportingBlock.KpiManagerMapping"].QueryDataTableEntries({
                                    	query: query
                                    });
                                    
                                    let result = Things[dtEntry.thingName].getTrend();
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="PopulateMetricsForAdministrator">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let kpiMappingTable = Things["PTCSC.ReportingBlock.KpiManagerMapping"].GetDataTableEntries();
                                    let metricName;
                                    for (var i = 0; i < kpiMappingTable.length; i++) {
                                        let thingName = kpiMappingTable.rows[i].thingName;
                                        metricName = kpiMappingTable.rows[i].kpiName;
                                    
                                        Things[thingName].GenerateAdministrationInformation({
                                            metricName: metricName,
                                            metricDisplayName: getMetricName(metricName)
                                        });
                                    
                                    }
                                    
                                    function getMetricName(kpiName) {
                                        let value = me.GetConfigurationTable({
                                            tableName: "kpiNametoKpiFullName"
                                        });
                                        var query = {
                                            "filters": {
                                                "type": "Matches",
                                                "fieldName": "kpiName",
                                                "expression": kpiName
                                            }
                                        };
                                        let params = {
                                            t: value,
                                            query: query
                                        };
                                    
                                        let queryRow = Resources["InfoTableFunctions"].Query(params);
                                    
                                        let kpiFullName = queryRow.rows[0].kpiDisplayName;
                                        return kpiFullName;
                                    }
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":1,"lineNumber":13},"position":{"column":1,"lineNumber":13}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":34,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="PopulateMetricsInformation">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let metricTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    	infoTableName: "InfoTable",
                                    	dataShapeName: "PTCSC.ReportingBlock.MetricsDetails_DS"
                                    });
                                    
                                    let kpiMappingTable = Things["PTCSC.ReportingBlock.KpiManagerMapping"].QueryDataTableEntries({});
                                    
                                    for (var i = 0; i < kpiMappingTable.length; i++) {
                                    	let thingName = kpiMappingTable.rows[i].thingName;
                                    	let kpiName = kpiMappingTable.rows[i].kpiName;
                                    
                                    	let values = Things["PTCSC.ReportingBlock.MetricsInformation"].CreateValues();
                                    	values.kpiName = kpiName;
                                    	values.kpiDisplayName = getMetricName(kpiName);
                                    	values.kpiDescription = "Kpi Description";
                                    	values.status = "Good";
                                    	values.target = Things[thingName].CalculateTarget();
                                    	values.actual = Things[thingName].CalculateActual();
                                    	values.percentChange = Things[thingName].CalculatePercentChange() + "%";
                                    	values.isAlerted = 0;
                                    	values.isVisible = 1;
                                    	values.indexPosition = i;
                                    	values.category = "";
                                        values.percentArrow = Things[thingName].CalculatePercentArrowChange();
                                    
                                    	let id = Things["PTCSC.ReportingBlock.MetricsInformation"].AddOrUpdateDataTableEntry({
                                    		values: values
                                    	});
                                    }
                                    
                                    function getMetricName(kpiName) {
                                    	let value = me.GetConfigurationTable({
                                    		tableName: "kpiNametoKpiFullName"
                                    	});
                                    	var query = {
                                    		"filters": {
                                    			"type": "Matches",
                                    			"fieldName": "kpiName",
                                    			"expression": kpiName
                                    		}
                                    	};
                                    	let params = {
                                    		t: value,
                                    		query: query
                                    	};
                                    
                                    	let queryRow = Resources["InfoTableFunctions"].Query(params);
                                    
                                    	let kpiFullName = queryRow.rows[0].kpiDisplayName;
                                    	return kpiFullName;
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="RemoveFromTopHierarchy">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let hValues = me.GetHierarchyTop();
                                    let hasValueBeenFound = false;
                                    let hValuesLength = hValues.length - 1;
                                    
                                    while (!hasValueBeenFound) {
                                    	if (hValues.rows[hValuesLength].modelName == modelName) {
                                            removeHierarchyEntry(modelName);
                                    		hasValueBeenFound = true;
                                    	} else {
                                            removeHierarchyEntry(modelName);
                                    		hValuesLength--;
                                    	}
                                    }
                                    
                                    function removeHierarchyEntry(modelName) {
                                    	let values = Things["PTCSC.ReportingBlock.HierarcyBreakdown_DT"].CreateValues();
                                    	values.modelName = hValues.rows[hValuesLength].modelName;
                                    	let id = Things["PTCSC.ReportingBlock.HierarcyBreakdown_DT"].DeleteDataTableEntry({
                                    		values: values
                                    	});
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="RemoveFromTopHierarchyWhenAddingExistingModelType">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let hValues = me.TestReturnHierarchyTop();
                                    let hasValueBeenFound = false;
                                    let hValuesLength = hValues.length - 1;
                                    
                                    while (!hasValueBeenFound) {
                                    	if (hValues.rows[hValuesLength].modelTypeName == modelTypeName) {
                                            removeHierarchyEntry(hValues.rows[hValuesLength].modelName);
                                    		hasValueBeenFound = true;
                                    	} else {
                                            removeHierarchyEntry(hValues.rows[hValuesLength].modelName);
                                    		hValuesLength--;
                                    	}
                                    }
                                    
                                    function removeHierarchyEntry(modelName) {
                                    	let values = Things["PTCSC.ReportingBlock.HierarcyBreakdown_DT"].CreateValues();
                                    	values.modelName = hValues.rows[hValuesLength].modelName;
                                    	let id = Things["PTCSC.ReportingBlock.HierarcyBreakdown_DT"].DeleteDataTableEntry({
                                    		values: values
                                    	});
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="RemoveOrAddMetricFromList">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let kpiMappingTable = Things["PTCSC.ReportingBlock.MetricsInformation"].QueryDataTableEntries({});
                                    
                                    var query = {
                                    	"filters": {
                                    		"type": "Matches",
                                    		"fieldName": "key",
                                    		"expression": metricName
                                    	}
                                    };
                                    
                                    let kpiFromTable = Things["PTCSC.ReportingBlock.MetricsInformation"].SearchDataTableEntries({
                                    	query: query
                                    });
                                    
                                    let values = Things["PTCSC.ReportingBlock.MetricsInformation"].CreateValues();
                                    values.kpiName = metricName;
                                    values.isVisible = !kpiFromTable.isVisible;
                                    
                                    let id = Things["PTCSC.ReportingBlock.MetricsInformation"].AddOrUpdateDataTableEntry({
                                    	values: values
                                    });
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="SearchCollection">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                      var result;
                                      const userQuery = {
                                        filters: {
                                          type: "OR",
                                          filters: [],
                                        },
                                      };
                                      const filters = userQuery.filters.filters;
                                      if (searchTerm) {
                                        filters.push({
                                          fieldName: "name",
                                          type: "LIKE",
                                          value: "%" + searchTerm + "%",
                                        });
                                        result = Resources["InfoTableFunctions"].Query({
                                          t: devices,
                                          query: userQuery,
                                        });
                                      } else if (searchTerm == "") {
                                        result = devices;
                                      }
                                    } catch (err) {
                                      logger.error(
                                        "Thing [{}] Service [{}] error at line [{}] : {}",
                                        me.name,
                                        err.fileName,
                                        err.lineNumber,
                                        err
                                      );
                                    }
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":1,"lineNumber":32},"position":{"column":1,"lineNumber":32}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":32,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="SearchMetricsForAdminScreen">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    try {
                                      var result;
                                      const userQuery = {
                                        filters: {
                                          type: "OR",
                                          filters: [],
                                        },
                                      };
                                      const filters = userQuery.filters.filters;
                                      if (searchTerm) {
                                        filters.push({
                                          fieldName: "kpiDisplayName",
                                          type: "LIKE",
                                          value: "%" + searchTerm + "%",
                                        });
                                        filters.push({
                                          fieldName: "unitOfMeasure",
                                          type: "LIKE",
                                          value: "%" + searchTerm + "%",
                                        });
                                        filters.push({
                                          fieldName: "kpiDescription",
                                          type: "LIKE",
                                          value: "%" + searchTerm + "%",
                                        });
                                        filters.push({
                                          fieldName: "isVisible",
                                          type: "LIKE",
                                          value: "%" + searchTerm + "%",
                                        });
                                     result = Resources["InfoTableFunctions"].Query({
                                    			t: metrics,
                                    			query: userQuery,
                                    		});
                                    	} else if (searchTerm == undefined || searchTerm == "") {
                                    		result = metrics;
                                    	}
                                    } catch (err) {
                                      logger.error(
                                        "Thing [{}] Service [{}] error at line [{}] : {}",
                                        me.name,
                                        err.fileName,
                                        err.lineNumber,
                                        err
                                      );
                                      throw me.LocalizeToken({ token: "PTC.Base.ErrorMessage" });
                                    }
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":8,"lineNumber":30},"position":{"column":8,"lineNumber":30}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":44,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="SearchMetricsForMainScreen">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var result;
                                    try {
                                    	const userQuery = {
                                    		filters: {
                                    			type: "OR",
                                    			filters: [],
                                    		},
                                    	};
                                    	const filters = userQuery.filters.filters;
                                    	if (searchTerm) {
                                    		filters.push({
                                    			fieldName: "kpiDisplayName",
                                    			type: "LIKE",
                                    			value: "%" + searchTerm + "%",
                                    		});
                                    		filters.push({
                                    			fieldName: "status",
                                    			type: "LIKE",
                                    			value: "%" + searchTerm + "%",
                                    		});
                                    		filters.push({
                                    			fieldName: "actual",
                                    			type: "LIKE",
                                    			value: "%" + searchTerm + "%",
                                    		});
                                    		filters.push({
                                    			fieldName: "target",
                                    			type: "LIKE",
                                    			value: "%" + searchTerm + "%",
                                    		});
                                    		filters.push({
                                    			fieldName: "percentChange",
                                    			type: "LIKE",
                                    			value: "%" + searchTerm + "%",
                                    		});
                                    		result = Resources["InfoTableFunctions"].Query({
                                    			t: metrics,
                                    			query: userQuery,
                                    		});
                                    	} else if (searchTerm == undefined || searchTerm == "") {
                                    		result = metrics;
                                    	}
                                    } catch (err) {
                                    	logger.error(
                                    		"Thing [{}] Service [{}] error at line [{}] : {}",
                                    		me.name,
                                    		err.fileName,
                                    		err.lineNumber,
                                    		err
                                    	);
                                    	throw me.LocalizeToken({
                                    		token: "PTC.Base.ErrorMessage"
                                    	});
                                    }
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":27,"lineNumber":22},"position":{"column":27,"lineNumber":22}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":49,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="SetHierarchyTop">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    Things["PTCSC.ReportingBlock.HierarcyBreakdown_DT"].PurgeDataTableEntries();
                                    if(!equipmentUid) {
                                    	equipmentUid = 1;
                                    }
                                    let poorOkGoodValues = ["Poor", "OK", "Good"];
                                    let configTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                    	infoTableName: "InfoTable",
                                    	dataShapeName: "PTCSC.ReportingBlock.HierarchyBreakdown_DS"
                                    });
                                    
                                    let modelManagementManager = me.GetConfiguredManagerForIdentifier({
                                    	identifier: "PTC.ModelManagement.Manager"
                                    });
                                    
                                    if (isEquipmentWorkcenter(equipmentUid)) {
                                    	let parent = Things[modelManagementManager].GetParent({
                                    		childUid: equipmentUid
                                    	});
                                        
                                        equipmentUid = parent.rows[0].uid;
                                    }
                                    
                                    let isDone = false;
                                    let modelLinks = addModelData([], equipmentUid);
                                    var j = 0;
                                    let currentModelUid = equipmentUid;
                                    while (!isDone) {
                                    	let parentModelLink = Things[modelManagementManager].GetParentLink({
                                    		childUid: currentModelUid
                                    	});
                                    	if (parentModelLink && parentModelLink.rows.length > 0) {
                                    		parentModelLink.rows.toArray().forEach(row => {
                                    			addModelData(modelLinks, row.parentUid);
                                    			currentModelUid = row.parentUid;
                                    		});
                                    	} else {
                                    		isDone = true;
                                    	}
                                    }
                                    
                                    let reverseModel = modelLinks.reverse();
                                    
                                    for (var i = 0; i < reverseModel.length; i++) {
                                    
                                    	let values = Things["PTCSC.ReportingBlock.HierarcyBreakdown_DT"].CreateValues();
                                    	values.modelName = reverseModel[i].name;
                                    	values.kpiName = kpiName;
                                    	values.modelTypeName = setModelType(reverseModel[i].modelTypeUid);
                                    	values.actual = Math.floor(Math.random() * 25);
                                    	values.target = Math.floor(Math.random() * 25);
                                    	values.improvement = Math.floor(Math.random() * 25);
                                    	values.poorOkGoodValue = poorOkGoodValues[Math.floor(Math.random() * 3)];
                                    	values.arrowValue = Math.floor(Math.random() * 4);
                                    	let id = Things["PTCSC.ReportingBlock.HierarcyBreakdown_DT"].AddOrUpdateDataTableEntry({
                                    		values: values
                                    	});
                                    }
                                    
                                    function setModelType(modelTypeUid) {
                                    	let modelType = Things[modelManagementManager].GetModelType({
                                    		uid: modelTypeUid
                                    	});
                                    
                                    	return modelType.rows[0].name;
                                    }
                                    
                                    function isEquipmentWorkcenter(equipmentUid) {
                                    	let modelData = Things[modelManagementManager].GetModel({
                                    		uid: equipmentUid
                                    	});
                                    
                                    	if (modelData.rows[0].modelTypeUid > 5) {
                                    		return true;
                                    	} else {
                                    		return false;
                                    	}
                                    }
                                    
                                    function addModelData(modelLinks, modelUid) {
                                    	let modelData = Things[modelManagementManager].GetModel({
                                    		uid: modelUid /* STRING */
                                    	});
                                    
                                    	if (modelData && modelData.rows.length > 0) {
                                    		modelLinks.push({
                                    			uid: modelUid,
                                    			name: modelData.rows[0].name,
                                    			modelTypeUid: modelData.rows[0].modelTypeUid
                                    		});
                                    	}
                                    	return modelLinks;
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="SetInheritanceForTarget">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    //This service does not work if we're giving it an Enterprise as an input - That's ok given that you should not be able to switch the enterprise value to begin with.
                                    
                                    var storeMetric = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        infoTableName: "InfoTable",
                                        dataShapeName: "PTC.ModelManagement.EntityTreeData"
                                    });
                                    
                                    let equipmentRow = getEquipmentRow(equipmentName, metricName);
                                    
                                    if (equipmentRow.rows[0].inheritance) {
                                        // If the equipment will be set to not inherit we need to do the following
                                        // 1.Set the inheritance to false 
                                        // 2.Set all the children of this equipment (if there's any) to "0" as value
                                        // 3.Set its own target value to 0
                                    
                                        let newEquipmentRow = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].CreateValues();
                                        newEquipmentRow.inheritance = false;
                                        newEquipmentRow.target = 0;
                                        newEquipmentRow.uniqueId = equipmentRow.rows[0].uniqueId;
                                    
                                        let id = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].AddOrUpdateDataTableEntry({
                                            values: newEquipmentRow
                                        });
                                    
                                        let childrenToChangeValue = createAListWithAllTheChildren(equipmentName);
                                    
                                        for (var i = 0; i < childrenToChangeValue.length; i++) {
                                            let currentEquipment = getEquipmentRow(childrenToChangeValue.rows[i].thingName, metricName);
                                            let newEquipmentRow = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].CreateValues();
                                            newEquipmentRow.target = 0;
                                            newEquipmentRow.uniqueId = currentEquipment.rows[0].uniqueId;
                                            let id = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].AddOrUpdateDataTableEntry({
                                                values: newEquipmentRow
                                            });
                                        }
                                    
                                    } else {
                                        //If the equipment will be set to inherit we need to do the following:
                                        //1.Set the inheritance to true
                                        //2.Set the TARGET value to be the same as its first parent
                                        //3. ? set the kids to also inherit from that value?
                                    
                                        let equipmentRow = getEquipmentRow(equipmentName, metricName);
                                        let firstParent = findEquipmentParentWithoutInheritance(equipmentRow.rows[0].equipmentUid);
                                        let getParentRow = getEquipmentRow(firstParent, metricName);
                                    
                                        let newEquipmentRow = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].CreateValues();
                                        newEquipmentRow.inheritance = true;
                                        newEquipmentRow.target = getParentRow.rows[0].target;
                                        newEquipmentRow.uniqueId = equipmentRow.rows[0].uniqueId;
                                        let id = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].AddOrUpdateDataTableEntry({
                                            values: newEquipmentRow
                                        });
                                    
                                        let childrenOfThisEquipment = createAListWithAllTheChildren(equipmentName);
                                        for (var j = 0; j < childrenOfThisEquipment.length; j++) {
                                            let equipmentRow = getEquipmentRow(childrenOfThisEquipment.rows[j].thingName, metricName);
                                            let newEquipmentRow = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].CreateValues();
                                            newEquipmentRow.target = getParentRow.rows[0].target;
                                            newEquipmentRow.uniqueId = equipmentRow.rows[0].uniqueId;
                                            let id = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].AddOrUpdateDataTableEntry({
                                                values: newEquipmentRow
                                            });
                                        }
                                    
                                    }
                                    
                                    function getEquipmentRow(equipmentName, metricName) {
                                        var query = {
                                            "filters": {
                                                "type": "AND",
                                                "filters": [{
                                                    "type": "EQ",
                                                    "fieldName": "kpiName",
                                                    "value": metricName
                                                },
                                                {
                                                    "type": "EQ",
                                                    "fieldName": "equipmentName",
                                                    "value": equipmentName
                                                }
                                                ]
                                            }
                                        };
                                    
                                        let queryResult = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].SearchDataTableEntries({
                                            query: query
                                        });
                                    
                                        return queryResult;
                                    }
                                    
                                    function createAListWithAllTheChildren(equipmentName) {
                                    
                                        let childrenList = getAllChildren(equipmentName);
                                    
                                        for (var i = 0; i < childrenList.length; i++) {
                                            var isEquipmentInheriting = getEquipmentRow(childrenList.rows[i].thingName, metricName);
                                            if (isEquipmentInheriting.rows[0].inheritance) {
                                                if (childrenList.rows[i].hasChildren) {
                                                    let newEntry = {
                                                        thingName: childrenList.rows[i].thingName,
                                                        modelTypeName: childrenList.rows[i].modelTypeName
                                                    };
                                                    storeMetric.AddRow(newEntry);
                                                    createAListWithAllTheChildren(childrenList.rows[i].thingName);
                                                } else {
                                                    let newEntry = {
                                                        thingName: childrenList.rows[i].thingName,
                                                        modelTypeName: childrenList.rows[i].modelTypeName
                                                    };
                                                    storeMetric.AddRow(newEntry);
                                                }
                                            }
                                        }
                                    
                                        return storeMetric;
                                    }
                                    
                                    function getAllChildren(parentName) {
                                        let children = Things["PTC.MfgModelImpl.Manager"].GetBusinessUnitEntityTreeChildrenForNode({
                                            thingName: parentName
                                        });
                                    
                                        return children;
                                    }
                                    
                                    function findEquipmentParentWithoutInheritance(equipmentUid) {
                                        var parent = Things["PTC.MfgModelImpl.Manager"].GetParent({
                                            childUid: equipmentUid
                                        });
                                    
                                        var query = {
                                            "filters": {
                                                "type": "AND",
                                                "filters": [{
                                                    "type": "EQ",
                                                    "fieldName": "kpiName",
                                                    "value": metricName
                                                },
                                                {
                                                    "type": "EQ",
                                                    "fieldName": "equipmentName",
                                                    "value": parent.rows[0].name
                                                }
                                                ]
                                            }
                                        };
                                    
                                        var queryForParent = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].SearchDataTableEntries({
                                            query: query
                                        });
                                        var currentEquipmentUid = parseInt(queryForParent.rows[0].equipmentUid);
                                    
                                        if (queryForParent.rows[0].inheritance == false || queryForParent.rows[0].equipmentType == "Enterprise") {
                                            return queryForParent.rows[0].equipmentName;
                                        } else {
                                            return findEquipmentParentWithoutInheritance(currentEquipmentUid);
                                        }
                                    }
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":true,"selectionStart":{"column":1,"lineNumber":1},"position":{"column":2,"lineNumber":160}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":160,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="SetInheritanceForThreshold">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    //This service does not work if we're giving it an Enterprise as an input - That's ok given that you should not be able to switch the enterprise value to begin with.
                                    
                                    var storeMetric = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        infoTableName: "InfoTable",
                                        dataShapeName: "PTC.ModelManagement.EntityTreeData"
                                    });
                                    
                                    let equipmentRow = getEquipmentRow(equipmentName, metricName);
                                    
                                    if (equipmentRow.rows[0].inheritanceForThreshold) {
                                        // If the equipment will be set to not inherit we need to do the following
                                        // 1.Set the inheritanceForThreshold to false
                                        // 2.Set all the children of this equipment (if there's any) to 0 for all the poor/ok/good values
                                        // 3.Set its own poor/ok/good values as 0
                                    
                                        let newEquipmentRow = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].CreateValues();
                                        newEquipmentRow.inheritanceForThreshold = false;
                                        newEquipmentRow.poor = 0;
                                        newEquipmentRow.ok = 0;
                                        newEquipmentRow.good = 0;
                                        newEquipmentRow.uniqueId = equipmentRow.rows[0].uniqueId;
                                    
                                        let id = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].AddOrUpdateDataTableEntry({
                                            values: newEquipmentRow
                                        });
                                    
                                        let childrenToChangeValue = createAListWithAllTheChildren(equipmentName);
                                    
                                        for (var i = 0; i < childrenToChangeValue.length; i++) {
                                            let currentEquipment = getEquipmentRow(childrenToChangeValue.rows[i].thingName, metricName);
                                            let newEquipmentRow = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].CreateValues();
                                            newEquipmentRow.poor = 0;
                                            newEquipmentRow.ok = 0;
                                            newEquipmentRow.good = 0;
                                            newEquipmentRow.uniqueId = currentEquipment.rows[0].uniqueId;
                                            let id = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].AddOrUpdateDataTableEntry({
                                                values: newEquipmentRow
                                            });
                                        }
                                    
                                    } else {
                                        //If the equipment will be set to inherit we need to do the following:
                                        //1.Set the inheritanceForThreshold to true
                                        //2.Set the TARGET value to be the same as its first parent
                                        //3. ? set the kids to also inherit from that value?
                                    
                                        let equipmentRow = getEquipmentRow(equipmentName, metricName);
                                        let firstParent = findEquipmentParentWithoutInheritance(equipmentRow.rows[0].equipmentUid);
                                        let getParentRow = getEquipmentRow(firstParent, metricName);
                                    
                                        let newEquipmentRow = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].CreateValues();
                                        newEquipmentRow.inheritanceForThreshold = true;
                                        newEquipmentRow.poor = getParentRow.rows[0].poor;
                                        newEquipmentRow.ok = getParentRow.rows[0].ok;
                                        newEquipmentRow.good = getParentRow.rows[0].good;
                                        newEquipmentRow.uniqueId = equipmentRow.rows[0].uniqueId;
                                        let id = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].AddOrUpdateDataTableEntry({
                                            values: newEquipmentRow
                                        });
                                    
                                        let childrenOfThisEquipment = createAListWithAllTheChildren(equipmentName);
                                        for (var j = 0; j < childrenOfThisEquipment.length; j++) {
                                            let equipmentRow = getEquipmentRow(childrenOfThisEquipment.rows[j].thingName, metricName);
                                            let newEquipmentRow = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].CreateValues();
                                            newEquipmentRow.poor = getParentRow.rows[0].poor;
                                            newEquipmentRow.ok = getParentRow.rows[0].ok;
                                            newEquipmentRow.good = getParentRow.rows[0].good;
                                            newEquipmentRow.uniqueId = equipmentRow.rows[0].uniqueId;
                                            let id = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].AddOrUpdateDataTableEntry({
                                                values: newEquipmentRow
                                            });
                                        }
                                    
                                    }
                                    
                                    function getEquipmentRow(equipmentName, metricName) {
                                        var query = {
                                            "filters": {
                                                "type": "AND",
                                                "filters": [{
                                                    "type": "EQ",
                                                    "fieldName": "kpiName",
                                                    "value": metricName
                                                },
                                                {
                                                    "type": "EQ",
                                                    "fieldName": "equipmentName",
                                                    "value": equipmentName
                                                }
                                                ]
                                            }
                                        };
                                    
                                        let queryResult = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].SearchDataTableEntries({
                                            query: query
                                        });
                                    
                                        return queryResult;
                                    }
                                    
                                    function createAListWithAllTheChildren(equipmentName) {
                                    
                                        let childrenList = getAllChildren(equipmentName);
                                    
                                        for (var i = 0; i < childrenList.length; i++) {
                                            var isEquipmentInheriting = getEquipmentRow(childrenList.rows[i].thingName, metricName);
                                            if (isEquipmentInheriting.rows[0].inheritanceForThreshold) {
                                                if (childrenList.rows[i].hasChildren) {
                                                    let newEntry = {
                                                        thingName: childrenList.rows[i].thingName,
                                                        modelTypeName: childrenList.rows[i].modelTypeName
                                                    };
                                                    storeMetric.AddRow(newEntry);
                                                    createAListWithAllTheChildren(childrenList.rows[i].thingName);
                                                } else {
                                                    let newEntry = {
                                                        thingName: childrenList.rows[i].thingName,
                                                        modelTypeName: childrenList.rows[i].modelTypeName
                                                    };
                                                    storeMetric.AddRow(newEntry);
                                                }
                                            }
                                        }
                                    
                                        return storeMetric;
                                    }
                                    
                                    function getAllChildren(parentName) {
                                        let children = Things["PTC.MfgModelImpl.Manager"].GetBusinessUnitEntityTreeChildrenForNode({
                                            thingName: parentName
                                        });
                                    
                                        return children;
                                    }
                                    
                                    function findEquipmentParentWithoutInheritance(equipmentUid) {
                                        var parent = Things["PTC.MfgModelImpl.Manager"].GetParent({
                                            childUid: equipmentUid
                                        });
                                    
                                        var query = {
                                            "filters": {
                                                "type": "AND",
                                                "filters": [{
                                                    "type": "EQ",
                                                    "fieldName": "kpiName",
                                                    "value": metricName
                                                },
                                                {
                                                    "type": "EQ",
                                                    "fieldName": "equipmentName",
                                                    "value": parent.rows[0].name
                                                }
                                                ]
                                            }
                                        };
                                    
                                        var queryForParent = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].SearchDataTableEntries({
                                            query: query
                                        });
                                        var currentEquipmentUid = parseInt(queryForParent.rows[0].equipmentUid);
                                    
                                        if (queryForParent.rows[0].inheritanceForThreshold == false || queryForParent.rows[0].equipmentType == "Enterprise") {
                                            return queryForParent.rows[0].equipmentName;
                                        } else {
                                            return findEquipmentParentWithoutInheritance(currentEquipmentUid);
                                        }
                                    }
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":49,"lineNumber":10},"position":{"column":49,"lineNumber":10}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":168,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="SetInheritanceForThresholdValues">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    //This service does not work if we're giving it an Enterprise as an input - That's ok given that you should not be able to switch the enterprise value to begin with.
                                    
                                    var storeMetric = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        infoTableName: "InfoTable",
                                        dataShapeName: "PTC.ModelManagement.EntityTreeData"
                                    });
                                    
                                    let equipmentRow = getEquipmentRow(equipmentName, metricName);
                                    
                                    if (equipmentRow.rows[0].inheritance) {
                                        // If the equipment will be set to not inherit we need to do the following
                                        // 1.Set the inheritance to false 
                                        // 2.Set all the children of this equipment (if there's any) to "0" as value
                                        // 3.Set its own target value to 0
                                    
                                        let newEquipmentRow = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].CreateValues();
                                        newEquipmentRow.inheritance = false;
                                        newEquipmentRow.target = 0;
                                        newEquipmentRow.uniqueId = equipmentRow.rows[0].uniqueId;
                                    
                                        let id = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].AddOrUpdateDataTableEntry({
                                            values: newEquipmentRow
                                        });
                                    
                                        let childrenToChangeValue = createAListWithAllTheChildren(equipmentName);
                                    
                                        for (var i = 0; i < childrenToChangeValue.length; i++) {
                                            let currentEquipment = getEquipmentRow(childrenToChangeValue.rows[i].thingName, metricName);
                                            let newEquipmentRow = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].CreateValues();
                                            newEquipmentRow.target = 0;
                                            newEquipmentRow.uniqueId = currentEquipment.rows[0].uniqueId;
                                            let id = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].AddOrUpdateDataTableEntry({
                                                values: newEquipmentRow
                                            });
                                        }
                                    
                                    } else {
                                        //If the equipment will be set to inherit we need to do the following:
                                        //1.Set the inheritance to true
                                        //2.Set the TARGET value to be the same as its first parent
                                        //3. ? set the kids to also inherit from that value?
                                    
                                        let equipmentRow = getEquipmentRow(equipmentName, metricName);
                                        let firstParent = findEquipmentParentWithoutInheritance(equipmentRow.rows[0].equipmentUid);
                                        let getParentRow = getEquipmentRow(firstParent, metricName);
                                    
                                        let newEquipmentRow = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].CreateValues();
                                        newEquipmentRow.inheritance = true;
                                        newEquipmentRow.target = getParentRow.rows[0].target;
                                        newEquipmentRow.uniqueId = equipmentRow.rows[0].uniqueId;
                                        let id = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].AddOrUpdateDataTableEntry({
                                            values: newEquipmentRow
                                        });
                                    
                                        let childrenOfThisEquipment = createAListWithAllTheChildren(equipmentName);
                                        for (var j = 0; j < childrenOfThisEquipment.length; j++) {
                                            let equipmentRow = getEquipmentRow(childrenOfThisEquipment.rows[j].thingName, metricName);
                                            let newEquipmentRow = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].CreateValues();
                                            newEquipmentRow.target = getParentRow.rows[0].target;
                                            newEquipmentRow.uniqueId = equipmentRow.rows[0].uniqueId;
                                            let id = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].AddOrUpdateDataTableEntry({
                                                values: newEquipmentRow
                                            });
                                        }
                                    
                                    }
                                    
                                    function getEquipmentRow(equipmentName, metricName) {
                                        var query = {
                                            "filters": {
                                                "type": "AND",
                                                "filters": [{
                                                    "type": "EQ",
                                                    "fieldName": "kpiName",
                                                    "value": metricName
                                                },
                                                {
                                                    "type": "EQ",
                                                    "fieldName": "equipmentName",
                                                    "value": equipmentName
                                                }
                                                ]
                                            }
                                        };
                                    
                                        let queryResult = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].SearchDataTableEntries({
                                            query: query
                                        });
                                    
                                        return queryResult;
                                    }
                                    
                                    function createAListWithAllTheChildren(equipmentName) {
                                    
                                        let childrenList = getAllChildren(equipmentName);
                                    
                                        for (var i = 0; i < childrenList.length; i++) {
                                            var isEquipmentInheriting = getEquipmentRow(childrenList.rows[i].thingName, metricName);
                                            if (isEquipmentInheriting.rows[0].inheritance) {
                                                if (childrenList.rows[i].hasChildren) {
                                                    let newEntry = {
                                                        thingName: childrenList.rows[i].thingName,
                                                        modelTypeName: childrenList.rows[i].modelTypeName
                                                    };
                                                    storeMetric.AddRow(newEntry);
                                                    createAListWithAllTheChildren(childrenList.rows[i].thingName);
                                                } else {
                                                    let newEntry = {
                                                        thingName: childrenList.rows[i].thingName,
                                                        modelTypeName: childrenList.rows[i].modelTypeName
                                                    };
                                                    storeMetric.AddRow(newEntry);
                                                }
                                            }
                                        }
                                    
                                        return storeMetric;
                                    }
                                    
                                    function getAllChildren(parentName) {
                                        let children = Things["PTC.MfgModelImpl.Manager"].GetBusinessUnitEntityTreeChildrenForNode({
                                            thingName: parentName
                                        });
                                    
                                        return children;
                                    }
                                    
                                    function findEquipmentParentWithoutInheritance(equipmentUid) {
                                        var parent = Things["PTC.MfgModelImpl.Manager"].GetParent({
                                            childUid: equipmentUid
                                        });
                                    
                                        var query = {
                                            "filters": {
                                                "type": "AND",
                                                "filters": [{
                                                    "type": "EQ",
                                                    "fieldName": "kpiName",
                                                    "value": metricName
                                                },
                                                {
                                                    "type": "EQ",
                                                    "fieldName": "equipmentName",
                                                    "value": parent.rows[0].name
                                                }
                                                ]
                                            }
                                        };
                                    
                                        var queryForParent = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].SearchDataTableEntries({
                                            query: query
                                        });
                                        var currentEquipmentUid = parseInt(queryForParent.rows[0].equipmentUid);
                                    
                                        if (queryForParent.rows[0].inheritance == false || queryForParent.rows[0].equipmentType == "Enterprise") {
                                            return queryForParent.rows[0].equipmentName;
                                        } else {
                                            return findEquipmentParentWithoutInheritance(currentEquipmentUid);
                                        }
                                    }
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":-2,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":4}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":2,"lineNumber":160},"position":{"column":2,"lineNumber":160}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":160,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="SetMetricsInformation">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let values = Things["PTCSC.ReportingBlock.MetricsInformation"].CreateValues();
                                    
                                    values.kpiName = metricName;
                                    values.actual = actual;
                                    values.target = target;
                                    
                                    Things["PTCSC.ReportingBlock.MetricsInformation"].UpdateDataTableEntry({
                                      values: values,
                                    });
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":57,"lineNumber":1},"position":{"column":57,"lineNumber":1}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":10,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="SetTarget">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var storeMetric = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        infoTableName: "InfoTable",
                                        dataShapeName: "PTC.ModelManagement.EntityTreeData"
                                    });
                                    
                                    
                                    if(rollupType == "Average") {
                                        let equipmentRow = getEquipmentRow(equipmentName, metricName);
                                    
                                        let setNewTargetForEquipment = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].CreateValues();
                                        setNewTargetForEquipment.target = newTarget;
                                        setNewTargetForEquipment.uniqueId = equipmentRow.rows[0].uniqueId;
                                        let id = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].AddOrUpdateDataTableEntry({
                                            values: setNewTargetForEquipment
                                        });
                                    
                                    
                                        let getChildrenOfEquipment = createAListWithAllTheChildren(equipmentName);
                                        for(var i = 0; i < getChildrenOfEquipment.length; i++) {
                                            let equipmentRow = getEquipmentRow(getChildrenOfEquipment.rows[i].thingName, metricName);
                                            let setNewTargetForEquipment = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].CreateValues();
                                            setNewTargetForEquipment.target = newTarget;
                                            setNewTargetForEquipment.uniqueId = equipmentRow.rows[0].uniqueId;
                                            let id = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].AddOrUpdateDataTableEntry({
                                                values: setNewTargetForEquipment
                                            });
                                        }
                                    } else {
                                        let equipmentRow = getEquipmentRow(equipmentName, metricName);
                                        let setNewTargetForEquipment = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].CreateValues();
                                        setNewTargetForEquipment.uniqueId = equipmentRow.rows[0].uniqueId;
                                        setNewTargetForEquipment.target = newTarget;
                                        setNewTargetForEquipment.uniqueId = equipmentRow.rows[0].uniqueId;
                                        setNewTargetForEquipment.timePeriod = timePeriod;
                                        let id = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].AddOrUpdateDataTableEntry({
                                            values: setNewTargetForEquipment
                                        });
                                    }
                                        
                                    
                                    
                                    function getEquipmentRow(equipmentName, metricName) {
                                        var query = {
                                            "filters": {
                                                "type": "AND",
                                                "filters": [{
                                                    "type": "EQ",
                                                    "fieldName": "kpiName",
                                                    "value": metricName
                                                },
                                                {
                                                    "type": "EQ",
                                                    "fieldName": "equipmentName",
                                                    "value": equipmentName
                                                }
                                                ]
                                            }
                                        };
                                    
                                        let queryResult = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].SearchDataTableEntries({
                                            query: query
                                        });
                                    
                                        return queryResult;
                                    }
                                    
                                    function createAListWithAllTheChildren(equipmentName) {
                                    
                                        let childrenList = getAllChildren(equipmentName);
                                    
                                        for (var i = 0; i < childrenList.length; i++) {
                                            var isEquipmentInheriting = getEquipmentRow(childrenList.rows[i].thingName, metricName);
                                            if (isEquipmentInheriting.rows[0].inheritance) {
                                                if (childrenList.rows[i].hasChildren) {
                                                    let newEntry = {
                                                        thingName: childrenList.rows[i].thingName,
                                                        modelTypeName: childrenList.rows[i].modelTypeName
                                                    };
                                                    storeMetric.AddRow(newEntry);
                                                    createAListWithAllTheChildren(childrenList.rows[i].thingName);
                                                } else {
                                                    let newEntry = {
                                                        thingName: childrenList.rows[i].thingName,
                                                        modelTypeName: childrenList.rows[i].modelTypeName
                                                    };
                                                    storeMetric.AddRow(newEntry);
                                                }
                                            }
                                        }
                                    
                                        return storeMetric;
                                    }
                                    
                                    function getAllChildren(parentName) {
                                        let children = Things["PTC.MfgModelImpl.Manager"].GetBusinessUnitEntityTreeChildrenForNode({
                                            thingName: parentName
                                        });
                                    
                                        return children;
                                    }
                                    
                                    function findEquipmentParentWithoutInheritance(equipmentUid) {
                                        var parent = Things["PTC.MfgModelImpl.Manager"].GetParent({
                                            childUid: equipmentUid
                                        });
                                    
                                        var query = {
                                            "filters": {
                                                "type": "AND",
                                                "filters": [{
                                                    "type": "EQ",
                                                    "fieldName": "kpiName",
                                                    "value": metricName
                                                },
                                                {
                                                    "type": "EQ",
                                                    "fieldName": "equipmentName",
                                                    "value": parent.rows[0].name
                                                }
                                                ]
                                            }
                                        };
                                    
                                        var queryForParent = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].SearchDataTableEntries({
                                            query: query
                                        });
                                        var currentEquipmentUid = parseInt(queryForParent.rows[0].equipmentUid);
                                    
                                        if (queryForParent.rows[0].inheritance == false || queryForParent.rows[0].equipmentType == "Enterprise") {
                                            return queryForParent.rows[0].equipmentName;
                                        } else {
                                            return findEquipmentParentWithoutInheritance(currentEquipmentUid);
                                        }
                                    }
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":-4,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":7}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":56,"lineNumber":34},"position":{"column":56,"lineNumber":34}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":134,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="SetTargetForAverage">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var storeMetric = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        infoTableName: "InfoTable",
                                        dataShapeName: "PTC.ModelManagement.EntityTreeData"
                                    });
                                    
                                    let equipmentRow = getEquipmentRow(equipmentName, metricName);
                                    
                                    let setNewTargetForEquipment = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].CreateValues();
                                    setNewTargetForEquipment.target = newTarget;
                                    setNewTargetForEquipment.uniqueId = equipmentRow.rows[0].uniqueId;
                                    let id = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].AddOrUpdateDataTableEntry({
                                        values: setNewTargetForEquipment
                                    });
                                    
                                    
                                    let getChildrenOfEquipment = createAListWithAllTheChildren(equipmentName);
                                    for(var i = 0; i < getChildrenOfEquipment.length; i++) {
                                        let equipmentRow = getEquipmentRow(getChildrenOfEquipment.rows[i].thingName, metricName);
                                        let setNewTargetForEquipment = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].CreateValues();
                                        setNewTargetForEquipment.target = newTarget;
                                        setNewTargetForEquipment.uniqueId = equipmentRow.rows[0].uniqueId;
                                        let id = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].AddOrUpdateDataTableEntry({
                                            values: setNewTargetForEquipment
                                        });
                                    }
                                    
                                    
                                    let result = getChildrenOfEquipment;
                                    
                                    function getEquipmentRow(equipmentName, metricName) {
                                        var query = {
                                            "filters": {
                                                "type": "AND",
                                                "filters": [{
                                                    "type": "EQ",
                                                    "fieldName": "kpiName",
                                                    "value": metricName
                                                },
                                                {
                                                    "type": "EQ",
                                                    "fieldName": "equipmentName",
                                                    "value": equipmentName
                                                }
                                                ]
                                            }
                                        };
                                    
                                        let queryResult = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].SearchDataTableEntries({
                                            query: query
                                        });
                                    
                                        return queryResult;
                                    }
                                    
                                    function createAListWithAllTheChildren(equipmentName) {
                                    
                                        let childrenList = getAllChildren(equipmentName);
                                    
                                        for (var i = 0; i < childrenList.length; i++) {
                                            var isEquipmentInheriting = getEquipmentRow(childrenList.rows[i].thingName, metricName);
                                            if (isEquipmentInheriting.rows[0].inheritance) {
                                                if (childrenList.rows[i].hasChildren) {
                                                    let newEntry = {
                                                        thingName: childrenList.rows[i].thingName,
                                                        modelTypeName: childrenList.rows[i].modelTypeName
                                                    };
                                                    storeMetric.AddRow(newEntry);
                                                    createAListWithAllTheChildren(childrenList.rows[i].thingName);
                                                } else {
                                                    let newEntry = {
                                                        thingName: childrenList.rows[i].thingName,
                                                        modelTypeName: childrenList.rows[i].modelTypeName
                                                    };
                                                    storeMetric.AddRow(newEntry);
                                                }
                                            }
                                        }
                                    
                                        return storeMetric;
                                    }
                                    
                                    function getAllChildren(parentName) {
                                        let children = Things["PTC.MfgModelImpl.Manager"].GetBusinessUnitEntityTreeChildrenForNode({
                                            thingName: parentName
                                        });
                                    
                                        return children;
                                    }
                                    
                                    function findEquipmentParentWithoutInheritance(equipmentUid) {
                                        var parent = Things["PTC.MfgModelImpl.Manager"].GetParent({
                                            childUid: equipmentUid
                                        });
                                    
                                        var query = {
                                            "filters": {
                                                "type": "AND",
                                                "filters": [{
                                                    "type": "EQ",
                                                    "fieldName": "kpiName",
                                                    "value": metricName
                                                },
                                                {
                                                    "type": "EQ",
                                                    "fieldName": "equipmentName",
                                                    "value": parent.rows[0].name
                                                }
                                                ]
                                            }
                                        };
                                    
                                        var queryForParent = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].SearchDataTableEntries({
                                            query: query
                                        });
                                        var currentEquipmentUid = parseInt(queryForParent.rows[0].equipmentUid);
                                    
                                        if (queryForParent.rows[0].inheritance == false || queryForParent.rows[0].equipmentType == "Enterprise") {
                                            return queryForParent.rows[0].equipmentName;
                                        } else {
                                            return findEquipmentParentWithoutInheritance(currentEquipmentUid);
                                        }
                                    }
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":4}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":8,"lineNumber":24},"position":{"column":8,"lineNumber":24}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":122,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="SetThreshold">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var storeMetric = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        infoTableName: "InfoTable",
                                        dataShapeName: "PTC.ModelManagement.EntityTreeData"
                                    });
                                    
                                    
                                    if(rollupType == "Average") {
                                    
                                        let equipmentRow = getEquipmentRow(equipmentName, metricName);
                                    
                                        let setNewThresholdForEquipment = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].CreateValues();
                                        setNewThresholdForEquipment.poor = newPoorValue;
                                        setNewThresholdForEquipment.ok = newOkValue;
                                        setNewThresholdForEquipment.good = newGoodValue;
                                        setNewThresholdForEquipment.uniqueId = equipmentRow.rows[0].uniqueId;
                                        let id = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].AddOrUpdateDataTableEntry({
                                            values: setNewThresholdForEquipment
                                        });
                                    
                                        let getChildrenOfEquipment = createAListWithAllTheChildren(equipmentName);
                                        for(var i = 0; i < getChildrenOfEquipment.length; i++) {
                                            let equipmentRow = getEquipmentRow(getChildrenOfEquipment.rows[i].thingName, metricName);
                                            let setNewThresholdForEquipment = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].CreateValues();
                                            setNewThresholdForEquipment.poor = newPoorValue;
                                            setNewThresholdForEquipment.ok = newOkValue;
                                            setNewThresholdForEquipment.good = newGoodValue;
                                            setNewThresholdForEquipment.uniqueId = equipmentRow.rows[0].uniqueId;
                                            let id = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].AddOrUpdateDataTableEntry({
                                                values: setNewThresholdForEquipment
                                            });
                                        } 
                                    } else {
                                        let equipmentRow = getEquipmentRow(equipmentName, metricName);
                                        let setNewThresholdForEquipment = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].CreateValues();
                                        setNewThresholdForEquipment.uniqueId = equipmentRow.rows[0].uniqueId;
                                        setNewThresholdForEquipment.poor = newPoorValue;
                                        setNewThresholdForEquipment.ok = newOkValue;
                                        setNewThresholdForEquipment.good = newGoodValue;
                                        setNewThresholdForEquipment.timePeriod = timePeriod;
                                        let id = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].AddOrUpdateDataTableEntry({
                                            values: setNewThresholdForEquipment
                                        });
                                    }
                                    
                                    function getEquipmentRow(equipmentName, metricName) {
                                        var query = {
                                            "filters": {
                                                "type": "AND",
                                                "filters": [{
                                                    "type": "EQ",
                                                    "fieldName": "kpiName",
                                                    "value": metricName
                                                },
                                                {
                                                    "type": "EQ",
                                                    "fieldName": "equipmentName",
                                                    "value": equipmentName
                                                }
                                                ]
                                            }
                                        };
                                    
                                        let queryResult = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].SearchDataTableEntries({
                                            query: query
                                        });
                                    
                                        return queryResult;
                                    }
                                    
                                    function createAListWithAllTheChildren(equipmentName) {
                                    
                                        let childrenList = getAllChildren(equipmentName);
                                    
                                        for (var i = 0; i < childrenList.length; i++) {
                                            var isEquipmentInheriting = getEquipmentRow(childrenList.rows[i].thingName, metricName);
                                            if (isEquipmentInheriting.rows[0].inheritanceForThreshold) {
                                                if (childrenList.rows[i].hasChildren) {
                                                    let newEntry = {
                                                        thingName: childrenList.rows[i].thingName,
                                                        modelTypeName: childrenList.rows[i].modelTypeName
                                                    };
                                                    storeMetric.AddRow(newEntry);
                                                    createAListWithAllTheChildren(childrenList.rows[i].thingName);
                                                } else {
                                                    let newEntry = {
                                                        thingName: childrenList.rows[i].thingName,
                                                        modelTypeName: childrenList.rows[i].modelTypeName
                                                    };
                                                    storeMetric.AddRow(newEntry);
                                                }
                                            }
                                        }
                                    
                                        return storeMetric;
                                    }
                                    
                                    function getAllChildren(parentName) {
                                        let children = Things["PTC.MfgModelImpl.Manager"].GetBusinessUnitEntityTreeChildrenForNode({
                                            thingName: parentName
                                        });
                                    
                                        return children;
                                    }
                                    
                                    function findEquipmentParentWithoutInheritance(equipmentUid) {
                                        var parent = Things["PTC.MfgModelImpl.Manager"].GetParent({
                                            childUid: equipmentUid
                                        });
                                    
                                        var query = {
                                            "filters": {
                                                "type": "AND",
                                                "filters": [{
                                                    "type": "EQ",
                                                    "fieldName": "kpiName",
                                                    "value": metricName
                                                },
                                                {
                                                    "type": "EQ",
                                                    "fieldName": "equipmentName",
                                                    "value": parent.rows[0].name
                                                }
                                                ]
                                            }
                                        };
                                    
                                        var queryForParent = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].SearchDataTableEntries({
                                            query: query
                                        });
                                        var currentEquipmentUid = parseInt(queryForParent.rows[0].equipmentUid);
                                    
                                        if (queryForParent.rows[0].inheritance == false || queryForParent.rows[0].equipmentType == "Enterprise") {
                                            return queryForParent.rows[0].equipmentName;
                                        } else {
                                            return findEquipmentParentWithoutInheritance(currentEquipmentUid);
                                        }
                                    }
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":33,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":8,"lineNumber":18},"position":{"column":8,"lineNumber":18}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":137,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="SetThresholdForAverage">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var storeMetric = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        infoTableName: "InfoTable",
                                        dataShapeName: "PTC.ModelManagement.EntityTreeData"
                                    });
                                    
                                    let equipmentRow = getEquipmentRow(equipmentName, metricName);
                                    
                                    let setNewThresholdForEquipment = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].CreateValues();
                                    setNewThresholdForEquipment.poor = newPoorValue;
                                    setNewThresholdForEquipment.ok = newOkValue;
                                    setNewThresholdForEquipment.good = newGoodValue;
                                    setNewThresholdForEquipment.uniqueId = equipmentRow.rows[0].uniqueId;
                                    let id = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].AddOrUpdateDataTableEntry({
                                        values: setNewThresholdForEquipment
                                    });
                                    
                                    
                                    let getChildrenOfEquipment = createAListWithAllTheChildren(equipmentName);
                                    for(var i = 0; i < getChildrenOfEquipment.length; i++) {
                                        let equipmentRow = getEquipmentRow(getChildrenOfEquipment.rows[i].thingName, metricName);
                                        let setNewThresholdForEquipment = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].CreateValues();
                                        setNewThresholdForEquipment.poor = newPoorValue;
                                        setNewThresholdForEquipment.ok = newOkValue;
                                        setNewThresholdForEquipment.good = newGoodValue;
                                        setNewThresholdForEquipment.uniqueId = equipmentRow.rows[0].uniqueId;
                                        let id = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].AddOrUpdateDataTableEntry({
                                            values: setNewThresholdForEquipment
                                        });
                                    }
                                    
                                    
                                    let result = getChildrenOfEquipment;
                                    
                                    function getEquipmentRow(equipmentName, metricName) {
                                        var query = {
                                            "filters": {
                                                "type": "AND",
                                                "filters": [{
                                                    "type": "EQ",
                                                    "fieldName": "kpiName",
                                                    "value": metricName
                                                },
                                                {
                                                    "type": "EQ",
                                                    "fieldName": "equipmentName",
                                                    "value": equipmentName
                                                }
                                                ]
                                            }
                                        };
                                    
                                        let queryResult = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].SearchDataTableEntries({
                                            query: query
                                        });
                                    
                                        return queryResult;
                                    }
                                    
                                    function createAListWithAllTheChildren(equipmentName) {
                                    
                                        let childrenList = getAllChildren(equipmentName);
                                    
                                        for (var i = 0; i < childrenList.length; i++) {
                                            var isEquipmentInheriting = getEquipmentRow(childrenList.rows[i].thingName, metricName);
                                            if (isEquipmentInheriting.rows[0].inheritance) {
                                                if (childrenList.rows[i].hasChildren) {
                                                    let newEntry = {
                                                        thingName: childrenList.rows[i].thingName,
                                                        modelTypeName: childrenList.rows[i].modelTypeName
                                                    };
                                                    storeMetric.AddRow(newEntry);
                                                    createAListWithAllTheChildren(childrenList.rows[i].thingName);
                                                } else {
                                                    let newEntry = {
                                                        thingName: childrenList.rows[i].thingName,
                                                        modelTypeName: childrenList.rows[i].modelTypeName
                                                    };
                                                    storeMetric.AddRow(newEntry);
                                                }
                                            }
                                        }
                                    
                                        return storeMetric;
                                    }
                                    
                                    function getAllChildren(parentName) {
                                        let children = Things["PTC.MfgModelImpl.Manager"].GetBusinessUnitEntityTreeChildrenForNode({
                                            thingName: parentName
                                        });
                                    
                                        return children;
                                    }
                                    
                                    function findEquipmentParentWithoutInheritance(equipmentUid) {
                                        var parent = Things["PTC.MfgModelImpl.Manager"].GetParent({
                                            childUid: equipmentUid
                                        });
                                    
                                        var query = {
                                            "filters": {
                                                "type": "AND",
                                                "filters": [{
                                                    "type": "EQ",
                                                    "fieldName": "kpiName",
                                                    "value": metricName
                                                },
                                                {
                                                    "type": "EQ",
                                                    "fieldName": "equipmentName",
                                                    "value": parent.rows[0].name
                                                }
                                                ]
                                            }
                                        };
                                    
                                        var queryForParent = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].SearchDataTableEntries({
                                            query: query
                                        });
                                        var currentEquipmentUid = parseInt(queryForParent.rows[0].equipmentUid);
                                    
                                        if (queryForParent.rows[0].inheritance == false || queryForParent.rows[0].equipmentType == "Enterprise") {
                                            return queryForParent.rows[0].equipmentName;
                                        } else {
                                            return findEquipmentParentWithoutInheritance(currentEquipmentUid);
                                        }
                                    }
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":-10,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":16}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":40,"lineNumber":14},"position":{"column":40,"lineNumber":14}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":126,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
            </ServiceImplementations>
            <Subscriptions></Subscriptions>
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility></Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <InstanceRunTimePermissions></InstanceRunTimePermissions>
        </ThingShape>
    </ThingShapes>
</Entities>
