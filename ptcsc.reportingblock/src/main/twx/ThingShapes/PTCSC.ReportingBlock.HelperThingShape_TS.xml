<?xml version="1.0" encoding="UTF-8"?>
<Entities
 majorVersion="9"
 minorVersion="3"
 universal="">
    <ThingShapes>
        <ThingShape
         aspect.isEditableExtensionObject="true"
         aspect.isExtension="true"
         className=""
         description=""
         documentationContent=""
         homeMashup=""
         name="PTCSC.ReportingBlock.HelperThingShape_TS"
         projectName="PTCSC.ReportingBlock"
         tags="">
            <PropertyDefinitions></PropertyDefinitions>
            <ServiceDefinitions>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="CalculateActual">
                    <ResultType
                     baseType="NUMBER"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="CalculatePercentArrowChange">
                    <ResultType
                     baseType="NUMBER"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="CalculatePercentChange">
                    <ResultType
                     baseType="NUMBER"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="CalculateTarget">
                    <ResultType
                     baseType="NUMBER"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GenerateAdministrationInformation">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="metricDisplayName"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="metricName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="true"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GenerateEquipmentsForAdmin">
                    <ResultType
                     baseType="STRING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="metricName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
            </ServiceDefinitions>
            <EventDefinitions></EventDefinitions>
            <ServiceMappings></ServiceMappings>
            <ServiceImplementations>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="CalculateActual">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = Math.floor(Math.random() * 100);
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":45,"lineNumber":1},"position":{"column":45,"lineNumber":1}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":1,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="CalculatePercentArrowChange">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = Math.floor(Math.random() * 4);
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="CalculatePercentChange">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let myActual = me.CalculateActual();
                                    let myTarget = me.CalculateTarget();
                                    let percentageValue = ((myTarget - myActual)/ myActual);
                                    let result = percentageValue.toFixed(1);
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="CalculateTarget">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = Math.floor(Math.random() * 100);
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":45,"lineNumber":1},"position":{"column":45,"lineNumber":1}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":1,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GenerateAdministrationInformation">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let values = Things["PTCSC.ReportingBlock.AdministrationMetricDetails_DT"].CreateValues();
                                    values.metricName = metricName;
                                    values.metricDisplayName = metricDisplayName;
                                    values.unitOfMeasure = "Percent";
                                    values.rollUpBehavior = "Average";
                                    values.correlation = "Positive";
                                    values.description = "Metric description";
                                    values.calculationFormula = "Metric Formula";
                                    
                                    
                                    let id = Things["PTCSC.ReportingBlock.AdministrationMetricDetails_DT"].AddOrUpdateDataTableEntry({
                                        values: values
                                    });
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":65,"lineNumber":11},"position":{"column":65,"lineNumber":11}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":13,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GenerateEquipmentsForAdmin">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                    <FieldDefinition
                                     baseType="JSON"
                                     description=""
                                     name="editorSettings"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let models = Things["PTC.MfgModelImpl.Manager"].GetModels({
                                    	filter: undefined /* JSON */ ,
                                    	offset: undefined /* LONG */ ,
                                    	limit: undefined /* LONG */
                                    });
                                    
                                    
                                    for (var i = 0; i < models.length; i++) {
                                    	let modelTypeName = setModelType(models.rows[i].modelTypeUid);
                                    
                                    	let values = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].CreateValues();
                                    	values.uniqueId = generateGUID();
                                    	values.kpiName = metricName;
                                    	values.equipmentName = models.rows[i].name;
                                    	values.equipmentType = setModelType(models.rows[i].modelTypeUid);
                                        values.equipmentUid = models.rows[i].uid;
                                    	values.target = Math.floor(Math.random() * 100);
                                    
                                    	if (modelTypeName == "Enterprise") {
                                    		values.inheritance = false;
                                    	} else {
                                    		values.inheritance = true;
                                    
                                    	}
                                    
                                    	if(modelTypeName == "Enterprise") {
                                    		values.inheritanceForThreshold = false;
                                    	} else {
                                    		values.inheritanceForThreshold = true;
                                    	}
                                    
                                    	values.poor = Math.floor(Math.random() * 50);
                                    	values.ok = Math.floor(Math.random() * 75 + 50);
                                    	values.good = Math.floor(Math.random() * 100 + 75);
                                    
                                    	let id = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].AddOrUpdateDataTableEntry({
                                    		values: values
                                    	});
                                    
                                    }
                                    
                                    function setModelType(modelTypeUid) {
                                    	let modelType = Things["PTC.MfgModelImpl.Manager"].GetModelTypeByUid({
                                    		uid: modelTypeUid
                                    	});
                                    
                                    	return modelType.rows[0].name;
                                    }
                                    ]]>
                                    </code>
                                    <editorSettings>
                                        <json>
                                        <![CDATA[
                                        {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":41,"lineNumber":29},"position":{"column":41,"lineNumber":29}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":48,"foldedImports":false}}}}
                                        ]]>
                                        </json>
                                    </editorSettings>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
            </ServiceImplementations>
            <Subscriptions></Subscriptions>
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility></Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <InstanceRunTimePermissions></InstanceRunTimePermissions>
        </ThingShape>
    </ThingShapes>
</Entities>
