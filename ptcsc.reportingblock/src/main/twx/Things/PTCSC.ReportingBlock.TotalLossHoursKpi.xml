<?xml version="1.0" encoding="UTF-8"?>
<Entities
 majorVersion="9"
 minorVersion="3"
 universal="">
    <Things>
        <Thing
         aspect.isEditableExtensionObject="true"
         aspect.isExtension="true"
         description="Thing that returns the kpi for TotalLossHours"
         documentationContent=""
         effectiveThingPackage="ConfiguredThing"
         enabled="true"
         homeMashup=""
         identifier=""
         inheritedValueStream=""
         name="PTCSC.ReportingBlock.TotalLossHoursKpi"
         projectName="PTCSC.ReportingBlock"
         published="false"
         tags=""
         thingTemplate="GenericThing"
         valueStream="">
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility></Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <ThingShape>
                <PropertyDefinitions></PropertyDefinitions>
                <ServiceDefinitions>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetActualValue">
                        <ResultType
                         baseType="NUMBER"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="PTCSC.ReportingBlock.GenericChart_DS"
                             baseType="INFOTABLE"
                             description=""
                             name="chart"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetConfiguredManagerForIdentifier">
                        <ResultType
                         baseType="THINGNAME"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="identifier"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getInitiativesForKpi">
                        <ResultType
                         aspect.dataShape="PTCSC.ReportingBlock.KpiInitiatives_DS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getKpi">
                        <ResultType
                         aspect.dataShape="PTCSC.ReportingBlock.GenericCard_DS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="PTCSC.ReportingBlock.Filters_DS"
                             baseType="INFOTABLE"
                             description=""
                             name="filters"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetOperationKPIManager">
                        <ResultType
                         baseType="THINGNAME"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetReasonCategories">
                        <ResultType
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetReasonCodeManager">
                        <ResultType
                         baseType="THINGNAME"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="true"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetTimeLossTrend">
                        <ResultType
                         aspect.dataShape="PTCSC.ReportingBlock.GenericChart_DS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.defaultValue="2021-10-31T22:00:00.000Z"
                             baseType="DATETIME"
                             description=""
                             name="endDate"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="modelUid"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             aspect.defaultValue="2021-08-07T21:00:00.000Z"
                             baseType="DATETIME"
                             description=""
                             name="startDate"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getTrend">
                        <ResultType
                         aspect.dataShape="PTCSC.ReportingBlock.GenericChart_DS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="equipmentUid"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                </ServiceDefinitions>
                <EventDefinitions></EventDefinitions>
                <ServiceMappings></ServiceMappings>
                <ServiceImplementations>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GenerateAdministrationInformation">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                        <FieldDefinition
                                         baseType="JSON"
                                         description=""
                                         name="editorSettings"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        let values = Things["PTCSC.ReportingBlock.AdministrationMetricDetails_DT"].CreateValues();
                                        values.metricName = metricName;
                                        values.metricDisplayName = metricDisplayName;
                                        values.unitOfMeasure = "Hours";
                                        values.rollUpBehavior = "Aggregate";
                                        values.correlation = "Negative";
                                        values.description = "Metric description";
                                        values.calculationFormula = "Total loss hours across all equipment at or lower  than the current hierarchy level";
                                        
                                        
                                        let id = Things["PTCSC.ReportingBlock.AdministrationMetricDetails_DT"].AddOrUpdateDataTableEntry({
                                            values: values
                                        });
                                        ]]>
                                        </code>
                                        <editorSettings>
                                            <json>
                                            <![CDATA[
                                            {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":30,"lineNumber":4},"position":{"column":30,"lineNumber":4}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":13,"foldedImports":false}}}}
                                            ]]>
                                            </json>
                                        </editorSettings>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GenerateEquipmentsForAdmin">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                        <FieldDefinition
                                         baseType="JSON"
                                         description=""
                                         name="editorSettings"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        let models = Things["PTC.MfgModelImpl.Manager"].GetModels({
                                        	filter: undefined /* JSON */ ,
                                        	offset: undefined /* LONG */ ,
                                        	limit: undefined /* LONG */
                                        });
                                        
                                        
                                        for (var i = 0; i < models.length; i++) {
                                        	let modelTypeName = setModelType(models.rows[i].modelTypeUid);
                                        
                                        	let values = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].CreateValues();
                                        	values.uniqueId = generateGUID();
                                        	values.kpiName = metricName;
                                        	values.equipmentName = models.rows[i].name;
                                        	values.equipmentType = setModelType(models.rows[i].modelTypeUid);
                                            values.equipmentUid = models.rows[i].uid;
                                        	values.target = Math.floor(Math.random() * 100);
                                        	values.timePeriod = "Weekly";
                                        
                                        	if (modelTypeName == "Enterprise") {
                                        		values.inheritance = false;
                                        	} else {
                                        		values.inheritance = true;
                                        
                                        	}
                                        
                                        	if(modelTypeName == "Enterprise") {
                                        		values.inheritanceForThreshold = false;
                                        	} else {
                                        		values.inheritanceForThreshold = true;
                                        	}
                                        
                                        	values.poor = Math.floor(Math.random() * 50);
                                        	values.ok = Math.floor(Math.random() * 75 + 50);
                                        	values.good = Math.floor(Math.random() * 100 + 75);
                                        
                                        	let id = Things["PTCSC.ReportingBlock.TargetAndColorDefinition_DT"].AddOrUpdateDataTableEntry({
                                        		values: values
                                        	});
                                        
                                        }
                                        
                                        function setModelType(modelTypeUid) {
                                        	let modelType = Things["PTC.MfgModelImpl.Manager"].GetModelTypeByUid({
                                        		uid: modelTypeUid
                                        	});
                                        
                                        	return modelType.rows[0].name;
                                        }
                                        ]]>
                                        </code>
                                        <editorSettings>
                                            <json>
                                            <![CDATA[
                                            {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":3,"lineNumber":25},"position":{"column":3,"lineNumber":25}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":49,"foldedImports":false}}}}
                                            ]]>
                                            </json>
                                        </editorSettings>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetActualValue">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        result = 0;
                                        
                                        if(chart && chart.rows.length) {
                                        	let sum=0;
                                            chart.rows.toArray().forEach(el => {
                                            	sum += el.values1;
                                            });
                                            result = sum/chart.rows.length;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetConfiguredManagerForIdentifier">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var result;
                                        
                                        var componentManager = me.name;
                                        try {
                                            try {
                                                var mashupConfigTable = Things[componentManager].GetConfigurationTable({
                                                    tableName: "ManagerConfiguration" /* STRING */
                                                });
                                        
                                                if (mashupConfigTable && mashupConfigTable.rows.length > 0) {
                                                    mashupConfigTable.rows.toArray().forEach(row => {
                                                        if (row.id == identifier) {
                                                            result = row.managerThingName;
                                                        }
                                                    });
                                                }
                                            } catch (err) {
                                                logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                            }
                                            
                                            if(!result) {
                                            	let baseManager = Things["PTC.Base.EntryPoint"].GetConfiguredComponentManager();
                                                result = Things[baseManager].GetGlobalDefaultManagerForIdentifier({
                                                    uid: identifier /* STRING */
                                                });
                                            }    
                                        } catch (err) {
                                        	logger.error(me.name + " - " + err.fileName + ":" + err.lineNumber + " - " + err);
                                        	throw ("An error has occurred. Please check the script logs for more details.");
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getInitiativesForKpi">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        let dateValue = new Date();
                                        var calculatedDateValue = dateAddDays(dateValue, 10);
                                        
                                        var statusName = ["In Progress", "At Risk", "Completed"];
                                        var eqName = ["AC-CellFab", "BOS-CellFab", "Center01"];
                                        var initNames = ["Repair Engine", "Repair Drill", "Change battery"];
                                        
                                        let initTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "PTCSC.ReportingBlock.KpiInitiatives_DS"
                                        });
                                        
                                        for (var i = 0; i < 3; i++) {
                                        
                                        	let newEntry = {
                                        		status: statusName[Math.floor(Math.random() * 3)],
                                        		initiativeName: initNames[Math.floor(Math.random() * 3)],
                                        		target: 50,
                                        		achieved: 25,
                                        		change: 25,
                                        		equipment: eqName[Math.floor(Math.random() * 3)],
                                        		startDate: dateValue,
                                        		endDate: calculatedDateValue
                                        	};
                                        
                                        	initTable.AddRow(newEntry);
                                        
                                        }
                                        let result = initTable;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getKpi">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        let dateValue = new Date();
                                        dateValue = dateAddDays(dateValue, -100);
                                        
                                        let sampleRows = 1;
                                        var data01 = { dataShape: { fieldDefinitions: {} }, rows: [] };
                                        
                                        data01.dataShape.fieldDefinitions['actualValue'] = { name: 'actualValue', baseType: 'NUMBER' };
                                        data01.dataShape.fieldDefinitions['targetValue'] = { name: 'targetValue', baseType: 'NUMBER' };
                                        data01.dataShape.fieldDefinitions['gainPercentageValue'] = { name: 'gainPercentageValue', baseType: 'NUMBER' };
                                        data01.dataShape.fieldDefinitions['infotableValues'] = { name: 'infotableValues', baseType: 'INFOTABLE' };
                                        data01.dataShape.fieldDefinitions['timeframe'] = { name: 'timeframe', baseType: 'STRING' };
                                        data01.dataShape.fieldDefinitions['cardTitle'] = { name: 'cardTitle', baseType: 'STRING' };
                                        data01.dataShape.fieldDefinitions['progressValue'] = { name: 'progressValue', baseType: 'NUMBER' };
                                        data01.dataShape.fieldDefinitions['isAlerted'] = { name: 'isAlerted', baseType: 'NUMBER' };
                                        data01.dataShape.fieldDefinitions['improvment'] = { name: 'improvment', baseType: 'NUMBER' };
                                        
                                        var params01 = {
                                            json: data01 /* JSON */
                                        };
                                        
                                        var sampleChart = Resources["InfoTableFunctions"].FromJSON(params01);
                                        
                                        let lineRows = 100;
                                        
                                        var data02 = { dataShape: { fieldDefinitions: {} }, rows: [] };
                                        
                                        data02.dataShape.fieldDefinitions['values1'] = { name: 'values1', baseType: 'NUMBER' };
                                        data02.dataShape.fieldDefinitions['values2'] = { name: 'values2', baseType: 'NUMBER' };
                                        data02.dataShape.fieldDefinitions['timestamp'] = { name: 'timestamp', baseType: 'DATETIME' };
                                        
                                        var params02 = {
                                            json: data02 /* JSON */
                                        }; 
                                        
                                        let lineChart;
                                        
                                        if (filters) {
                                        	lineChart = me.GetTimeLossTrend({
                                        		modelUid: filters.equipmentUid
                                        	});
                                        }
                                        
                                        for (let i = 0; i < sampleRows; i++) {
                                        
                                            var newEntry = new Object();
                                            newEntry.gainPercentageValue = Math.floor(Math.random() * 50) + 1; // NUMBER
                                            newEntry.timeframe = "Since last month"; // DATETIME
                                            newEntry.targetValue = Math.floor(Math.random() * 83) + 1; // NUMBER
                                            newEntry.gainPercentageValue = Math.floor(Math.random() * 50) + 1; // NUMBER
                                            newEntry.infotableValues = lineChart; //INFOTABLE
                                            newEntry.cardTitle = "Total Loss Hours (hr)";
                                            newEntry.progressValue = Math.floor(Math.random() * 100) + 1; // NUMBER
                                        	newEntry.isAlerted = 0;
                                            newEntry.improvment = Math.random() < 0.5 ? -1 : 1; // NUMBER
                                            
                                            newEntry.actualValue = me.GetActualValue({
                                                chart: lineChart
                                            }).toFixed(3);
                                        
                                            sampleChart.AddRow(newEntry);
                                        }
                                        
                                        var result = sampleChart;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetOperationKPIManager">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        try {
                                        	var result = me.GetConfiguredManagerForIdentifier({
                                        		identifier: "PTC.OperationKPI.Manager"
                                        	});
                                        } catch (err) {
                                        	logger.error("Thing [{}] Service [{}] error at line [{}] : {}", me.name, err.fileName, err.lineNumber, err);
                                        	throw me.LocalizeToken({token: "PTC.Base.ErrorMessage"});
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetReasonCategories">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                        <FieldDefinition
                                         baseType="JSON"
                                         description=""
                                         name="editorSettings"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        try {
                                        	let reasonCodeManager = me.GetReasonCodeManager();
                                        	let operationKpiManager = me.GetOperationKPIManager();
                                            
                                            let offset;
                                            let limit;
                                            let filter;
                                        
                                        	let filterArray = Things[operationKpiManager].GetReasonTypeFilter({
                                        		includeLoss: true,
                                        		includeProduction: true,
                                        		includeAvailability: true,
                                        		includePositive: false,
                                        		includeNegative: true
                                        	}).split(",");
                                        
                                        	const inclusionQuery = {
                                        		filters: {
                                        			"fieldName": "name",
                                        			"type": "IN",
                                        			"values": filterArray
                                        		}
                                        	};
                                        
                                        	let inclusionResult = Things[reasonCodeManager].GetReasonTypes({
                                        		filter: inclusionQuery,
                                        		offset: offset,
                                        		limit: limit
                                        	});
                                        
                                        	let includedReasonTypeUids = inclusionResult.rows.toArray().map(row =>
                                        		row.uid
                                        	);
                                        
                                        	const query = {
                                        		"filters": {
                                        			"fieldName": "reasonTypeUid",
                                        			"type": "IN",
                                        			"values": includedReasonTypeUids
                                        		}
                                        	};
                                        
                                        	var result = Things[reasonCodeManager].GetReasonCategories({
                                        		filter: query,
                                        		offset: offset,
                                        		limit: limit
                                        	});
                                        } catch (err) {
                                        	logger.error("Thing [{}] Service [{}] error at line [{}] : {}", me.name, err.fileName, err.lineNumber, err);
                                        	throw (err);
                                        }
                                        ]]>
                                        </code>
                                        <editorSettings>
                                            <json>
                                            <![CDATA[
                                            {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":1,"lineNumber":1},"position":{"column":1,"lineNumber":1}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":51,"foldedImports":false}}}}
                                            ]]>
                                            </json>
                                        </editorSettings>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetReasonCodeManager">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        try {
                                        	var result = me.GetConfiguredManagerForIdentifier({
                                        		identifier: "PTC.ReasonCode.Manager"
                                        	});
                                        } catch (err) {
                                        	logger.error("Thing [{}] Service [{}] error at line [{}] : {}", me.name, err.fileName, err.lineNumber, err);
                                        	throw me.LocalizeToken({token: "PTC.Base.ErrorMessage"});
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetTimeLossTrend">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const SEC_TO_MIN = 3600;
                                        try {
                                        	var result = DataShapes["PTC.Action.ChartTrend"].CreateValues();
                                        
                                        	if (isValidData(modelUid, startDate, endDate)) {
                                        		const operationKpiManager = Things[me.GetOperationKPIManager()];
                                        		const mfgModelManager = Things[operationKpiManager.GetMfgModelManager()];
                                                let userOffset;
                                                let includeEndDateEdge = false;
                                        
                                        		let modelUidsArray = [];
                                        		let modelUids;
                                        		let reasonModelUid;
                                                let reasonCategoryUid;
                                        
                                        		let model = mfgModelManager.GetModel({
                                        			uid: modelUid
                                        		});
                                        
                                        		let modelType = mfgModelManager.GetModelType({
                                        			modelUid: modelUid
                                        		});
                                        
                                        		let pacemaker;
                                        
                                        		switch (modelType.name) {
                                        			case "Workunit":
                                        				if (model.isPacemaker) {
                                        					pacemaker = model;
                                        				} else {
                                        					let workCenter = mfgModelManager.GetWorkcenterFromWorkunit({
                                        						workunitUid: modelUid
                                        					});
                                        					pacemaker = mfgModelManager.GetPacemakerWorkUnitInWorkCenter({
                                        						workcenterUid: workCenter.uid
                                        					});
                                        					reasonModelUid = modelUid;
                                        				}
                                        				modelUidsArray.push(formatUid(pacemaker.uid));
                                        				break;
                                        			case "Workcenter":
                                        				pacemaker = mfgModelManager.GetPacemakerWorkUnitInWorkCenter({
                                        					workcenterUid: modelUid
                                        				});
                                        				modelUidsArray.push(formatUid(pacemaker.uid));
                                        				break;
                                        			default:
                                        				modelUids = me.GetEquipmentNetworkWorkUnitUids({
                                        					modelUid: modelUid,
                                        					pacemakersOnly: true
                                        				});
                                        		}
                                        
                                        		if (!modelUids) {
                                        			modelUids = modelUidsArray.join(",");
                                        		}
                                        
                                        		if (!reasonCategoryUid || (reasonCategoryUid.rows.length == 0)) {
                                        			reasonCategoryUid = me.GetReasonCategories({
                                        				filter: undefined,
                                        				offset: undefined,
                                        				limit: undefined
                                        			});
                                        		}
                                        
                                        		let initialValueTableJSON = {
                                        			dataShape: {
                                        				fieldDefinitions: {
                                        					losseventvalue: {
                                        						name: "losseventvalue",
                                        						baseType: "NUMBER"
                                        					},
                                        					eventtime: {
                                        						name: "eventtime",
                                        						baseType: "STRING"
                                        					} /* SQL DATE RETURNS AS STRING */
                                        				}
                                        			},
                                        			rows: {}
                                        		};
                                        
                                        		let initialValueTable = Resources["InfoTableFunctions"].FromJSON({
                                        			json: initialValueTableJSON
                                        		});
                                        
                                        		// CallTotalTrend for each category, union results
                                        		let unionResult = reasonCategoryUid.rows.toArray()
                                        			.map(row => callTotalTrend(operationKpiManager, startDate, endDate, modelUids, row.uid, reasonModelUid, userOffset, includeEndDateEdge))
                                        			.reduce((totalTable, currentTable) => union(totalTable, currentTable), initialValueTable);
                                        
                                        		// make result infotable from aggregate sum()
                                        		let resultTableJSON = {
                                        			dataShape: {
                                        				fieldDefinitions: {
                                        					losseventvalue: {
                                        						name: "losseventvalue",
                                        						baseType: "NUMBER"
                                        					},
                                        					eventtime: {
                                        						name: "eventtime",
                                        						baseType: "STRING"
                                        					}
                                        				}
                                        			},
                                        			rows: unionResult.rows.toArray().reduce((totalRows, currentRow) => sum(totalRows, currentRow), [])
                                        		};
                                        
                                        		resultTableJSON.rows.forEach(row => {
                                        			result.AddRow({
                                        				eventTime: dateAddMinutes(parseDate(row.eventtime, "yyyy-MM-dd HH:mm:ss.SSSSSSS ZZ"), -1 * userOffset),
                                        				lossEventValue: row.losseventvalue,
                                        			});
                                        		});
                                        
                                        		result.Sort({
                                        			name: 'eventTime',
                                        			ascending: true
                                        		});
                                        	}
                                            
                                            // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(PTCSC.ReportingBlock.GenericChart_DS)
                                            let chart = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                                infoTableName: "InfoTable",
                                                dataShapeName: "PTCSC.ReportingBlock.GenericChart_DS"
                                            });
                                            
                                            result.rows.toArray().forEach(el => {
                                            	chart.AddRow({
                                                	values1: el.lossEventValue,
                                                    timestamp: el.eventTime
                                                });
                                            });
                                        
                                            result = chart;
                                        
                                        } catch (err) {
                                        	logger.error("Thing [{}] Service [{}] error at line [{}] : {}", me.name, err.fileName, err.lineNumber, err);
                                        	throw (err);
                                        }
                                        
                                        function isValidData(modelUid, startDate, endDate) {
                                        	if (!modelUid || modelUid <= 0 || !startDate || !endDate) {
                                        		return false;
                                        	}
                                        
                                        	if (startDate > Date.now()) {
                                        		return false;
                                        	}
                                        	return true;
                                        }
                                        
                                        function union(totalTable, currentTable) {
                                        	return Resources["InfoTableFunctions"].Union({
                                        		t1: totalTable,
                                        		t2: currentTable
                                        	});
                                        }
                                        
                                        function sum(totalRows, currentRow) {
                                        	let index = totalRows.map(row => row.eventtime).indexOf(currentRow.eventtime);
                                        	if (index > -1) {
                                        		totalRows[index].losseventvalue += currentRow.losseventvalue / SEC_TO_MIN;
                                        	} else {
                                        		totalRows.push({
                                        			losseventvalue: currentRow.losseventvalue / SEC_TO_MIN,
                                        			eventtime: currentRow.eventtime
                                        		});
                                        	}
                                        	return totalRows;
                                        }
                                        
                                        function callTotalTrend(operationKpiManager, startDate, endDate, modelUids, reasonCategoryUid, reasonModelUid, userOffset, includeEndDateEdge) {
                                        
                                        	if (includeEndDateEdge) {
                                        		endDate = dateAddMilliseconds(endDate, 1);
                                        	}
                                        
                                        	let trendResult = operationKpiManager.GetTotalTrendInfos({
                                        		reasonCategoryUid: reasonCategoryUid,
                                        		startDateTime: startDate,
                                        		endDateTime: endDate,
                                        		modelUids: modelUids,
                                        		reasonTreeNodeUid: undefined,
                                        		reasonModelUid: reasonModelUid,
                                        		adjustingTimeOffset: userOffset
                                        	});
                                        	return trendResult;
                                        }
                                        
                                        function formatUid(uid) {
                                        	if (typeof uid === 'number')
                                        		return "" + parseInt(uid);
                                        	else
                                        		return uid;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getTrend">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        let dateValue = new Date();
                                        dateValue = dateAddDays(dateValue, -100);
                                        let values = [10, 15, 20, 25, 30, 35, 40, 45, 50, 60];
                                        
                                        let chart = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "PTCSC.ReportingBlock.GenericChart_DS"
                                        });
                                        
                                        for (var i = 0; i < 10; i++) {
                                        
                                        	var calculatedDateValue = dateAddDays(dateValue, i);
                                        	var newEntry = new Object();
                                        	newEntry.values1 = values[i];
                                        	newEntry.timestamp = calculatedDateValue;
                                        
                                        	chart.AddRow(newEntry);
                                        
                                        }
                                        
                                        let result = chart;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </ServiceImplementations>
                <Subscriptions></Subscriptions>
            </ThingShape>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <ImplementedShapes>
                <ImplementedShape
                 name="PTCSC.ReportingBlock.HelperThingShape_TS"
                 type="ThingShape"></ImplementedShape>
            </ImplementedShapes>
            <ThingProperties></ThingProperties>
        </Thing>
    </Things>
</Entities>
