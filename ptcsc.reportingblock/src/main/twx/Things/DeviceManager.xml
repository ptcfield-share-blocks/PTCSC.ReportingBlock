<?xml version="1.0" encoding="UTF-8"?>
<Entities
 majorVersion="9"
 minorVersion="3"
 universal="">
    <Things>
        <Thing
         aspect.isEditableExtensionObject="true"
         aspect.isExtension="true"
         description=""
         documentationContent=""
         effectiveThingPackage="ConfiguredThing"
         enabled="true"
         homeMashup=""
         identifier=""
         inheritedValueStream=""
         name="DeviceManager"
         projectName="PTCSC.ReportingBlock"
         published="false"
         tags=""
         thingTemplate="GenericThing"
         valueStream="">
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility></Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <ThingShape>
                <PropertyDefinitions></PropertyDefinitions>
                <ServiceDefinitions>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="true"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetDataForDetails">
                        <ResultType
                         aspect.dataShape="PTCSC.ReportingBlock.DetailsPageResult_DS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="endDate"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="propertyName"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="startDate"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="thingName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetPropertyValue">
                        <ResultType
                         aspect.dataShape="PTCSC.ReportingBlock.CardMashupResult_DS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="propertyName"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="thingName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetPropertyValueWithHistory">
                        <ResultType
                         aspect.dataShape="PTCSC.ReportingBlock.CardMashupResult_DS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="propertyName"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="thingName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetPropertyValueWithHistoryForParetoChart">
                        <ResultType
                         aspect.dataShape="PTCSC.ReportingBlock.CardMashupResult_DS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="propertyName"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="thingName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetPropertyValueWithHistoryForPieChart">
                        <ResultType
                         aspect.dataShape="PTCSC.ReportingBlock.CardMashupResult_DS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="propertyName"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="thingName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetPropertyValueWithHistoryForScheduleChart">
                        <ResultType
                         aspect.dataShape="PTCSC.ReportingBlock.CardMashupResult_DS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="propertyName"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="thingName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="GetPropertyValueWithHistoryForWaterfallChart">
                        <ResultType
                         aspect.dataShape="PTCSC.ReportingBlock.CardMashupResult_DS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="propertyName"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="thingName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="test">
                        <ResultType
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                </ServiceDefinitions>
                <EventDefinitions></EventDefinitions>
                <ServiceMappings></ServiceMappings>
                <ServiceImplementations>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetDataForDetails">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                        <FieldDefinition
                                         baseType="JSON"
                                         description=""
                                         name="editorSettings"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                          infoTableName: "InfoTable",
                                          dataShapeName: "PTCSC.ReportingBlock.DetailsPageResult_DS",
                                        });
                                        
                                        let propertiesHistory = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                          infoTableName: "InfoTable",
                                          dataShapeName: "PTCSC.ReportingBlock.PropertiesHistory_DS",
                                        });
                                        
                                        let startDate;
                                        let endDate;
                                        
                                        propertiesHistory = getHistoryForProperty(thingName, propertyName);
                                        
                                        let thingTemplateName = Things[thingName].GetThingTemplate();
                                        
                                        const userQuery = {
                                          filters: {
                                            type: "AND",
                                            filters: [],
                                          },
                                        };
                                        
                                        const filters = userQuery.filters.filters;
                                        
                                        filters.push({
                                          fieldName: "propertyName",
                                          type: "EQ",
                                          value: propertyName,
                                        });
                                        
                                        filters.push({
                                          fieldName: "thingTemplateName",
                                          type: "EQ",
                                          value: thingTemplateName.rows[0].name,
                                        });
                                        
                                        let devicesPropertiesTable = Things["PTCSC.ReportingBlock.PropertyConfig_DT"].QueryDataTableEntries(
                                          {
                                            maxItems: 50,
                                            query: userQuery,
                                          }
                                        );
                                        
                                        let deviceOverviewConfig = Things[
                                          "PTCSC.ReportingBlock.DeviceOverviewConfig_DT"
                                        ].QueryDataTableEntries({
                                          maxItems: 50,
                                          query: userQuery,
                                        });
                                        
                                        let currValue = getPropertyCurrentValue(thingName, propertyName); //done
                                        let lastValue = getPropertyLastValue(thingName, propertyName); //done
                                        let propDisplayName = getPropertyDisplayName(deviceOverviewConfig);
                                        let cardTitle = getCardTitle(devicesPropertiesTable);
                                        let unitOfMeasure = getUnitOfMeasure(devicesPropertiesTable);
                                        let changeFromLastValue = Math.floor(getChangeFromLastValue(currValue, lastValue));
                                        let averageValue = getPropertyAverage(thingName, propertyName);
                                        let averageValuendDateisplay = getAverageValuendDateisplay(devicesPropertiesTable);
                                        let changeFromLastValueForAverage = getChangeFromLastValueForAverage();
                                        let detailsMashupName = getDetailsMashupName(thingTemplateName, propertyName);
                                        let historicalMin = getHistoricalMin(thingName, propertyName);
                                        let historicalMax = getHistoricalMax(thingName, propertyName);
                                        
                                        let newEntry = {
                                          thingName: thingName,
                                          propertyName: propertyName,
                                          currentValue: currValue,
                                          lastValue: lastValue,
                                          history: propertiesHistory,
                                          variation: Math.floor(Math.random() * 4),
                                          changeFromLastValue: changeFromLastValue,
                                          unitOfMeasure: unitOfMeasure,
                                          cardTitle: cardTitle,
                                          propertyDisplayName: propDisplayName,
                                          averageValue: averageValue,
                                          averageValuendDateisplay: averageValuendDateisplay,
                                          variationForAverage: Math.floor(Math.random() * 4),
                                          changeFromLastValueForAverage: 0,
                                          historicalMin: historicalMin,
                                          historicalMax: historicalMax,
                                          isAlertendDate: 0,
                                        };
                                        
                                        result.AddRow(newEntry);
                                        
                                        function getPropertyCurrentValue(thingName, propertyName) {
                                          return Things[thingName][propertyName];
                                        }
                                        
                                        function getHistoricalMin(thingName, propertyName) {
                                          var query = {
                                            filters: {
                                              type: "NotMissingValue",
                                              fieldName: propertyName,
                                            },
                                          };
                                          let propertyLastValue = Things[thingName].QueryPropertyHistory({
                                            query: query,
                                          });
                                        
                                          let params = {
                                            sortColumn: propertyName,
                                            t: propertyLastValue,
                                            ascending: true,
                                          };
                                          let result = Resources["InfoTableFunctions"].Sort(params);
                                          return result.rows[0][propertyName];
                                        }
                                        
                                        function getHistoricalMax(thingName, propertyName) {
                                          var query = {
                                            filters: {
                                              type: "NotMissingValue",
                                              fieldName: propertyName,
                                            },
                                          };
                                          let propertyLastValue = Things[thingName].QueryPropertyHistory({
                                            query: query,
                                          });
                                        
                                          let params = {
                                            sortColumn: propertyName,
                                            t: propertyLastValue,
                                            ascending: false,
                                          };
                                          let result = Resources["InfoTableFunctions"].Sort(params);
                                          return result.rows[0][propertyName];
                                        }
                                        
                                        function getDetailsMashupName(thingTemplateName, propertyName) {
                                          const userQuery = {
                                            filters: {
                                              type: "AND",
                                              filters: [],
                                            },
                                          };
                                        
                                          const filters = userQuery.filters.filters;
                                        
                                          filters.push({
                                            fieldName: "propertyName",
                                            type: "EQ",
                                            value: propertyName,
                                          });
                                        
                                          filters.push({
                                            fieldName: "thingTemplateName",
                                            type: "EQ",
                                            value: thingTemplateName.rows[0].name,
                                          });
                                        
                                          let devicesPropertiesTable = Things[
                                            "PTCSC.ReportingBlock.DeviceOverviewConfig_DT"
                                          ].QueryDataTableEntries({
                                            maxItems: 50,
                                            query: userQuery,
                                          });
                                        
                                          return devicesPropertiesTable.rows[0].detailsMashupName;
                                        }
                                        
                                        function getPropertyLastValue(thingName, propertyName) {
                                          let propertyLastValue = Things[thingName].QueryPropertyHistory();
                                          if (propertyLastValue.length > 1) {
                                            return propertyLastValue.rows[1][propertyName];
                                          } else {
                                            return propertyLastValue.rows[0][propertyName];
                                          }
                                        }
                                        
                                        function getAverageValuendDateisplay(devicesPropertiesTable) {
                                          return devicesPropertiesTable.rows[0].averageValuendDateisplay;
                                        }
                                        
                                        function getChangeFromLastValueForAverage(averageValue) {
                                          return averageValue;
                                        }
                                        
                                        function getPropertyAverage(thingName, propertyName) {
                                          let averageConcat = "SUM_" + propertyName;
                                        
                                          var query = {
                                            filters: {
                                              type: "NotMissingValue",
                                              fieldName: propertyName,
                                            },
                                          };
                                        
                                          let queryPropTable = Things[thingName].QueryPropertyHistory({
                                            query: query,
                                          });
                                        
                                          let params = {
                                            t: queryPropTable,
                                            columns: propertyName,
                                            aggregates: "SUM",
                                          };
                                        
                                          let propertyAverage = Resources["InfoTableFunctions"].Aggregate(params);
                                        
                                          let average = propertyAverage.rows[0][averageConcat] / queryPropTable.length;
                                        
                                          return average.toFixed(1);
                                        }
                                        
                                        function getUnitOfMeasure(devicesPropertiesTable) {
                                          return devicesPropertiesTable.rows[0].unitOfMeasure;
                                        }
                                        
                                        function getPropertyDisplayName(devicesPropertiesTable) {
                                          return devicesPropertiesTable.rows[0].cardTitle;
                                        }
                                        
                                        function getCardTitle(devicesPropertiesTable) {
                                          return devicesPropertiesTable.rows[0].cardTitle;
                                        }
                                        
                                        function getChangeFromLastValue(currentValue, previousValue) {
                                          return Math.floor(Math.random() * 100);
                                        }
                                        
                                        function getHistoryForProperty(thingName, propertyName) {
                                          let propHistory = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                            infoTableName: "InfoTable",
                                            dataShapeName: "PTCSC.ReportingBlock.PropertiesHistoryForDetails_DS",
                                          });
                                          var query = {
                                            filters: {
                                              type: "NotMissingValue",
                                              fieldName: propertyName,
                                            },
                                          };
                                        
                                          if (startDate && endDate) {
                                            startDate = startDate;
                                            endDate = endDate;
                                          } else {
                                            startDate = dateAddDays(new Date(), -40);
                                            endDate = new Date();
                                          }
                                        
                                          let queryPropTable = Things[thingName].QueryPropertyHistory({
                                            query: query,
                                            startDate: startDate,
                                            endDate: endDate,
                                          });
                                        
                                          for (var i = 0; i < queryPropTable.length; i++) {
                                            let newEntry = {
                                              date: queryPropTable.rows[i].timestamp,
                                              value: queryPropTable[i][propertyName],
                                            };
                                            propHistory.AddRow(newEntry);
                                          }
                                          return propHistory;
                                        }
                                        ]]>
                                        </code>
                                        <editorSettings>
                                            <json>
                                            <![CDATA[
                                            {"viewState":{"viewState":{"firstPositionDeltaTop":-4,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":225}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":1,"lineNumber":259},"position":{"column":1,"lineNumber":259}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":259,"foldedImports":false}}}}
                                            ]]>
                                            </json>
                                        </editorSettings>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetPropertyValue">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                        <FieldDefinition
                                         baseType="JSON"
                                         description=""
                                         name="editorSettings"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                          infoTableName: "InfoTable",
                                          dataShapeName: "PTCSC.ReportingBlock.CardMashupResult_DS",
                                        });
                                        
                                        let thingTemplateName = Things[thingName].GetThingTemplate();
                                        
                                        const userQuery = {
                                          filters: {
                                            type: "AND",
                                            filters: [],
                                          },
                                        };
                                        
                                        const filters = userQuery.filters.filters;
                                        
                                        filters.push({
                                          fieldName: "propertyName",
                                          type: "EQ",
                                          value: propertyName,
                                        });
                                        
                                        filters.push({
                                          fieldName: "thingTemplateName",
                                          type: "EQ",
                                          value: thingTemplateName.rows[0].name,
                                        });
                                        
                                        let devicesPropertiesTable = Things["PTCSC.ReportingBlock.PropertyConfig_DT"].QueryDataTableEntries(
                                          {
                                            maxItems: 50,
                                            query: userQuery,
                                          }
                                        );
                                        
                                        let deviceOverviewTable = Things["PTCSC.ReportingBlock.DeviceOverviewConfig_DT"].QueryDataTableEntries({
                                          maxItems: 50,
                                          query: userQuery,
                                        });
                                        
                                        let currValue = getPropertyCurrentValue(thingName, propertyName); //done
                                        let lastValue = getPropertyLastValue(thingName, propertyName); //done
                                        let propDisplayName = getPropertyDisplayName(devicesPropertiesTable);
                                        let cardTitle = getCardTitle(deviceOverviewTable);
                                        let unitOfMeasure = getUnitOfMeasure(devicesPropertiesTable);
                                        let changeFromLastValue = Math.floor(getChangeFromLastValue(currValue, lastValue));
                                        let targetValue = getTargetValue(devicesPropertiesTable);
                                        let averageValue = getPropertyAverage(thingName, propertyName);
                                        let averageValueDisplay = getAverageValueDisplay(devicesPropertiesTable);
                                        let changeFromLastValueForAverage = getChangeFromLastValueForAverage();
                                        let min = getMin(devicesPropertiesTable);
                                        let max = getMax(devicesPropertiesTable);
                                        let detailsMashupName = getDetailsMashupName(thingTemplateName, propertyName);
                                        let variation = getVariation(currValue, lastValue, "GoodNegative");
                                        let isAlerted = getIsAlerted(currValue, min, max);
                                        
                                        let newEntry = {
                                          thingName: thingName,
                                          propertyName: propertyName,
                                          currentValue: currValue,
                                          targetValue: targetValue,
                                          lastValue: lastValue,
                                          variation: variation,
                                          changeFromLastValue: changeFromLastValue,
                                          propertyDisplayName: propDisplayName,
                                          cardTitle: cardTitle,
                                          unitOfMeasure: unitOfMeasure,
                                          averageValue: averageValue,
                                          averageValueDisplay: averageValueDisplay,
                                          variationForAverage: Math.floor(Math.random() * 4),
                                          changeFromLastValueForAverage: 0,
                                          min: min,
                                          max: max,
                                          isAlerted: isAlerted,
                                          detailsMashupName: detailsMashupName,
                                        };
                                        
                                        result.AddRow(newEntry);
                                        
                                        function getPropertyCurrentValue(thingName, propertyName) {
                                          return Things[thingName][propertyName];
                                        }
                                        
                                        function getIsAlerted(currValue, min, max){
                                          if(currValue < min || currValue > max) {
                                            return true;
                                          } else {
                                            return false;
                                          }
                                        }
                                        
                                        function getVariation(currentValue, lastValue, variationType){
                                          switch(variationType) {
                                            case 'GoodPositive':
                                              return 0;
                                            case 'GoodNevative':
                                              return 1;
                                            default:
                                            logger.error("Wrong variation type");
                                          }
                                        }
                                        
                                        function getPropertyLastValue(thingName, propertyName) {
                                          let propertyLastValue = Things[thingName].QueryPropertyHistory();
                                          if (propertyLastValue.length > 1) {
                                            return propertyLastValue.rows[1][propertyName];
                                          } else {
                                            return propertyLastValue.rows[0][propertyName];
                                          }
                                        }
                                        
                                        function getDetailsMashupName(thingTemplateName, propertyName) {
                                          const userQuery = {
                                            filters: {
                                              type: "AND",
                                              filters: [],
                                            },
                                          };
                                        
                                          const filters = userQuery.filters.filters;
                                          filters.push({
                                            fieldName: "propertyName",
                                            type: "EQ",
                                            value: propertyName,
                                          });
                                        
                                          filters.push({
                                            fieldName: "thingTemplateName",
                                            type: "EQ",
                                            value: thingTemplateName.rows[0].name,
                                          });
                                        
                                          let devicesPropertiesTable = Things[
                                            "PTCSC.ReportingBlock.DeviceDetailsConfig_DT"
                                          ].QueryDataTableEntries({
                                            maxItems: 50,
                                            query: userQuery,
                                          });
                                        
                                          return devicesPropertiesTable.rows[0].detailsMashupName;
                                        }
                                        
                                        function getAverageValueDisplay(devicesPropertiesTable) {
                                          return devicesPropertiesTable.rows[0].averageValueDisplay;
                                        }
                                        
                                        function getMin(){
                                          return devicesPropertiesTable.rows[0].min;
                                        }
                                        
                                        function getMax() {
                                          return devicesPropertiesTable.rows[0].max;
                                        }
                                        
                                        function getChangeFromLastValueForAverage(averageValue) {
                                          return averageValue;
                                        }
                                        
                                        function getPropertyAverage(thingName, propertyName) {
                                          let averageConcat = "SUM_" + propertyName;
                                        
                                          var query = {
                                            filters: {
                                              type: "NotMissingValue",
                                              fieldName: propertyName,
                                            },
                                          };
                                        
                                          let queryPropTable = Things[thingName].QueryPropertyHistory({
                                            query: query,
                                          });
                                        
                                          let params = {
                                            t: queryPropTable,
                                            columns: propertyName,
                                            aggregates: "SUM",
                                          };
                                        
                                          let propertyAverage = Resources["InfoTableFunctions"].Aggregate(params);
                                        
                                          let average = propertyAverage.rows[0][averageConcat] / queryPropTable.length;
                                        
                                          return average.toFixed(1);
                                        }
                                        
                                        function getTargetValue(devicesPropertiesTable) {
                                          return devicesPropertiesTable.rows[0].target;
                                        }
                                        
                                        function getUnitOfMeasure(devicesPropertiesTable) {
                                          return devicesPropertiesTable.rows[0].unitOfMeasure;
                                        }
                                        
                                        function getPropertyDisplayName(devicesPropertiesTable) {
                                          return devicesPropertiesTable.rows[0].propertyDisplayName;
                                        }
                                        
                                        function getCardTitle(devicesPropertiesTable) {
                                          return devicesPropertiesTable.rows[0].cardTitle;
                                        }
                                        
                                        function getChangeFromLastValue(currentValue, previousValue) {
                                          return Math.floor(Math.random() * 100);
                                        }
                                        ]]>
                                        </code>
                                        <editorSettings>
                                            <json>
                                            <![CDATA[
                                            {"viewState":{"viewState":{"firstPositionDeltaTop":-15,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":45}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":23,"lineNumber":74},"position":{"column":23,"lineNumber":74}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":204,"foldedImports":false}}}}
                                            ]]>
                                            </json>
                                        </editorSettings>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetPropertyValueWithHistory">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                        <FieldDefinition
                                         baseType="JSON"
                                         description=""
                                         name="editorSettings"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                          infoTableName: "InfoTable",
                                          dataShapeName: "PTCSC.ReportingBlock.CardMashupResult_DS",
                                        });
                                        
                                        let propertiesHistory = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                            infoTableName: "InfoTable",
                                            dataShapeName: "PTCSC.ReportingBlock.PropertiesHistory_DS"
                                        });
                                        
                                        propertiesHistory = getHistoryForProperty(thingName, propertyName);
                                        
                                        let thingTemplateName = Things[thingName].GetThingTemplate();
                                        
                                        const userQuery = {
                                          filters: {
                                            type: "AND",
                                            filters: [],
                                          },
                                        };
                                        
                                        const filters = userQuery.filters.filters;
                                        
                                        filters.push({
                                          fieldName: "propertyName",
                                          type: "EQ",
                                          value: propertyName,
                                        });
                                        
                                        filters.push({
                                          fieldName: "thingTemplateName",
                                          type: "EQ",
                                          value: thingTemplateName.rows[0].name,
                                        });
                                        
                                        let devicesPropertiesTable = Things["PTCSC.ReportingBlock.PropertyConfig_DT"].QueryDataTableEntries(
                                          {
                                            maxItems: 50,
                                            query: userQuery,
                                          }
                                        );
                                        
                                        let deviceOverviewTable = Things[
                                          "PTCSC.ReportingBlock.DeviceOverviewConfig_DT"
                                        ].QueryDataTableEntries({
                                          maxItems: 50,
                                          query: userQuery,
                                        });
                                        
                                        let currValue = getPropertyCurrentValue(thingName, propertyName); //done
                                        let lastValue = getPropertyLastValue(thingName, propertyName); //done
                                        let propDisplayName = getPropertyDisplayName(devicesPropertiesTable);
                                        let cardTitle = getCardTitle(deviceOverviewTable);
                                        let unitOfMeasure = getUnitOfMeasure(devicesPropertiesTable);
                                        let changeFromLastValue = Math.floor(getChangeFromLastValue(currValue, lastValue));
                                        let targetValue = getTargetValue(devicesPropertiesTable);
                                        let averageValue = getPropertyAverage(thingName, propertyName);
                                        let averageValueDisplay = getAverageValueDisplay(devicesPropertiesTable);
                                        let changeFromLastValueForAverage = getChangeFromLastValueForAverage();
                                        let detailsMashupName = getDetailsMashupName(thingTemplateName, propertyName);
                                        let min = getMin(devicesPropertiesTable);
                                        let max = getMax(devicesPropertiesTable);
                                        let isAlerted = getIsAlerted(currValue, min, max);
                                        
                                        let newEntry = {
                                          thingName: thingName,
                                          propertyName: propertyName,
                                          currentValue: currValue,
                                          targetValue: targetValue,
                                          lastValue: lastValue,
                                          variation: Math.floor(Math.random() * 4),
                                          changeFromLastValue: changeFromLastValue,
                                          propertyDisplayName: propDisplayName,
                                          cardTitle: cardTitle,
                                          unitOfMeasure: unitOfMeasure,
                                          averageValue: averageValue,
                                          averageValueDisplay: averageValueDisplay,
                                          variationForAverage: Math.floor(Math.random() * 4),
                                          changeFromLastValueForAverage: 0,
                                          history: propertiesHistory,
                                          min: min,
                                          max: max,
                                          isAlerted: isAlerted,
                                          detailsMashupName: detailsMashupName,
                                        };
                                        
                                        result.AddRow(newEntry);
                                        
                                        function getMin() {
                                          return devicesPropertiesTable.rows[0].min;
                                        }
                                        
                                        function getMax() {
                                          return devicesPropertiesTable.rows[0].max;
                                        }
                                        
                                        function getPropertyCurrentValue(thingName, propertyName) {
                                          return Things[thingName][propertyName];
                                        }
                                        
                                        function getIsAlerted(currValue, min, max) {
                                          if (currValue < min || currValue > max) {
                                            return true;
                                          } else {
                                            return false;
                                          }
                                        }
                                        
                                        function getDetailsMashupName(thingTemplateName, propertyName) {
                                          const userQuery = {
                                            filters: {
                                              type: "AND",
                                              filters: [],
                                            },
                                          };
                                        
                                          const filters = userQuery.filters.filters;
                                        
                                          filters.push({
                                            fieldName: "propertyName",
                                            type: "EQ",
                                            value: propertyName,
                                          });
                                        
                                          filters.push({
                                            fieldName: "thingTemplateName",
                                            type: "EQ",
                                            value: thingTemplateName.rows[0].name,
                                          });
                                        
                                          let devicesPropertiesTable = Things[
                                            "PTCSC.ReportingBlock.DeviceDetailsConfig_DT"
                                          ].QueryDataTableEntries({
                                            maxItems: 50,
                                            query: userQuery,
                                          });
                                        
                                          return devicesPropertiesTable.rows[0].detailsMashupName;
                                        }
                                        
                                        function getPropertyLastValue(thingName, propertyName) {
                                          let propertyLastValue = Things[thingName].QueryPropertyHistory();
                                          if (propertyLastValue.length > 1) {
                                            return propertyLastValue.rows[1][propertyName];
                                          } else {
                                            return propertyLastValue.rows[0][propertyName];
                                          }
                                        }
                                        
                                        function getAverageValueDisplay(devicesPropertiesTable) {
                                          return devicesPropertiesTable.rows[0].averageValueDisplay;
                                        }
                                        
                                        function getChangeFromLastValueForAverage(averageValue) {
                                          return averageValue;
                                        }
                                        
                                        function getPropertyAverage(thingName, propertyName) {
                                          let averageConcat = "SUM_" + propertyName;
                                        
                                          let queryPropTable = Things[thingName].QueryPropertyHistory();
                                        
                                          let params = {
                                            t: queryPropTable,
                                            columns: propertyName,
                                            aggregates: "SUM",
                                          };
                                        
                                          let propertyAverage = Resources["InfoTableFunctions"].Aggregate(params);
                                        
                                          let average = propertyAverage.rows[0][averageConcat] / queryPropTable.length;
                                        
                                          return average.toFixed(1);
                                        }
                                        
                                        function getTargetValue(devicesPropertiesTable) {
                                          return devicesPropertiesTable.rows[0].target;
                                        }
                                        
                                        function getUnitOfMeasure(devicesPropertiesTable) {
                                          return devicesPropertiesTable.rows[0].unitOfMeasure;
                                        }
                                        
                                        function getPropertyDisplayName(devicesPropertiesTable) {
                                          return devicesPropertiesTable.rows[0].propertyDisplayName;
                                        }
                                        
                                        function getCardTitle(devicesPropertiesTable) {
                                          return devicesPropertiesTable.rows[0].cardTitle;
                                        }
                                        
                                        function getChangeFromLastValue(currentValue, previousValue) {
                                          return Math.floor(Math.random() * 100);
                                        }
                                        
                                        function getHistoryForProperty(thingName, propertyName) {
                                          let propHistory = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                            infoTableName: "InfoTable",
                                            dataShapeName: "PTCSC.ReportingBlock.PropertiesHistory_DS",
                                          });
                                          var query = {
                                            filters: {
                                              type: "NotMissingValue",
                                              fieldName: propertyName
                                            },
                                          };
                                        
                                          let queryPropTable = Things[thingName].QueryPropertyHistory({
                                            query: query,
                                          });
                                        
                                          for (var i = 0; i < 5; i++) {
                                            let newEntry = {
                                              date: dateFormat(queryPropTable[i].timestamp, "HH:MM:SS"),
                                              value: queryPropTable[i][propertyName],
                                            };
                                            propHistory.AddRow(newEntry);
                                          }
                                          return propHistory;
                                        }
                                        ]]>
                                        </code>
                                        <editorSettings>
                                            <json>
                                            <![CDATA[
                                            {"viewState":{"viewState":{"firstPositionDeltaTop":-11,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":true,"selectionStart":{"column":18,"lineNumber":62},"position":{"column":40,"lineNumber":62}}],"contributionsState":{"editor.contrib.wordHighlighter":true,"editor.contrib.folding":{"provider":"indent","lineCount":223,"foldedImports":false}}}}
                                            ]]>
                                            </json>
                                        </editorSettings>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetPropertyValueWithHistoryForParetoChart">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                        <FieldDefinition
                                         baseType="JSON"
                                         description=""
                                         name="editorSettings"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                          infoTableName: "InfoTable",
                                          dataShapeName: "PTCSC.ReportingBlock.CardMashupResult_DS",
                                        });
                                        
                                        let propertiesHistory = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                          infoTableName: "InfoTable",
                                          dataShapeName: "PTCSC.ReportingBlock.WaterfallChartDisplay_DS",
                                        });
                                        
                                        propertiesHistory = getHistoryForProperty(thingName, propertyName);
                                        
                                        let thingTemplateName = Things[thingName].GetThingTemplate();
                                        
                                        const userQuery = {
                                          filters: {
                                            type: "AND",
                                            filters: [],
                                          },
                                        };
                                        
                                        const filters = userQuery.filters.filters;
                                        
                                        filters.push({
                                          fieldName: "propertyName",
                                          type: "EQ",
                                          value: propertyName,
                                        });
                                        
                                        filters.push({
                                          fieldName: "thingTemplateName",
                                          type: "EQ",
                                          value: thingTemplateName.rows[0].name,
                                        });
                                        
                                        let devicesPropertiesTable = Things["PTCSC.ReportingBlock.PropertyConfig_DT"].QueryDataTableEntries(
                                          {
                                            maxItems: 50,
                                            query: userQuery,
                                          }
                                        );
                                        
                                        let deviceOverviewTable = Things[
                                          "PTCSC.ReportingBlock.DeviceOverviewConfig_DT"
                                        ].QueryDataTableEntries({
                                          maxItems: 50,
                                          query: userQuery,
                                        });
                                        
                                        let currValue = getPropertyCurrentValue(thingName, propertyName); //done
                                        let lastValue = getPropertyLastValue(thingName, propertyName); //done
                                        let propDisplayName = getPropertyDisplayName(devicesPropertiesTable);
                                        let cardTitle = getCardTitle(deviceOverviewTable);
                                        let unitOfMeasure = getUnitOfMeasure(devicesPropertiesTable);
                                        let changeFromLastValue = Math.floor(getChangeFromLastValue(currValue, lastValue));
                                        let targetValue = getTargetValue(devicesPropertiesTable);
                                        let averageValue = getPropertyAverage(thingName, propertyName);
                                        let averageValueDisplay = getAverageValueDisplay(devicesPropertiesTable);
                                        let changeFromLastValueForAverage = getChangeFromLastValueForAverage();
                                        let detailsMashupName = getDetailsMashupName(thingTemplateName, propertyName);
                                        let min = getMin(devicesPropertiesTable);
                                        let max = getMax(devicesPropertiesTable);
                                        let isAlerted = getIsAlerted(currValue, min, max);
                                        
                                        let newEntry = {
                                          thingName: thingName,
                                          propertyName: propertyName,
                                          currentValue: currValue,
                                          targetValue: targetValue,
                                          lastValue: lastValue,
                                          variation: Math.floor(Math.random() * 4),
                                          changeFromLastValue: changeFromLastValue,
                                          propertyDisplayName: propDisplayName,
                                          cardTitle: cardTitle,
                                          unitOfMeasure: unitOfMeasure,
                                          averageValue: averageValue,
                                          averageValueDisplay: averageValueDisplay,
                                          variationForAverage: Math.floor(Math.random() * 4),
                                          changeFromLastValueForAverage: 0,
                                          paretoChartHistory: propertiesHistory,
                                          min: min,
                                          max: max,
                                          isAlerted: isAlerted,
                                          detailsMashupName: detailsMashupName,
                                        };
                                        
                                        result.AddRow(newEntry);
                                        
                                        function getMin() {
                                          return devicesPropertiesTable.rows[0].min;
                                        }
                                        
                                        function getMax() {
                                          return devicesPropertiesTable.rows[0].max;
                                        }
                                        
                                        function getIsAlerted(currValue, min, max) {
                                          if (currValue < min || currValue > max) {
                                            return true;
                                          } else {
                                            return false;
                                          }
                                        }
                                        
                                        function getPropertyCurrentValue(thingName, propertyName) {
                                          return Things[thingName][propertyName];
                                        }
                                        
                                        function getPropertyLastValue(thingName, propertyName) {
                                          let propertyLastValue = Things[thingName].QueryPropertyHistory();
                                          if (propertyLastValue.length > 1) {
                                            return propertyLastValue.rows[1][propertyName];
                                          } else {
                                            return propertyLastValue.rows[0][propertyName];
                                          }
                                        }
                                        
                                        function getDetailsMashupName(thingTemplateName, propertyName) {
                                          const userQuery = {
                                            filters: {
                                              type: "AND",
                                              filters: [],
                                            },
                                          };
                                        
                                          const filters = userQuery.filters.filters;
                                        
                                          filters.push({
                                            fieldName: "propertyName",
                                            type: "EQ",
                                            value: propertyName,
                                          });
                                        
                                          filters.push({
                                            fieldName: "thingTemplateName",
                                            type: "EQ",
                                            value: thingTemplateName.rows[0].name,
                                          });
                                        
                                          let devicesPropertiesTable = Things[
                                            "PTCSC.ReportingBlock.DeviceDetailsConfig_DT"
                                          ].QueryDataTableEntries({
                                            maxItems: 50,
                                            query: userQuery,
                                          });
                                        
                                          return devicesPropertiesTable.rows[0].detailsMashupName;
                                        }
                                        
                                        function getAverageValueDisplay(devicesPropertiesTable) {
                                          return devicesPropertiesTable.rows[0].averageValueDisplay;
                                        }
                                        
                                        function getChangeFromLastValueForAverage(averageValue) {
                                          return averageValue;
                                        }
                                        
                                        function getPropertyAverage(thingName, propertyName) {
                                          let averageConcat = "SUM_" + propertyName;
                                        
                                          let queryPropTable = Things[thingName].QueryPropertyHistory();
                                        
                                          let params = {
                                            t: queryPropTable,
                                            columns: propertyName,
                                            aggregates: "SUM",
                                          };
                                        
                                          let propertyAverage = Resources["InfoTableFunctions"].Aggregate(params);
                                        
                                          let average = propertyAverage.rows[0][averageConcat] / queryPropTable.length;
                                        
                                          return average.toFixed(1);
                                        }
                                        
                                        function getTargetValue(devicesPropertiesTable) {
                                          return devicesPropertiesTable.rows[0].target;
                                        }
                                        
                                        function getUnitOfMeasure(devicesPropertiesTable) {
                                          return devicesPropertiesTable.rows[0].unitOfMeasure;
                                        }
                                        
                                        function getPropertyDisplayName(devicesPropertiesTable) {
                                          return devicesPropertiesTable.rows[0].propertyDisplayName;
                                        }
                                        
                                        function getCardTitle(devicesPropertiesTable) {
                                          return devicesPropertiesTable.rows[0].cardTitle;
                                        }
                                        
                                        function getChangeFromLastValue(currentValue, previousValue) {
                                          return Math.floor(Math.random() * 100);
                                        }
                                        
                                        function getHistoryForProperty(thingName, propertyName) {
                                          let propHistory = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                            infoTableName: "InfoTable",
                                            dataShapeName: "PTCSC.ReportingBlock.ParetoChartDisplay_DS",
                                          });
                                          var query = {
                                            filters: {
                                              type: "NotMissingValue",
                                              fieldName: propertyName
                                            },
                                          };
                                        
                                          let queryPropTable = Things[thingName].QueryPropertyHistory({
                                            query: query,
                                          });
                                        
                                          for (var i = 0; i < 5; i++) {
                                            let newEntry = {
                                              name: "Item " + i + 1,
                                              value1: Math.floor(Math.random() * 20),
                                              value2: Math.floor(Math.random() * 20),
                                            };
                                            propHistory.AddRow(newEntry);
                                          }
                                          return propHistory;
                                        }
                                        ]]>
                                        </code>
                                        <editorSettings>
                                            <json>
                                            <![CDATA[
                                            {"viewState":{"viewState":{"firstPositionDeltaTop":-2,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":66}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":2,"lineNumber":95},"position":{"column":2,"lineNumber":95}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":221,"foldedImports":false}}}}
                                            ]]>
                                            </json>
                                        </editorSettings>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetPropertyValueWithHistoryForPieChart">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                        <FieldDefinition
                                         baseType="JSON"
                                         description=""
                                         name="editorSettings"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                          infoTableName: "InfoTable",
                                          dataShapeName: "PTCSC.ReportingBlock.CardMashupResult_DS",
                                        });
                                        
                                        let propertiesHistory = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                          infoTableName: "InfoTable",
                                          dataShapeName: "PTCSC.ReportingBlock.PieChartDisplay_DS",
                                        });
                                        
                                        propertiesHistory = getHistoryForProperty(thingName, propertyName);
                                        
                                        let thingTemplateName = Things[thingName].GetThingTemplate();
                                        
                                        const userQuery = {
                                          filters: {
                                            type: "AND",
                                            filters: [],
                                          },
                                        };
                                        
                                        const filters = userQuery.filters.filters;
                                        
                                        filters.push({
                                          fieldName: "propertyName",
                                          type: "EQ",
                                          value: propertyName,
                                        });
                                        
                                        filters.push({
                                          fieldName: "thingTemplateName",
                                          type: "EQ",
                                          value: thingTemplateName.rows[0].name,
                                        });
                                        
                                        let devicesPropertiesTable = Things["PTCSC.ReportingBlock.PropertyConfig_DT"].QueryDataTableEntries(
                                          {
                                            maxItems: 50,
                                            query: userQuery,
                                          }
                                        );
                                        
                                        let deviceOverviewTable = Things[
                                          "PTCSC.ReportingBlock.DeviceOverviewConfig_DT"
                                        ].QueryDataTableEntries({
                                          maxItems: 50,
                                          query: userQuery,
                                        });
                                        
                                        let currValue = getPropertyCurrentValue(thingName, propertyName); //done
                                        let lastValue = getPropertyLastValue(thingName, propertyName); //done
                                        let propDisplayName = getPropertyDisplayName(devicesPropertiesTable);
                                        let cardTitle = getCardTitle(deviceOverviewTable);
                                        let unitOfMeasure = getUnitOfMeasure(devicesPropertiesTable);
                                        let changeFromLastValue = Math.floor(getChangeFromLastValue(currValue, lastValue));
                                        let targetValue = getTargetValue(devicesPropertiesTable);
                                        let averageValue = getPropertyAverage(thingName, propertyName);
                                        let averageValueDisplay = getAverageValueDisplay(devicesPropertiesTable);
                                        let changeFromLastValueForAverage = getChangeFromLastValueForAverage();
                                        let detailsMashupName = getDetailsMashupName(thingTemplateName, propertyName);
                                        let min = getMin(devicesPropertiesTable);
                                        let max = getMax(devicesPropertiesTable);
                                        let isAlerted = getIsAlerted(currValue, min, max);
                                        
                                        let newEntry = {
                                          thingName: thingName,
                                          propertyName: propertyName,
                                          currentValue: currValue,
                                          targetValue: targetValue,
                                          lastValue: lastValue,
                                          variation: Math.floor(Math.random() * 4),
                                          changeFromLastValue: changeFromLastValue,
                                          propertyDisplayName: propDisplayName,
                                          cardTitle: cardTitle,
                                          unitOfMeasure: unitOfMeasure,
                                          averageValue: averageValue,
                                          averageValueDisplay: averageValueDisplay,
                                          variationForAverage: Math.floor(Math.random() * 4),
                                          changeFromLastValueForAverage: 0,
                                          pieChartHistory: propertiesHistory,
                                          min: min,
                                          max: max,
                                          isAlerted: isAlerted,
                                          detailsMashupName: detailsMashupName,
                                        };
                                        
                                        result.AddRow(newEntry);
                                        
                                        function getPropertyCurrentValue(thingName, propertyName) {
                                          return Things[thingName][propertyName];
                                        }
                                        
                                        function getMin() {
                                          return devicesPropertiesTable.rows[0].min;
                                        }
                                        
                                        function getMax() {
                                          return devicesPropertiesTable.rows[0].max;
                                        }
                                        
                                        function getIsAlerted(currValue, min, max) {
                                          if (currValue < min || currValue > max) {
                                            return true;
                                          } else {
                                            return false;
                                          }
                                        }
                                        
                                        function getPropertyLastValue(thingName, propertyName) {
                                          let propertyLastValue = Things[thingName].QueryPropertyHistory();
                                          if (propertyLastValue.length > 1) {
                                            return propertyLastValue.rows[1][propertyName];
                                          } else {
                                            return propertyLastValue.rows[0][propertyName];
                                          }
                                        }
                                        
                                        function getDetailsMashupName(thingTemplateName, propertyName) {
                                          const userQuery = {
                                            filters: {
                                              type: "AND",
                                              filters: [],
                                            },
                                          };
                                        
                                          const filters = userQuery.filters.filters;
                                        
                                          filters.push({
                                            fieldName: "propertyName",
                                            type: "EQ",
                                            value: propertyName,
                                          });
                                        
                                          filters.push({
                                            fieldName: "thingTemplateName",
                                            type: "EQ",
                                            value: thingTemplateName.rows[0].name,
                                          });
                                        
                                          let devicesPropertiesTable = Things[
                                            "PTCSC.ReportingBlock.DeviceDetailsConfig_DT"
                                          ].QueryDataTableEntries({
                                            maxItems: 50,
                                            query: userQuery,
                                          });
                                        
                                          return devicesPropertiesTable.rows[0].detailsMashupName;
                                        }
                                        
                                        function getAverageValueDisplay(devicesPropertiesTable) {
                                          return devicesPropertiesTable.rows[0].averageValueDisplay;
                                        }
                                        
                                        function getChangeFromLastValueForAverage(averageValue) {
                                          return averageValue;
                                        }
                                        
                                        function getPropertyAverage(thingName, propertyName) {
                                          let averageConcat = "SUM_" + propertyName;
                                        
                                          let queryPropTable = Things[thingName].QueryPropertyHistory();
                                        
                                          let params = {
                                            t: queryPropTable,
                                            columns: propertyName,
                                            aggregates: "SUM",
                                          };
                                        
                                          let propertyAverage = Resources["InfoTableFunctions"].Aggregate(params);
                                        
                                          let average = propertyAverage.rows[0][averageConcat] / queryPropTable.length;
                                        
                                          return average.toFixed(1);
                                        }
                                        
                                        function getTargetValue(devicesPropertiesTable) {
                                          return devicesPropertiesTable.rows[0].target;
                                        }
                                        
                                        function getUnitOfMeasure(devicesPropertiesTable) {
                                          return devicesPropertiesTable.rows[0].unitOfMeasure;
                                        }
                                        
                                        function getPropertyDisplayName(devicesPropertiesTable) {
                                          return devicesPropertiesTable.rows[0].propertyDisplayName;
                                        }
                                        
                                        function getCardTitle(devicesPropertiesTable) {
                                          return devicesPropertiesTable.rows[0].cardTitle;
                                        }
                                        
                                        function getChangeFromLastValue(currentValue, previousValue) {
                                          return Math.floor(Math.random() * 100);
                                        }
                                        
                                        function getHistoryForProperty(thingName, propertyName) {
                                          let propHistory = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                            infoTableName: "InfoTable",
                                            dataShapeName: "PTCSC.ReportingBlock.PieChartDisplay_DS",
                                          });
                                          var query = {
                                            filters: {
                                              type: "NotMissingValue",
                                              fieldName: propertyName
                                            },
                                          };
                                        
                                          let queryPropTable = Things[thingName].QueryPropertyHistory({
                                            query: query,
                                          });
                                        
                                          for (var i = 0; i < 5; i++) {
                                            let newEntry = {
                                              date: queryPropTable[i].timestamp,
                                              value: queryPropTable[i][propertyName],
                                              color: i+1,
                                            };
                                            propHistory.AddRow(newEntry);
                                          }
                                          return propHistory;
                                        }
                                        ]]>
                                        </code>
                                        <editorSettings>
                                            <json>
                                            <![CDATA[
                                            {"viewState":{"viewState":{"firstPositionDeltaTop":-14,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":73}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":14,"lineNumber":98},"position":{"column":14,"lineNumber":98}}],"contributionsState":{"editor.contrib.wordHighlighter":true,"editor.contrib.folding":{"provider":"indent","lineCount":221,"foldedImports":false}}}}
                                            ]]>
                                            </json>
                                        </editorSettings>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetPropertyValueWithHistoryForScheduleChart">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                        <FieldDefinition
                                         baseType="JSON"
                                         description=""
                                         name="editorSettings"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                          infoTableName: "InfoTable",
                                          dataShapeName: "PTCSC.ReportingBlock.CardMashupResult_DS",
                                        });
                                        
                                        let thingTemplateName = Things[thingName].GetThingTemplate();
                                        
                                        const userQuery = {
                                          filters: {
                                            type: "AND",
                                            filters: [],
                                          },
                                        };
                                        
                                        const filters = userQuery.filters.filters;
                                        
                                        filters.push({
                                          fieldName: "propertyName",
                                          type: "EQ",
                                          value: propertyName,
                                        });
                                        
                                        filters.push({
                                          fieldName: "thingTemplateName",
                                          type: "EQ",
                                          value: thingTemplateName.rows[0].name,
                                        });
                                        
                                        let devicesPropertiesTable = Things["PTCSC.ReportingBlock.PropertyConfig_DT"].QueryDataTableEntries(
                                          {
                                            maxItems: 50,
                                            query: userQuery,
                                          }
                                        );
                                        
                                        let deviceOverviewTable = Things[
                                          "PTCSC.ReportingBlock.DeviceOverviewConfig_DT"
                                        ].QueryDataTableEntries({
                                          maxItems: 50,
                                          query: userQuery,
                                        });
                                        
                                        let currValue = getPropertyCurrentValue(thingName, propertyName); //done
                                        let lastValue = getPropertyLastValue(thingName, propertyName); //done
                                        let propDisplayName = getPropertyDisplayName(devicesPropertiesTable);
                                        let cardTitle = getCardTitle(deviceOverviewTable);
                                        let unitOfMeasure = getUnitOfMeasure(devicesPropertiesTable);
                                        let changeFromLastValue = Math.floor(getChangeFromLastValue(currValue, lastValue));
                                        let targetValue = getTargetValue(devicesPropertiesTable);
                                        let averageValue = getPropertyAverage(thingName, propertyName);
                                        let averageValueDisplay = getAverageValueDisplay(devicesPropertiesTable);
                                        let changeFromLastValueForAverage = getChangeFromLastValueForAverage();
                                        let detailsMashupName = getDetailsMashupName(thingTemplateName, propertyName);
                                        let scheduleChartData = getScheduleChartValues(thingName, propertyName);
                                        let min = getMin(devicesPropertiesTable);
                                        let max = getMax(devicesPropertiesTable);
                                        let isAlerted = getIsAlerted(currValue, min, max);
                                        
                                        let newEntry = {
                                          thingName: thingName,
                                          propertyName: propertyName,
                                          currentValue: currValue,
                                          targetValue: targetValue,
                                          lastValue: lastValue,
                                          variation: Math.floor(Math.random() * 4),
                                          changeFromLastValue: changeFromLastValue,
                                          propertyDisplayName: propDisplayName,
                                          cardTitle: cardTitle,
                                          unitOfMeasure: unitOfMeasure,
                                          averageValue: averageValue,
                                          averageValueDisplay: averageValueDisplay,
                                          variationForAverage: Math.floor(Math.random() * 4),
                                          changeFromLastValueForAverage: 0,
                                          scheduleChartHistory: scheduleChartData,
                                          min: min,
                                          max: max,
                                          isAlerted: isAlerted,
                                          detailsMashupName: detailsMashupName,
                                        };
                                        
                                        result.AddRow(newEntry);
                                        
                                        function getMin() {
                                          return devicesPropertiesTable.rows[0].min;
                                        }
                                        
                                        function getMax() {
                                          return devicesPropertiesTable.rows[0].max;
                                        }
                                        
                                        function getIsAlerted(currValue, min, max) {
                                          if (currValue < min || currValue > max) {
                                            return true;
                                          } else {
                                            return false;
                                          }
                                        }
                                        
                                        function getPropertyCurrentValue(thingName, propertyName) {
                                          return Things[thingName][propertyName];
                                        }
                                        
                                        function getDetailsMashupName(thingTemplateName, propertyName) {
                                          const userQuery = {
                                            filters: {
                                              type: "AND",
                                              filters: [],
                                            },
                                          };
                                        
                                          const filters = userQuery.filters.filters;
                                        
                                          filters.push({
                                            fieldName: "propertyName",
                                            type: "EQ",
                                            value: propertyName,
                                          });
                                        
                                          filters.push({
                                            fieldName: "thingTemplateName",
                                            type: "EQ",
                                            value: thingTemplateName.rows[0].name,
                                          });
                                        
                                          let devicesPropertiesTable = Things[
                                            "PTCSC.ReportingBlock.DeviceDetailsConfig_DT"
                                          ].QueryDataTableEntries({
                                            maxItems: 50,
                                            query: userQuery,
                                          });
                                        
                                          return devicesPropertiesTable.rows[0].detailsMashupName;
                                        }
                                        
                                        function getPropertyLastValue(thingName, propertyName) {
                                          let propertyLastValue = Things[thingName].QueryPropertyHistory();
                                          if (propertyLastValue.length > 1) {
                                            return propertyLastValue.rows[1][propertyName];
                                          } else {
                                            return propertyLastValue.rows[0][propertyName];
                                          }
                                        }
                                        
                                        function getAverageValueDisplay(devicesPropertiesTable) {
                                          return devicesPropertiesTable.rows[0].averageValueDisplay;
                                        }
                                        
                                        function getChangeFromLastValueForAverage(averageValue) {
                                          return averageValue;
                                        }
                                        
                                        function getPropertyAverage(thingName, propertyName) {
                                          let averageConcat = "SUM_" + propertyName;
                                        
                                          let queryPropTable = Things[thingName].QueryPropertyHistory();
                                        
                                          let params = {
                                            t: queryPropTable,
                                            columns: propertyName,
                                            aggregates: "SUM",
                                          };
                                        
                                          let propertyAverage = Resources["InfoTableFunctions"].Aggregate(params);
                                        
                                          let average = propertyAverage.rows[0][averageConcat] / queryPropTable.length;
                                        
                                          return average.toFixed(1);
                                        }
                                        
                                        function getTargetValue(devicesPropertiesTable) {
                                          return devicesPropertiesTable.rows[0].target;
                                        }
                                        
                                        function getUnitOfMeasure(devicesPropertiesTable) {
                                          return devicesPropertiesTable.rows[0].unitOfMeasure;
                                        }
                                        
                                        function getPropertyDisplayName(devicesPropertiesTable) {
                                          return devicesPropertiesTable.rows[0].propertyDisplayName;
                                        }
                                        
                                        function getCardTitle(devicesPropertiesTable) {
                                          return devicesPropertiesTable.rows[0].cardTitle;
                                        }
                                        
                                        function getChangeFromLastValue(currentValue, previousValue) {
                                          return Math.floor(Math.random() * 100);
                                        }
                                        
                                        function getScheduleChartValues(thingName, propertyName) {
                                          let scheduleChartDisplay = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                              infoTableName: "InfoTable",
                                              dataShapeName: "PTCSC.ReportingBlock.ScheduleChartDisplay_DS"
                                          });
                                        
                                        
                                        
                                        for(var j = 0; j < 3; j++) {
                                          let data = getValuesForData();
                                            let newEntry = {
                                                resource: "Property " + j,
                                                data: data
                                            };
                                          scheduleChartDisplay.AddRow(newEntry);
                                        }
                                        return scheduleChartDisplay;
                                        }
                                        
                                        function getValuesForData() {
                                          let reasons = ["Running", "Maintenance", "Setup", "Unavailable"];
                                          let scheduleChartData = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                            infoTableName: "InfoTable",
                                            dataShapeName: "PTCSC.ReportingBlock.ScheduleChartData_DS",
                                          });
                                        
                                          for (var i = 0; i < 4; i++) {
                                            let newEntry = {
                                              reason: reasons[Math.floor(Math.random() * 4)],
                                              start: dateAddDays(new Date(), -Math.floor(Math.random() * 5)),
                                              end: dateAddDays(new Date(), Math.floor(Math.random() * 5)),
                                            };
                                            scheduleChartData.AddRow(newEntry);
                                          }
                                          return scheduleChartData;
                                        }
                                        ]]>
                                        </code>
                                        <editorSettings>
                                            <json>
                                            <![CDATA[
                                            {"viewState":{"viewState":{"firstPositionDeltaTop":-8,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":69}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":2,"lineNumber":89},"position":{"column":2,"lineNumber":89}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":225,"foldedImports":false}}}}
                                            ]]>
                                            </json>
                                        </editorSettings>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="GetPropertyValueWithHistoryForWaterfallChart">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                        <FieldDefinition
                                         baseType="JSON"
                                         description=""
                                         name="editorSettings"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                          infoTableName: "InfoTable",
                                          dataShapeName: "PTCSC.ReportingBlock.CardMashupResult_DS",
                                        });
                                        
                                        let propertiesHistory = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                          infoTableName: "InfoTable",
                                          dataShapeName: "PTCSC.ReportingBlock.WaterfallChartDisplay_DS",
                                        });
                                        
                                        propertiesHistory = getHistoryForProperty(thingName, propertyName);
                                        
                                        let thingTemplateName = Things[thingName].GetThingTemplate();
                                        
                                        const userQuery = {
                                          filters: {
                                            type: "AND",
                                            filters: [],
                                          },
                                        };
                                        
                                        const filters = userQuery.filters.filters;
                                        
                                        filters.push({
                                          fieldName: "propertyName",
                                          type: "EQ",
                                          value: propertyName,
                                        });
                                        
                                        filters.push({
                                          fieldName: "thingTemplateName",
                                          type: "EQ",
                                          value: thingTemplateName.rows[0].name,
                                        });
                                        
                                        let devicesPropertiesTable = Things["PTCSC.ReportingBlock.PropertyConfig_DT"].QueryDataTableEntries(
                                          {
                                            maxItems: 50,
                                            query: userQuery,
                                          }
                                        );
                                        
                                        let deviceOverviewTable = Things[
                                          "PTCSC.ReportingBlock.DeviceOverviewConfig_DT"
                                        ].QueryDataTableEntries({
                                          maxItems: 50,
                                          query: userQuery,
                                        });
                                        
                                        let currValue = getPropertyCurrentValue(thingName, propertyName); //done
                                        let lastValue = getPropertyLastValue(thingName, propertyName); //done
                                        let propDisplayName = getPropertyDisplayName(devicesPropertiesTable);
                                        let cardTitle = getCardTitle(deviceOverviewTable);
                                        let unitOfMeasure = getUnitOfMeasure(devicesPropertiesTable);
                                        let changeFromLastValue = Math.floor(getChangeFromLastValue(currValue, lastValue));
                                        let targetValue = getTargetValue(devicesPropertiesTable);
                                        let averageValue = getPropertyAverage(thingName, propertyName);
                                        let averageValueDisplay = getAverageValueDisplay(devicesPropertiesTable);
                                        let changeFromLastValueForAverage = getChangeFromLastValueForAverage();
                                        let detailsMashupName = getDetailsMashupName(thingTemplateName, propertyName);
                                        let min = getMin(devicesPropertiesTable);
                                        let max = getMax(devicesPropertiesTable);
                                        let isAlerted = getIsAlerted(currValue, min, max);
                                        
                                        let newEntry = {
                                          thingName: thingName,
                                          propertyName: propertyName,
                                          currentValue: currValue,
                                          targetValue: targetValue,
                                          lastValue: lastValue,
                                          variation: Math.floor(Math.random() * 4),
                                          changeFromLastValue: changeFromLastValue,
                                          propertyDisplayName: propDisplayName,
                                          cardTitle: cardTitle,
                                          unitOfMeasure: unitOfMeasure,
                                          averageValue: averageValue,
                                          averageValueDisplay: averageValueDisplay,
                                          variationForAverage: Math.floor(Math.random() * 4),
                                          changeFromLastValueForAverage: 0,
                                          waterfallChartHistory: propertiesHistory,
                                          min: min,
                                          max: max,
                                          isAlerted: isAlerted,
                                          detailsMashupName: detailsMashupName,
                                        };
                                        
                                        result.AddRow(newEntry);
                                        
                                        function getMin() {
                                          return devicesPropertiesTable.rows[0].min;
                                        }
                                        
                                        function getMax() {
                                          return devicesPropertiesTable.rows[0].max;
                                        }
                                        
                                        function getIsAlerted(currValue, min, max) {
                                          if (currValue < min || currValue > max) {
                                            return true;
                                          } else {
                                            return false;
                                          }
                                        }
                                        
                                        function getPropertyCurrentValue(thingName, propertyName) {
                                          return Things[thingName][propertyName];
                                        }
                                        
                                        function getPropertyLastValue(thingName, propertyName) {
                                          let propertyLastValue = Things[thingName].QueryPropertyHistory();
                                          if (propertyLastValue.length > 1) {
                                            return propertyLastValue.rows[1][propertyName];
                                          } else {
                                            return propertyLastValue.rows[0][propertyName];
                                          }
                                        }
                                        
                                        function getDetailsMashupName(thingTemplateName, propertyName) {
                                          const userQuery = {
                                            filters: {
                                              type: "AND",
                                              filters: [],
                                            },
                                          };
                                        
                                          const filters = userQuery.filters.filters;
                                        
                                          filters.push({
                                            fieldName: "propertyName",
                                            type: "EQ",
                                            value: propertyName,
                                          });
                                        
                                          filters.push({
                                            fieldName: "thingTemplateName",
                                            type: "EQ",
                                            value: thingTemplateName.rows[0].name,
                                          });
                                        
                                          let devicesPropertiesTable = Things[
                                            "PTCSC.ReportingBlock.DeviceDetailsConfig_DT"
                                          ].QueryDataTableEntries({
                                            maxItems: 50,
                                            query: userQuery,
                                          });
                                        
                                          return devicesPropertiesTable.rows[0].detailsMashupName;
                                        }
                                        
                                        function getAverageValueDisplay(devicesPropertiesTable) {
                                          return devicesPropertiesTable.rows[0].averageValueDisplay;
                                        }
                                        
                                        function getChangeFromLastValueForAverage(averageValue) {
                                          return averageValue;
                                        }
                                        
                                        function getPropertyAverage(thingName, propertyName) {
                                          let averageConcat = "SUM_" + propertyName;
                                        
                                          let queryPropTable = Things[thingName].QueryPropertyHistory();
                                        
                                          let params = {
                                            t: queryPropTable,
                                            columns: propertyName,
                                            aggregates: "SUM",
                                          };
                                        
                                          let propertyAverage = Resources["InfoTableFunctions"].Aggregate(params);
                                        
                                          let average = propertyAverage.rows[0][averageConcat] / queryPropTable.length;
                                        
                                          return average.toFixed(1);
                                        }
                                        
                                        function getTargetValue(devicesPropertiesTable) {
                                          return devicesPropertiesTable.rows[0].target;
                                        }
                                        
                                        function getUnitOfMeasure(devicesPropertiesTable) {
                                          return devicesPropertiesTable.rows[0].unitOfMeasure;
                                        }
                                        
                                        function getPropertyDisplayName(devicesPropertiesTable) {
                                          return devicesPropertiesTable.rows[0].propertyDisplayName;
                                        }
                                        
                                        function getCardTitle(devicesPropertiesTable) {
                                          return devicesPropertiesTable.rows[0].cardTitle;
                                        }
                                        
                                        function getChangeFromLastValue(currentValue, previousValue) {
                                          return Math.floor(Math.random() * 100);
                                        }
                                        
                                        function getHistoryForProperty(thingName, propertyName) {
                                          let propHistory = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                            infoTableName: "InfoTable",
                                            dataShapeName: "PTCSC.ReportingBlock.WaterfallChartDisplay_DS",
                                          });
                                          var query = {
                                            filters: {
                                              type: "NotMissingValue",
                                              fieldName: propertyName
                                            },
                                          };
                                        
                                          let queryPropTable = Things[thingName].QueryPropertyHistory({
                                            query: query,
                                          });
                                        
                                          for (var i = 0; i < 5; i++) {
                                            let newEntry = {
                                              name: "Item " + i+1,
                                              value: Math.floor(Math.random() * 20),
                                              showTotal:1 
                                            };
                                            propHistory.AddRow(newEntry);
                                          }
                                          return propHistory;
                                        }
                                        ]]>
                                        </code>
                                        <editorSettings>
                                            <json>
                                            <![CDATA[
                                            {"viewState":{"viewState":{"firstPositionDeltaTop":-1,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":70}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":2,"lineNumber":95},"position":{"column":2,"lineNumber":95}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":221,"foldedImports":false}}}}
                                            ]]>
                                            </json>
                                        </editorSettings>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="test">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                        <FieldDefinition
                                         baseType="JSON"
                                         description=""
                                         name="editorSettings"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        let result = getHistoryForProperty("Caterpillar01", "speed");
                                        
                                        let startDate;
                                        let endDate;
                                        
                                        function getHistoryForProperty(thingName, propertyName) {
                                          let propHistory = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                            infoTableName: "InfoTable",
                                            dataShapeName: "PTCSC.ReportingBlock.PropertiesHistoryForDetails_DS",
                                          });
                                          var query = {
                                            filters: {
                                              type: "NotMissingValue",
                                              fieldName: "value",
                                            },
                                          };
                                        
                                          if (startDate && endDate) {
                                            startDate = startDate;
                                            endDate = endDate;
                                          } else {
                                            startDate = dateAddDays(new Date(), -40);
                                            endDate = new Date();
                                          }
                                        
                                          let queryPropTable = Things[thingName].QueryNumberPropertyHistory({
                                            propertyName: propertyName,
                                            query: query,
                                            startDate: startDate,
                                            endDate: endDate,
                                          });
                                        
                                          for (var i = 0; i < queryPropTable.length; i++) {
                                            let newEntry = {
                                              date: queryPropTable.rows[i].timestamp,
                                              value: queryPropTable[i].value,
                                            };
                                            propHistory.AddRow(newEntry);
                                          }
                                          return propHistory;
                                        }
                                        ]]>
                                        </code>
                                        <editorSettings>
                                            <json>
                                            <![CDATA[
                                            {"viewState":{"viewState":{"firstPositionDeltaTop":0,"scrollLeft":0,"firstPosition":{"column":1,"lineNumber":1}},"cursorState":[{"inSelectionMode":false,"selectionStart":{"column":1,"lineNumber":2},"position":{"column":1,"lineNumber":2}}],"contributionsState":{"editor.contrib.wordHighlighter":false,"editor.contrib.folding":{"provider":"indent","lineCount":42,"foldedImports":false}}}}
                                            ]]>
                                            </json>
                                        </editorSettings>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </ServiceImplementations>
                <Subscriptions></Subscriptions>
            </ThingShape>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <ImplementedShapes></ImplementedShapes>
            <ThingProperties></ThingProperties>
        </Thing>
    </Things>
</Entities>
